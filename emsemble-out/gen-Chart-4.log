stdout: else_statement -> BlockStatement
using GPU
p
path org.jfree.chart.plot.XYPlot
getDataRange
Position(line=4425, column=12)
FOUND IT!
[{'bugid': 'Chart-4', 'treeroot': <Searchnode.Node object at 0x7fa5af3d10d0>, 'troot': <Searchnode.Node object at 0x7fa63412e650>, 'oldcode': '                    Collection c = r.getAnnotations();', 'filepath': 'buggy/Chart-4/source/org/jfree/chart/plot/XYPlot.java', 'subroot': <Searchnode.Node object at 0x7fa5af398190>, 'vardic': {'getDataRange_ter': 'meth0', 'd_ter': 'loc0', 'r_ter': 'loc1', 'c_ter': 'loc2', 'i_ter': 'loc3', 'a_ter': 'loc4', 'it_ter': 'loc5', 'iterator_ter': 'loc16'}, 'typedic': {'d_ter': 'XYDataset', 'r_ter': 'XYItemRenderer', 'c_ter': 'Collection', 'i_ter': 'Iterator', 'a_ter': 'XYAnnotation', 'it_ter': 'Iterator', 'iterator_ter': 'Iterator'}, 'idss': 'Chart-4', 'classname': 'org.jfree.chart.plot.XYPlot', 'precode': '/* ===========================================================\n * JFreeChart : a free chart library for the Java(tm) platform\n * ===========================================================\n *\n * (C) Copyright 2000-2009, by Object Refinery Limited and Contributors.\n *\n * Project Info:  http://www.jfree.org/jfreechart/index.html\n *\n * This library is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,\n * USA.\n *\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc.\n * in the United States and other countries.]\n *\n * -----------\n * XYPlot.java\n * -----------\n * (C) Copyright 2000-2009, by Object Refinery Limited and Contributors.\n *\n * Original Author:  David Gilbert (for Object Refinery Limited);\n * Contributor(s):   Craig MacFarlane;\n *                   Mark Watson (www.markwatson.com);\n *                   Jonathan Nash;\n *                   Gideon Krause;\n *                   Klaus Rheinwald;\n *                   Xavier Poinsard;\n *                   Richard Atkinson;\n *                   Arnaud Lelievre;\n *                   Nicolas Brodu;\n *                   Eduardo Ramalho;\n *                   Sergei Ivanov;\n *                   Richard West, Advanced Micro Devices, Inc.;\n *                   Ulrich Voigt - patches 1997549 and 2686040;\n *                   Peter Kolb - patches 1934255 and 2603321;\n *                   Andrew Mickish - patch 1868749;\n *\n * Changes (from 21-Jun-2001)\n * --------------------------\n * 21-Jun-2001 : Removed redundant JFreeChart parameter from constructors (DG);\n * 18-Sep-2001 : Updated header and fixed DOS encoding problem (DG);\n * 15-Oct-2001 : Data source classes moved to com.jrefinery.data.* (DG);\n * 19-Oct-2001 : Removed the code for drawing the visual representation of each\n *               data point into a separate class StandardXYItemRenderer.\n *               This will make it easier to add variations to the way the\n *               charts are drawn.  Based on code contributed by Mark\n *               Watson (DG);\n * 22-Oct-2001 : Renamed DataSource.java --> Dataset.java etc. (DG);\n * 20-Nov-2001 : Fixed clipping bug that shows up when chart is displayed\n *               inside JScrollPane (DG);\n * 12-Dec-2001 : Removed unnecessary \'throws\' clauses from constructor (DG);\n * 13-Dec-2001 : Added skeleton code for tooltips.  Added new constructor. (DG);\n * 16-Jan-2002 : Renamed the tooltips class (DG);\n * 22-Jan-2002 : Added DrawInfo class, incorporating tooltips and crosshairs.\n *               Crosshairs based on code by Jonathan Nash (DG);\n * 05-Feb-2002 : Added alpha-transparency setting based on code by Sylvain\n *               Vieujot (DG);\n * 26-Feb-2002 : Updated getMinimumXXX() and getMaximumXXX() methods to handle\n *               special case when chart is null (DG);\n * 28-Feb-2002 : Renamed Datasets.java --> DatasetUtilities.java (DG);\n * 28-Mar-2002 : The plot now registers with the renderer as a property change\n *               listener.  Also added a new constructor (DG);\n * 09-Apr-2002 : Removed the transRangeZero from the renderer.drawItem()\n *               method.  Moved the tooltip generator into the renderer (DG);\n * 23-Apr-2002 : Fixed bug in methods for drawing horizontal and vertical\n *               lines (DG);\n * 13-May-2002 : Small change to the draw() method so that it works for\n *               OverlaidXYPlot also (DG);\n * 25-Jun-2002 : Removed redundant import (DG);\n * 20-Aug-2002 : Renamed getItemRenderer() --> getRenderer(), and\n *               setXYItemRenderer() --> setRenderer() (DG);\n * 28-Aug-2002 : Added mechanism for (optional) plot annotations (DG);\n * 02-Oct-2002 : Fixed errors reported by Checkstyle (DG);\n * 18-Nov-2002 : Added grid settings for both domain and range axis (previously\n *               these were set in the axes) (DG);\n * 09-Jan-2003 : Further additions to the grid settings, plus integrated plot\n *               border bug fix contributed by Gideon Krause (DG);\n * 22-Jan-2003 : Removed monolithic constructor (DG);\n * 04-Mar-2003 : Added \'no data\' message, see bug report 691634.  Added\n *               secondary range markers using code contributed by Klaus\n *               Rheinwald (DG);\n * 26-Mar-2003 : Implemented Serializable (DG);\n * 03-Apr-2003 : Added setDomainAxisLocation() method (DG);\n * 30-Apr-2003 : Moved annotation drawing into a separate method (DG);\n * 01-May-2003 : Added multi-pass mechanism for renderers (DG);\n * 02-May-2003 : Changed axis locations from int to AxisLocation (DG);\n * 15-May-2003 : Added an orientation attribute (DG);\n * 02-Jun-2003 : Removed range axis compatibility test (DG);\n * 05-Jun-2003 : Added domain and range grid bands (sponsored by Focus Computer\n *               Services Ltd) (DG);\n * 26-Jun-2003 : Fixed bug (757303) in getDataRange() method (DG);\n * 02-Jul-2003 : Added patch from bug report 698646 (secondary axes for\n *               overlaid plots) (DG);\n * 23-Jul-2003 : Added support for multiple secondary datasets, axes and\n *               renderers (DG);\n * 27-Jul-2003 : Added support for stacked XY area charts (RA);\n * 19-Aug-2003 : Implemented Cloneable (DG);\n * 01-Sep-2003 : Fixed bug where change to secondary datasets didn\'t generate\n *               change event (797466) (DG)\n * 08-Sep-2003 : Added internationalization via use of properties\n *               resourceBundle (RFE 690236) (AL);\n * 08-Sep-2003 : Changed ValueAxis API (DG);\n * 08-Sep-2003 : Fixes for serialization (NB);\n * 16-Sep-2003 : Changed ChartRenderingInfo --> PlotRenderingInfo (DG);\n * 17-Sep-2003 : Fixed zooming to include secondary domain axes (DG);\n * 18-Sep-2003 : Added getSecondaryDomainAxisCount() and\n *               getSecondaryRangeAxisCount() methods suggested by Eduardo\n *               Ramalho (RFE 808548) (DG);\n * 23-Sep-2003 : Split domain and range markers into foreground and\n *               background (DG);\n * 06-Oct-2003 : Fixed bug in clearDomainMarkers() and clearRangeMarkers()\n *               methods.  Fixed bug (815876) in addSecondaryRangeMarker()\n *               method.  Added new addSecondaryDomainMarker methods (see bug\n *               id 815869) (DG);\n * 10-Nov-2003 : Added getSecondaryDomain/RangeAxisMappedToDataset() methods\n *               requested by Eduardo Ramalho (DG);\n * 24-Nov-2003 : Removed unnecessary notification when updating axis anchor\n *               values (DG);\n * 21-Jan-2004 : Update for renamed method in ValueAxis (DG);\n * 25-Feb-2004 : Replaced CrosshairInfo with CrosshairState (DG);\n * 12-Mar-2004 : Fixed bug where primary renderer is always used to determine\n *               range type (DG);\n * 22-Mar-2004 : Fixed cloning bug (DG);\n * 23-Mar-2004 : Fixed more cloning bugs (DG);\n * 07-Apr-2004 : Fixed problem with axis range when the secondary renderer is\n *               stacked, see this post in the forum:\n *               http://www.jfree.org/phpBB2/viewtopic.php?t=8204 (DG);\n * 07-Apr-2004 : Added get/setDatasetRenderingOrder() methods (DG);\n * 26-Apr-2004 : Added option to fill quadrant areas in the background of the\n *               plot (DG);\n * 27-Apr-2004 : Removed major distinction between primary and secondary\n *               datasets, renderers and axes (DG);\n * 30-Apr-2004 : Modified to make use of the new getRangeExtent() method in the\n *               renderer interface (DG);\n * 13-May-2004 : Added optional fixedLegendItems attribute (DG);\n * 19-May-2004 : Added indexOf() method (DG);\n * 03-Jun-2004 : Fixed zooming bug (DG);\n * 18-Aug-2004 : Added removedAnnotation() method (by tkram01) (DG);\n * 05-Oct-2004 : Modified storage type for dataset-to-axis maps (DG);\n * 06-Oct-2004 : Modified getDataRange() method to use renderer to determine\n *               the x-value range (now matches behaviour for y-values).  Added\n *               getDomainAxisIndex() method (DG);\n * 12-Nov-2004 : Implemented new Zoomable interface (DG);\n * 25-Nov-2004 : Small update to clone() implementation (DG);\n * 22-Feb-2005 : Changed axis offsets from Spacer --> RectangleInsets (DG);\n * 24-Feb-2005 : Added indexOf(XYItemRenderer) method (DG);\n * 21-Mar-2005 : Register plot as change listener in setRenderer() method (DG);\n * 21-Apr-2005 : Added get/setSeriesRenderingOrder() methods (ET);\n * 26-Apr-2005 : Removed LOGGER (DG);\n * 04-May-2005 : Fixed serialization of domain and range markers (DG);\n * 05-May-2005 : Removed unused draw() method (DG);\n * 20-May-2005 : Added setDomainAxes() and setRangeAxes() methods, as per\n *               RFE 1183100 (DG);\n * 01-Jun-2005 : Upon deserialization, register plot as a listener with its\n *               axes, dataset(s) and renderer(s) - see patch 1209475 (DG);\n * 01-Jun-2005 : Added clearDomainMarkers(int) method to match\n *               clearRangeMarkers(int) (DG);\n * 06-Jun-2005 : Fixed equals() method to handle GradientPaint (DG);\n * 09-Jun-2005 : Added setRenderers(), as per RFE 1183100 (DG);\n * 06-Jul-2005 : Fixed crosshair bug (id = 1233336) (DG);\n * ------------- JFREECHART 1.0.x ---------------------------------------------\n * 26-Jan-2006 : Added getAnnotations() method (DG);\n * 05-Sep-2006 : Added MarkerChangeEvent support (DG);\n * 13-Oct-2006 : Fixed initialisation of CrosshairState - see bug report\n *               1565168 (DG);\n * 22-Nov-2006 : Fixed equals() and cloning() for quadrant attributes, plus\n *               API doc updates (DG);\n * 29-Nov-2006 : Added argument checks (DG);\n * 15-Jan-2007 : Fixed bug in drawRangeMarkers() (DG);\n * 07-Feb-2007 : Fixed bug 1654215, renderer with no dataset (DG);\n * 26-Feb-2007 : Added missing setDomainAxisLocation() and\n *               setRangeAxisLocation() methods (DG);\n * 02-Mar-2007 : Fix for crosshair positioning with horizontal orientation\n *               (see patch 1671648 by Sergei Ivanov) (DG);\n * 13-Mar-2007 : Added null argument checks for crosshair attributes (DG);\n * 23-Mar-2007 : Added domain zero base line facility (DG);\n * 04-May-2007 : Render only visible data items if possible (DG);\n * 24-May-2007 : Fixed bug in render method for an empty series (DG);\n * 07-Jun-2007 : Modified drawBackground() to pass orientation to\n *               fillBackground() for handling GradientPaint (DG);\n * 20-Jun-2007 : Removed JCommon dependencies (DG);\n * 27-Jun-2007 : Updated drawDomainGridlines() method for renamed method in\n *               XYItemRenderer interface.\n * 24-Sep-2007 : Added new zoom methods (DG);\n * 26-Sep-2007 : Include index value in IllegalArgumentExceptions (DG);\n * 05-Nov-2007 : Applied patch 1823697, by Richard West, for removal of domain\n *               and range markers (DG);\n * 12-Nov-2007 : Fixed bug in equals() method for domain and range tick\n *               band paint attributes (DG);\n * 27-Nov-2007 : Added new setFixedDomain/RangeAxisSpace() methods (DG);\n * 04-Jan-2008 : Fix for quadrant painting error - see patch 1849564 (DG);\n * 25-Mar-2008 : Added new methods with optional notification - see patch\n *               1913751 (DG);\n * 07-Apr-2008 : Fixed NPE in removeDomainMarker() and\n *               removeRangeMarker() (DG);\n * 22-May-2008 : Modified calculateAxisSpace() to process range axes first,\n *               then adjust the plot area before calculating the space\n *               for the domain axes (DG);\n * 09-Jul-2008 : Added renderer state notification when series pass begins\n *               and ends - see patch 1997549 by Ulrich Voigt (DG);\n * 25-Jul-2008 : Fixed NullPointerException for plots with no axes (DG);\n * 15-Aug-2008 : Added getRendererCount() method (DG);\n * 25-Sep-2008 : Added minor tick support, see patch 1934255 by Peter Kolb (DG);\n * 25-Nov-2008 : Allow datasets to be mapped to multiple axes - based on patch\n *               1868749 by Andrew Mickish (DG);\n * 18-Dec-2008 : Use ResourceBundleWrapper - see patch 1607918 by\n *               Jess Thrysoee (DG);\n * 10-Mar-2009 : Allow some annotations to contribute to axis autoRange (DG);\n * 18-Mar-2009 : Modified anchored zoom behaviour and fixed bug in\n *               "process visible range" rendering (DG);\n * 19-Mar-2009 : Added panning support based on patch 2686040 by Ulrich\n *               Voigt (DG);\n * 19-Mar-2009 : Added entity support - see patch 2603321 by Peter Kolb (DG);\n * 30-Mar-2009 : Delegate panning to axes (DG);\n * 10-May-2009 : Added check for fixedLegendItems in equals(), and code to\n *               handle cloning (DG);\n * 29-Jun-2009 : Implemented Selectable (DG);\n *\n */\n\npackage org.jfree.chart.plot;\n\nimport java.awt.AlphaComposite;\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Composite;\nimport java.awt.Graphics2D;\nimport java.awt.Paint;\nimport java.awt.Shape;\nimport java.awt.Stroke;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.PathIterator;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.ResourceBundle;\nimport java.util.Set;\nimport java.util.TreeMap;\n\nimport org.jfree.chart.LegendItem;\nimport org.jfree.chart.LegendItemCollection;\nimport org.jfree.chart.RenderingSource;\nimport org.jfree.chart.annotations.XYAnnotation;\nimport org.jfree.chart.annotations.XYAnnotationBoundsInfo;\nimport org.jfree.chart.axis.Axis;\nimport org.jfree.chart.axis.AxisCollection;\nimport org.jfree.chart.axis.AxisLocation;\nimport org.jfree.chart.axis.AxisSpace;\nimport org.jfree.chart.axis.AxisState;\nimport org.jfree.chart.axis.TickType;\nimport org.jfree.chart.axis.ValueAxis;\nimport org.jfree.chart.axis.ValueTick;\nimport org.jfree.chart.event.ChartChangeEventType;\nimport org.jfree.chart.event.PlotChangeEvent;\nimport org.jfree.chart.event.RendererChangeEvent;\nimport org.jfree.chart.event.RendererChangeListener;\nimport org.jfree.chart.renderer.RendererUtilities;\nimport org.jfree.chart.renderer.xy.AbstractXYItemRenderer;\nimport org.jfree.chart.renderer.xy.XYItemRenderer;\nimport org.jfree.chart.renderer.xy.XYItemRendererState;\nimport org.jfree.chart.util.Layer;\nimport org.jfree.chart.util.ObjectList;\nimport org.jfree.chart.util.ObjectUtilities;\nimport org.jfree.chart.util.PaintUtilities;\nimport org.jfree.chart.util.PublicCloneable;\nimport org.jfree.chart.util.RectangleEdge;\nimport org.jfree.chart.util.RectangleInsets;\nimport org.jfree.chart.util.ResourceBundleWrapper;\nimport org.jfree.chart.util.SerialUtilities;\nimport org.jfree.data.Range;\nimport org.jfree.data.general.Dataset;\nimport org.jfree.data.general.DatasetChangeEvent;\nimport org.jfree.data.general.DatasetUtilities;\nimport org.jfree.data.xy.AbstractXYDataset;\nimport org.jfree.data.xy.SelectableXYDataset;\nimport org.jfree.data.xy.XYDataset;\nimport org.jfree.data.xy.XYDatasetSelectionState;\n\n/**\n * A general class for plotting data in the form of (x, y) pairs.  This plot can\n * use data from any class that implements the {@link XYDataset} interface.\n * <P>\n * <code>XYPlot</code> makes use of an {@link XYItemRenderer} to draw each point\n * on the plot.  By using different renderers, various chart types can be\n * produced.\n * <p>\n * The {@link org.jfree.chart.ChartFactory} class contains static methods for\n * creating pre-configured charts.\n */\npublic class XYPlot extends Plot implements ValueAxisPlot, Pannable,\n        Selectable, Zoomable, RendererChangeListener, Cloneable,\n        PublicCloneable, Serializable {\n\n    /** For serialization. */\n    private static final long serialVersionUID = 7044148245716569264L;\n\n    /** The default grid line stroke. */\n    public static final Stroke DEFAULT_GRIDLINE_STROKE = new BasicStroke(0.5f,\n            BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0.0f,\n            new float[] {2.0f, 2.0f}, 0.0f);\n\n    /** The default grid line paint. */\n    public static final Paint DEFAULT_GRIDLINE_PAINT = Color.WHITE;\n\n    /** The default crosshair visibility. */\n    public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;\n\n    /** The default crosshair stroke. */\n    public static final Stroke DEFAULT_CROSSHAIR_STROKE\n            = DEFAULT_GRIDLINE_STROKE;\n\n    /** The default crosshair paint. */\n    public static final Paint DEFAULT_CROSSHAIR_PAINT = Color.blue;\n\n    /** The resourceBundle for the localization. */\n    protected static ResourceBundle localizationResources\n            = ResourceBundleWrapper.getBundle(\n                    "org.jfree.chart.plot.LocalizationBundle");\n\n    /** The plot orientation. */\n    private PlotOrientation orientation;\n\n    /** The offset between the data area and the axes. */\n    private RectangleInsets axisOffset;\n\n    /** The domain axis / axes (used for the x-values). */\n    private ObjectList domainAxes;\n\n    /** The domain axis locations. */\n    private ObjectList domainAxisLocations;\n\n    /** The range axis (used for the y-values). */\n    private ObjectList rangeAxes;\n\n    /** The range axis location. */\n    private ObjectList rangeAxisLocations;\n\n    /** Storage for the datasets. */\n    private ObjectList datasets;\n\n    /** Storage for the renderers. */\n    private ObjectList renderers;\n\n    /**\n     * Storage for the mapping between datasets/renderers and domain axes.  The\n     * keys in the map are Integer objects, corresponding to the dataset\n     * index.  The values in the map are List objects containing Integer\n     * objects (corresponding to the axis indices).  If the map contains no\n     * entry for a dataset, it is assumed to map to the primary domain axis\n     * (index = 0).\n     */\n    private Map datasetToDomainAxesMap;\n\n    /**\n     * Storage for the mapping between datasets/renderers and range axes.  The\n     * keys in the map are Integer objects, corresponding to the dataset\n     * index.  The values in the map are List objects containing Integer\n     * objects (corresponding to the axis indices).  If the map contains no\n     * entry for a dataset, it is assumed to map to the primary domain axis\n     * (index = 0).\n     */\n    private Map datasetToRangeAxesMap;\n\n    /** The origin point for the quadrants (if drawn). */\n    private transient Point2D quadrantOrigin = new Point2D.Double(0.0, 0.0);\n\n    /** The paint used for each quadrant. */\n    private transient Paint[] quadrantPaint\n            = new Paint[] {null, null, null, null};\n\n    /** A flag that controls whether the domain grid-lines are visible. */\n    private boolean domainGridlinesVisible;\n\n    /** The stroke used to draw the domain grid-lines. */\n    private transient Stroke domainGridlineStroke;\n\n    /** The paint used to draw the domain grid-lines. */\n    private transient Paint domainGridlinePaint;\n\n    /** A flag that controls whether the range grid-lines are visible. */\n    private boolean rangeGridlinesVisible;\n\n    /** The stroke used to draw the range grid-lines. */\n    private transient Stroke rangeGridlineStroke;\n\n    /** The paint used to draw the range grid-lines. */\n    private transient Paint rangeGridlinePaint;\n\n    /**\n     * A flag that controls whether the domain minor grid-lines are visible.\n     *\n     * @since 1.0.12\n     */\n    private boolean domainMinorGridlinesVisible;\n\n    /**\n     * The stroke used to draw the domain minor grid-lines.\n     *\n     * @since 1.0.12\n     */\n    private transient Stroke domainMinorGridlineStroke;\n\n    /**\n     * The paint used to draw the domain minor grid-lines.\n     *\n     * @since 1.0.12\n     */\n    private transient Paint domainMinorGridlinePaint;\n\n    /**\n     * A flag that controls whether the range minor grid-lines are visible.\n     *\n     * @since 1.0.12\n     */\n    private boolean rangeMinorGridlinesVisible;\n\n    /**\n     * The stroke used to draw the range minor grid-lines.\n     *\n     * @since 1.0.12\n     */\n    private transient Stroke rangeMinorGridlineStroke;\n\n    /**\n     * The paint used to draw the range minor grid-lines.\n     *\n     * @since 1.0.12\n     */\n    private transient Paint rangeMinorGridlinePaint;\n\n    /**\n     * A flag that controls whether or not the zero baseline against the domain\n     * axis is visible.\n     *\n     * @since 1.0.5\n     */\n    private boolean domainZeroBaselineVisible;\n\n    /**\n     * The stroke used for the zero baseline against the domain axis.\n     *\n     * @since 1.0.5\n     */\n    private transient Stroke domainZeroBaselineStroke;\n\n    /**\n     * The paint used for the zero baseline against the domain axis.\n     *\n     * @since 1.0.5\n     */\n    private transient Paint domainZeroBaselinePaint;\n\n    /**\n     * A flag that controls whether or not the zero baseline against the range\n     * axis is visible.\n     */\n    private boolean rangeZeroBaselineVisible;\n\n    /** The stroke used for the zero baseline against the range axis. */\n    private transient Stroke rangeZeroBaselineStroke;\n\n    /** The paint used for the zero baseline against the range axis. */\n    private transient Paint rangeZeroBaselinePaint;\n\n    /** A flag that controls whether or not a domain crosshair is drawn..*/\n    private boolean domainCrosshairVisible;\n\n    /** The domain crosshair value. */\n    private double domainCrosshairValue;\n\n    /** The pen/brush used to draw the crosshair (if any). */\n    private transient Stroke domainCrosshairStroke;\n\n    /** The color used to draw the crosshair (if any). */\n    private transient Paint domainCrosshairPaint;\n\n    /**\n     * A flag that controls whether or not the crosshair locks onto actual\n     * data points.\n     */\n    private boolean domainCrosshairLockedOnData = true;\n\n    /** A flag that controls whether or not a range crosshair is drawn..*/\n    private boolean rangeCrosshairVisible;\n\n    /** The range crosshair value. */\n    private double rangeCrosshairValue;\n\n    /** The pen/brush used to draw the crosshair (if any). */\n    private transient Stroke rangeCrosshairStroke;\n\n    /** The color used to draw the crosshair (if any). */\n    private transient Paint rangeCrosshairPaint;\n\n    /**\n     * A flag that controls whether or not the crosshair locks onto actual\n     * data points.\n     */\n    private boolean rangeCrosshairLockedOnData = true;\n\n    /** A map of lists of foreground markers (optional) for the domain axes. */\n    private Map foregroundDomainMarkers;\n\n    /** A map of lists of background markers (optional) for the domain axes. */\n    private Map backgroundDomainMarkers;\n\n    /** A map of lists of foreground markers (optional) for the range axes. */\n    private Map foregroundRangeMarkers;\n\n    /** A map of lists of background markers (optional) for the range axes. */\n    private Map backgroundRangeMarkers;\n\n    /**\n     * A (possibly empty) list of annotations for the plot.  The list should\n     * be initialised in the constructor and never allowed to be\n     * <code>null</code>.\n     */\n    private List annotations;\n\n    /** The paint used for the domain tick bands (if any). */\n    private transient Paint domainTickBandPaint;\n\n    /** The paint used for the range tick bands (if any). */\n    private transient Paint rangeTickBandPaint;\n\n    /** The fixed domain axis space. */\n    private AxisSpace fixedDomainAxisSpace;\n\n    /** The fixed range axis space. */\n    private AxisSpace fixedRangeAxisSpace;\n\n    /**\n     * The order of the dataset rendering (REVERSE draws the primary dataset\n     * last so that it appears to be on top).\n     */\n    private DatasetRenderingOrder datasetRenderingOrder\n            = DatasetRenderingOrder.REVERSE;\n\n    /**\n     * The order of the series rendering (REVERSE draws the primary series\n     * last so that it appears to be on top).\n     */\n    private SeriesRenderingOrder seriesRenderingOrder\n            = SeriesRenderingOrder.REVERSE;\n\n    /**\n     * The weight for this plot (only relevant if this is a subplot in a\n     * combined plot).\n     */\n    private int weight;\n\n    /**\n     * An optional collection of legend items that can be returned by the\n     * getLegendItems() method.\n     */\n    private LegendItemCollection fixedLegendItems;\n\n    /**\n     * A flag that controls whether or not panning is enabled for the domain\n     * axis/axes.\n     *\n     * @since 1.0.13\n     */\n    private boolean domainPannable;\n\n    /**\n     * A flag that controls whether or not panning is enabled for the range\n     * axis/axes.\n     *\n     * @since 1.0.13\n     */\n    private boolean rangePannable;\n\n    /**\n     * Creates a new <code>XYPlot</code> instance with no dataset, no axes and\n     * no renderer.  You should specify these items before using the plot.\n     */\n    public XYPlot() {\n        this(null, null, null, null);\n    }\n\n    /**\n     * Creates a new plot with the specified dataset, axes and renderer.  Any\n     * of the arguments can be <code>null</code>, but in that case you should\n     * take care to specify the value before using the plot (otherwise a\n     * <code>NullPointerException</code> may be thrown).\n     *\n     * @param dataset  the dataset (<code>null</code> permitted).\n     * @param domainAxis  the domain axis (<code>null</code> permitted).\n     * @param rangeAxis  the range axis (<code>null</code> permitted).\n     * @param renderer  the renderer (<code>null</code> permitted).\n     */\n    public XYPlot(XYDataset dataset,\n                  ValueAxis domainAxis,\n                  ValueAxis rangeAxis,\n                  XYItemRenderer renderer) {\n\n        super();\n\n        this.orientation = PlotOrientation.VERTICAL;\n        this.weight = 1;  // only relevant when this is a subplot\n        this.axisOffset = new RectangleInsets(4.0, 4.0, 4.0, 4.0);\n\n        // allocate storage for datasets, axes and renderers (all optional)\n        this.domainAxes = new ObjectList();\n        this.domainAxisLocations = new ObjectList();\n        this.foregroundDomainMarkers = new HashMap();\n        this.backgroundDomainMarkers = new HashMap();\n\n        this.rangeAxes = new ObjectList();\n        this.rangeAxisLocations = new ObjectList();\n        this.foregroundRangeMarkers = new HashMap();\n        this.backgroundRangeMarkers = new HashMap();\n\n        this.datasets = new ObjectList();\n        this.renderers = new ObjectList();\n\n        this.datasetToDomainAxesMap = new TreeMap();\n        this.datasetToRangeAxesMap = new TreeMap();\n\n        this.annotations = new java.util.ArrayList();\n\n        this.datasets.set(0, dataset);\n        if (dataset != null) {\n            dataset.addChangeListener(this);\n        }\n\n        this.renderers.set(0, renderer);\n        if (renderer != null) {\n            renderer.setPlot(this);\n            renderer.addChangeListener(this);\n        }\n\n        this.domainAxes.set(0, domainAxis);\n        this.mapDatasetToDomainAxis(0, 0);\n        if (domainAxis != null) {\n            domainAxis.setPlot(this);\n            domainAxis.addChangeListener(this);\n        }\n        this.domainAxisLocations.set(0, AxisLocation.BOTTOM_OR_LEFT);\n\n        this.rangeAxes.set(0, rangeAxis);\n        this.mapDatasetToRangeAxis(0, 0);\n        if (rangeAxis != null) {\n            rangeAxis.setPlot(this);\n            rangeAxis.addChangeListener(this);\n        }\n        this.rangeAxisLocations.set(0, AxisLocation.BOTTOM_OR_LEFT);\n\n        configureDomainAxes();\n        configureRangeAxes();\n\n        this.domainGridlinesVisible = true;\n        this.domainGridlineStroke = DEFAULT_GRIDLINE_STROKE;\n        this.domainGridlinePaint = DEFAULT_GRIDLINE_PAINT;\n\n        this.domainMinorGridlinesVisible = false;\n        this.domainMinorGridlineStroke = DEFAULT_GRIDLINE_STROKE;\n        this.domainMinorGridlinePaint = Color.white;\n\n        this.domainZeroBaselineVisible = false;\n        this.domainZeroBaselinePaint = Color.black;\n        this.domainZeroBaselineStroke = new BasicStroke(0.5f);\n\n        this.rangeGridlinesVisible = true;\n        this.rangeGridlineStroke = DEFAULT_GRIDLINE_STROKE;\n        this.rangeGridlinePaint = DEFAULT_GRIDLINE_PAINT;\n\n        this.rangeMinorGridlinesVisible = false;\n        this.rangeMinorGridlineStroke = DEFAULT_GRIDLINE_STROKE;\n        this.rangeMinorGridlinePaint = Color.white;\n\n        this.rangeZeroBaselineVisible = false;\n        this.rangeZeroBaselinePaint = Color.black;\n        this.rangeZeroBaselineStroke = new BasicStroke(0.5f);\n\n        this.domainCrosshairVisible = false;\n        this.domainCrosshairValue = 0.0;\n        this.domainCrosshairStroke = DEFAULT_CROSSHAIR_STROKE;\n        this.domainCrosshairPaint = DEFAULT_CROSSHAIR_PAINT;\n\n        this.rangeCrosshairVisible = false;\n        this.rangeCrosshairValue = 0.0;\n        this.rangeCrosshairStroke = DEFAULT_CROSSHAIR_STROKE;\n        this.rangeCrosshairPaint = DEFAULT_CROSSHAIR_PAINT;\n\n    }\n\n    /**\n     * Returns the plot type as a string.\n     *\n     * @return A short string describing the type of plot.\n     */\n    public String getPlotType() {\n        return localizationResources.getString("XY_Plot");\n    }\n\n    /**\n     * Returns the orientation of the plot.\n     *\n     * @return The orientation (never <code>null</code>).\n     *\n     * @see #setOrientation(PlotOrientation)\n     */\n    public PlotOrientation getOrientation() {\n        return this.orientation;\n    }\n\n    /**\n     * Sets the orientation for the plot and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param orientation  the orientation (<code>null</code> not allowed).\n     *\n     * @see #getOrientation()\n     */\n    public void setOrientation(PlotOrientation orientation) {\n        if (orientation == null) {\n            throw new IllegalArgumentException("Null \'orientation\' argument.");\n        }\n        if (orientation != this.orientation) {\n            this.orientation = orientation;\n            fireChangeEvent();\n        }\n    }\n\n    /**\n     * Returns the axis offset.\n     *\n     * @return The axis offset (never <code>null</code>).\n     *\n     * @see #setAxisOffset(RectangleInsets)\n     */\n    public RectangleInsets getAxisOffset() {\n        return this.axisOffset;\n    }\n\n    /**\n     * Sets the axis offsets (gap between the data area and the axes) and sends\n     * a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param offset  the offset (<code>null</code> not permitted).\n     *\n     * @see #getAxisOffset()\n     */\n    public void setAxisOffset(RectangleInsets offset) {\n        if (offset == null) {\n            throw new IllegalArgumentException("Null \'offset\' argument.");\n        }\n        this.axisOffset = offset;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns the domain axis with index 0.  If the domain axis for this plot\n     * is <code>null</code>, then the method will return the parent plot\'s\n     * domain axis (if there is a parent plot).\n     *\n     * @return The domain axis (possibly <code>null</code>).\n     *\n     * @see #getDomainAxis(int)\n     * @see #setDomainAxis(ValueAxis)\n     */\n    public ValueAxis getDomainAxis() {\n        return getDomainAxis(0);\n    }\n\n    /**\n     * Returns the domain axis with the specified index, or <code>null</code>.\n     *\n     * @param index  the axis index.\n     *\n     * @return The axis (<code>null</code> possible).\n     *\n     * @see #setDomainAxis(int, ValueAxis)\n     */\n    public ValueAxis getDomainAxis(int index) {\n        ValueAxis result = null;\n        if (index < this.domainAxes.size()) {\n            result = (ValueAxis) this.domainAxes.get(index);\n        }\n        if (result == null) {\n            Plot parent = getParent();\n            if (parent instanceof XYPlot) {\n                XYPlot xy = (XYPlot) parent;\n                result = xy.getDomainAxis(index);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Sets the domain axis for the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param axis  the new axis (<code>null</code> permitted).\n     *\n     * @see #getDomainAxis()\n     * @see #setDomainAxis(int, ValueAxis)\n     */\n    public void setDomainAxis(ValueAxis axis) {\n        setDomainAxis(0, axis);\n    }\n\n    /**\n     * Sets a domain axis and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis (<code>null</code> permitted).\n     *\n     * @see #getDomainAxis(int)\n     * @see #setRangeAxis(int, ValueAxis)\n     */\n    public void setDomainAxis(int index, ValueAxis axis) {\n        setDomainAxis(index, axis, true);\n    }\n\n    /**\n     * Sets a domain axis and, if requested, sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis.\n     * @param notify  notify listeners?\n     *\n     * @see #getDomainAxis(int)\n     */\n    public void setDomainAxis(int index, ValueAxis axis, boolean notify) {\n        ValueAxis existing = getDomainAxis(index);\n        if (existing != null) {\n            existing.removeChangeListener(this);\n        }\n        if (axis != null) {\n            axis.setPlot(this);\n        }\n        this.domainAxes.set(index, axis);\n        if (axis != null) {\n            axis.configure();\n            axis.addChangeListener(this);\n        }\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n\n    /**\n     * Sets the domain axes for this plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param axes  the axes (<code>null</code> not permitted).\n     *\n     * @see #setRangeAxes(ValueAxis[])\n     */\n    public void setDomainAxes(ValueAxis[] axes) {\n        for (int i = 0; i < axes.length; i++) {\n            setDomainAxis(i, axes[i], false);\n        }\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns the location of the primary domain axis.\n     *\n     * @return The location (never <code>null</code>).\n     *\n     * @see #setDomainAxisLocation(AxisLocation)\n     */\n    public AxisLocation getDomainAxisLocation() {\n        return (AxisLocation) this.domainAxisLocations.get(0);\n    }\n\n    /**\n     * Sets the location of the primary domain axis and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param location  the location (<code>null</code> not permitted).\n     *\n     * @see #getDomainAxisLocation()\n     */\n    public void setDomainAxisLocation(AxisLocation location) {\n        // delegate...\n        setDomainAxisLocation(0, location, true);\n    }\n\n    /**\n     * Sets the location of the domain axis and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param location  the location (<code>null</code> not permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getDomainAxisLocation()\n     */\n    public void setDomainAxisLocation(AxisLocation location, boolean notify) {\n        // delegate...\n        setDomainAxisLocation(0, location, notify);\n    }\n\n    /**\n     * Returns the edge for the primary domain axis (taking into account the\n     * plot\'s orientation).\n     *\n     * @return The edge.\n     *\n     * @see #getDomainAxisLocation()\n     * @see #getOrientation()\n     */\n    public RectangleEdge getDomainAxisEdge() {\n        return Plot.resolveDomainAxisLocation(getDomainAxisLocation(),\n                this.orientation);\n    }\n\n    /**\n     * Returns the number of domain axes.\n     *\n     * @return The axis count.\n     *\n     * @see #getRangeAxisCount()\n     */\n    public int getDomainAxisCount() {\n        return this.domainAxes.size();\n    }\n\n    /**\n     * Clears the domain axes from the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @see #clearRangeAxes()\n     */\n    public void clearDomainAxes() {\n        for (int i = 0; i < this.domainAxes.size(); i++) {\n            ValueAxis axis = (ValueAxis) this.domainAxes.get(i);\n            if (axis != null) {\n                axis.removeChangeListener(this);\n            }\n        }\n        this.domainAxes.clear();\n        fireChangeEvent();\n    }\n\n    /**\n     * Configures the domain axes.\n     */\n    public void configureDomainAxes() {\n        for (int i = 0; i < this.domainAxes.size(); i++) {\n            ValueAxis axis = (ValueAxis) this.domainAxes.get(i);\n            if (axis != null) {\n                axis.configure();\n            }\n        }\n    }\n\n    /**\n     * Returns the location for a domain axis.  If this hasn\'t been set\n     * explicitly, the method returns the location that is opposite to the\n     * primary domain axis location.\n     *\n     * @param index  the axis index.\n     *\n     * @return The location (never <code>null</code>).\n     *\n     * @see #setDomainAxisLocation(int, AxisLocation)\n     */\n    public AxisLocation getDomainAxisLocation(int index) {\n        AxisLocation result = null;\n        if (index < this.domainAxisLocations.size()) {\n            result = (AxisLocation) this.domainAxisLocations.get(index);\n        }\n        if (result == null) {\n            result = AxisLocation.getOpposite(getDomainAxisLocation());\n        }\n        return result;\n    }\n\n    /**\n     * Sets the location for a domain axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param location  the location (<code>null</code> not permitted for index\n     *     0).\n     *\n     * @see #getDomainAxisLocation(int)\n     */\n    public void setDomainAxisLocation(int index, AxisLocation location) {\n        // delegate...\n        setDomainAxisLocation(index, location, true);\n    }\n\n    /**\n     * Sets the axis location for a domain axis and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param location  the location (<code>null</code> not permitted for\n     *     index 0).\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.5\n     *\n     * @see #getDomainAxisLocation(int)\n     * @see #setRangeAxisLocation(int, AxisLocation, boolean)\n     */\n    public void setDomainAxisLocation(int index, AxisLocation location,\n            boolean notify) {\n\n        if (index == 0 && location == null) {\n            throw new IllegalArgumentException(\n                    "Null \'location\' for index 0 not permitted.");\n        }\n        this.domainAxisLocations.set(index, location);\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n\n    /**\n     * Returns the edge for a domain axis.\n     *\n     * @param index  the axis index.\n     *\n     * @return The edge.\n     *\n     * @see #getRangeAxisEdge(int)\n     */\n    public RectangleEdge getDomainAxisEdge(int index) {\n        AxisLocation location = getDomainAxisLocation(index);\n        RectangleEdge result = Plot.resolveDomainAxisLocation(location,\n                this.orientation);\n        if (result == null) {\n            result = RectangleEdge.opposite(getDomainAxisEdge());\n        }\n        return result;\n    }\n\n    /**\n     * Returns the range axis for the plot.  If the range axis for this plot is\n     * <code>null</code>, then the method will return the parent plot\'s range\n     * axis (if there is a parent plot).\n     *\n     * @return The range axis.\n     *\n     * @see #getRangeAxis(int)\n     * @see #setRangeAxis(ValueAxis)\n     */\n    public ValueAxis getRangeAxis() {\n        return getRangeAxis(0);\n    }\n\n    /**\n     * Sets the range axis for the plot and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param axis  the axis (<code>null</code> permitted).\n     *\n     * @see #getRangeAxis()\n     * @see #setRangeAxis(int, ValueAxis)\n     */\n    public void setRangeAxis(ValueAxis axis)  {\n\n        if (axis != null) {\n            axis.setPlot(this);\n        }\n\n        // plot is likely registered as a listener with the existing axis...\n        ValueAxis existing = getRangeAxis();\n        if (existing != null) {\n            existing.removeChangeListener(this);\n        }\n\n        this.rangeAxes.set(0, axis);\n        if (axis != null) {\n            axis.configure();\n            axis.addChangeListener(this);\n        }\n        fireChangeEvent();\n\n    }\n\n    /**\n     * Returns the location of the primary range axis.\n     *\n     * @return The location (never <code>null</code>).\n     *\n     * @see #setRangeAxisLocation(AxisLocation)\n     */\n    public AxisLocation getRangeAxisLocation() {\n        return (AxisLocation) this.rangeAxisLocations.get(0);\n    }\n\n    /**\n     * Sets the location of the primary range axis and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param location  the location (<code>null</code> not permitted).\n     *\n     * @see #getRangeAxisLocation()\n     */\n    public void setRangeAxisLocation(AxisLocation location) {\n        // delegate...\n        setRangeAxisLocation(0, location, true);\n    }\n\n    /**\n     * Sets the location of the primary range axis and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param location  the location (<code>null</code> not permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getRangeAxisLocation()\n     */\n    public void setRangeAxisLocation(AxisLocation location, boolean notify) {\n        // delegate...\n        setRangeAxisLocation(0, location, notify);\n    }\n\n    /**\n     * Returns the edge for the primary range axis.\n     *\n     * @return The range axis edge.\n     *\n     * @see #getRangeAxisLocation()\n     * @see #getOrientation()\n     */\n    public RectangleEdge getRangeAxisEdge() {\n        return Plot.resolveRangeAxisLocation(getRangeAxisLocation(),\n                this.orientation);\n    }\n\n    /**\n     * Returns a range axis.\n     *\n     * @param index  the axis index.\n     *\n     * @return The axis (<code>null</code> possible).\n     *\n     * @see #setRangeAxis(int, ValueAxis)\n     */\n    public ValueAxis getRangeAxis(int index) {\n        ValueAxis result = null;\n        if (index < this.rangeAxes.size()) {\n            result = (ValueAxis) this.rangeAxes.get(index);\n        }\n        if (result == null) {\n            Plot parent = getParent();\n            if (parent instanceof XYPlot) {\n                XYPlot xy = (XYPlot) parent;\n                result = xy.getRangeAxis(index);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Sets a range axis and sends a {@link PlotChangeEvent} to all registered\n     * listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis (<code>null</code> permitted).\n     *\n     * @see #getRangeAxis(int)\n     */\n    public void setRangeAxis(int index, ValueAxis axis) {\n        setRangeAxis(index, axis, true);\n    }\n\n    /**\n     * Sets a range axis and, if requested, sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getRangeAxis(int)\n     */\n    public void setRangeAxis(int index, ValueAxis axis, boolean notify) {\n        ValueAxis existing = getRangeAxis(index);\n        if (existing != null) {\n            existing.removeChangeListener(this);\n        }\n        if (axis != null) {\n            axis.setPlot(this);\n        }\n        this.rangeAxes.set(index, axis);\n        if (axis != null) {\n            axis.configure();\n            axis.addChangeListener(this);\n        }\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n\n    /**\n     * Sets the range axes for this plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param axes  the axes (<code>null</code> not permitted).\n     *\n     * @see #setDomainAxes(ValueAxis[])\n     */\n    public void setRangeAxes(ValueAxis[] axes) {\n        for (int i = 0; i < axes.length; i++) {\n            setRangeAxis(i, axes[i], false);\n        }\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns the number of range axes.\n     *\n     * @return The axis count.\n     *\n     * @see #getDomainAxisCount()\n     */\n    public int getRangeAxisCount() {\n        return this.rangeAxes.size();\n    }\n\n    /**\n     * Clears the range axes from the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @see #clearDomainAxes()\n     */\n    public void clearRangeAxes() {\n        for (int i = 0; i < this.rangeAxes.size(); i++) {\n            ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);\n            if (axis != null) {\n                axis.removeChangeListener(this);\n            }\n        }\n        this.rangeAxes.clear();\n        fireChangeEvent();\n    }\n\n    /**\n     * Configures the range axes.\n     *\n     * @see #configureDomainAxes()\n     */\n    public void configureRangeAxes() {\n        for (int i = 0; i < this.rangeAxes.size(); i++) {\n            ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);\n            if (axis != null) {\n                axis.configure();\n            }\n        }\n    }\n\n    /**\n     * Returns the location for a range axis.  If this hasn\'t been set\n     * explicitly, the method returns the location that is opposite to the\n     * primary range axis location.\n     *\n     * @param index  the axis index.\n     *\n     * @return The location (never <code>null</code>).\n     *\n     * @see #setRangeAxisLocation(int, AxisLocation)\n     */\n    public AxisLocation getRangeAxisLocation(int index) {\n        AxisLocation result = null;\n        if (index < this.rangeAxisLocations.size()) {\n            result = (AxisLocation) this.rangeAxisLocations.get(index);\n        }\n        if (result == null) {\n            result = AxisLocation.getOpposite(getRangeAxisLocation());\n        }\n        return result;\n    }\n\n    /**\n     * Sets the location for a range axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param location  the location (<code>null</code> permitted).\n     *\n     * @see #getRangeAxisLocation(int)\n     */\n    public void setRangeAxisLocation(int index, AxisLocation location) {\n        // delegate...\n        setRangeAxisLocation(index, location, true);\n    }\n\n    /**\n     * Sets the axis location for a domain axis and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param location  the location (<code>null</code> not permitted for\n     *     index 0).\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.5\n     *\n     * @see #getRangeAxisLocation(int)\n     * @see #setDomainAxisLocation(int, AxisLocation, boolean)\n     */\n    public void setRangeAxisLocation(int index, AxisLocation location,\n            boolean notify) {\n\n        if (index == 0 && location == null) {\n            throw new IllegalArgumentException(\n                    "Null \'location\' for index 0 not permitted.");\n        }\n        this.rangeAxisLocations.set(index, location);\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n\n    /**\n     * Returns the edge for a range axis.\n     *\n     * @param index  the axis index.\n     *\n     * @return The edge.\n     *\n     * @see #getRangeAxisLocation(int)\n     * @see #getOrientation()\n     */\n    public RectangleEdge getRangeAxisEdge(int index) {\n        AxisLocation location = getRangeAxisLocation(index);\n        RectangleEdge result = Plot.resolveRangeAxisLocation(location,\n                this.orientation);\n        if (result == null) {\n            result = RectangleEdge.opposite(getRangeAxisEdge());\n        }\n        return result;\n    }\n\n    /**\n     * Returns the primary dataset for the plot.\n     *\n     * @return The primary dataset (possibly <code>null</code>).\n     *\n     * @see #getDataset(int)\n     * @see #setDataset(XYDataset)\n     */\n    public XYDataset getDataset() {\n        return getDataset(0);\n    }\n\n    /**\n     * Returns a dataset.\n     *\n     * @param index  the dataset index.\n     *\n     * @return The dataset (possibly <code>null</code>).\n     *\n     * @see #setDataset(int, XYDataset)\n     */\n    public XYDataset getDataset(int index) {\n        XYDataset result = null;\n        if (this.datasets.size() > index) {\n            result = (XYDataset) this.datasets.get(index);\n        }\n        return result;\n    }\n\n    /**\n     * Sets the primary dataset for the plot, replacing the existing dataset if\n     * there is one.\n     *\n     * @param dataset  the dataset (<code>null</code> permitted).\n     *\n     * @see #getDataset()\n     * @see #setDataset(int, XYDataset)\n     */\n    public void setDataset(XYDataset dataset) {\n        setDataset(0, dataset);\n    }\n\n    /**\n     * Sets a dataset for the plot.\n     *\n     * @param index  the dataset index.\n     * @param dataset  the dataset (<code>null</code> permitted).\n     *\n     * @see #getDataset(int)\n     */\n    public void setDataset(int index, XYDataset dataset) {\n        XYDataset existing = getDataset(index);\n        if (existing != null) {\n            existing.removeChangeListener(this);\n        }\n        this.datasets.set(index, dataset);\n        if (dataset != null) {\n            dataset.addChangeListener(this);\n        }\n\n        // send a dataset change event to self...\n        DatasetChangeEvent event = new DatasetChangeEvent(this, dataset);\n        datasetChanged(event);\n    }\n\n    /**\n     * Returns the number of datasets.\n     *\n     * @return The number of datasets.\n     */\n    public int getDatasetCount() {\n        return this.datasets.size();\n    }\n\n    /**\n     * Returns the index of the specified dataset, or <code>-1</code> if the\n     * dataset does not belong to the plot.\n     *\n     * @param dataset  the dataset (<code>null</code> not permitted).\n     *\n     * @return The index.\n     */\n    public int indexOf(XYDataset dataset) {\n        int result = -1;\n        for (int i = 0; i < this.datasets.size(); i++) {\n            if (dataset == this.datasets.get(i)) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Maps a dataset to a particular domain axis.  All data will be plotted\n     * against axis zero by default, no mapping is required for this case.\n     *\n     * @param index  the dataset index (zero-based).\n     * @param axisIndex  the axis index.\n     *\n     * @see #mapDatasetToRangeAxis(int, int)\n     */\n    public void mapDatasetToDomainAxis(int index, int axisIndex) {\n        List axisIndices = new java.util.ArrayList(1);\n        axisIndices.add(new Integer(axisIndex));\n        mapDatasetToDomainAxes(index, axisIndices);\n    }\n\n    /**\n     * Maps the specified dataset to the axes in the list.  Note that the\n     * conversion of data values into Java2D space is always performed using\n     * the first axis in the list.\n     *\n     * @param index  the dataset index (zero-based).\n     * @param axisIndices  the axis indices (<code>null</code> permitted).\n     *\n     * @since 1.0.12\n     */\n    public void mapDatasetToDomainAxes(int index, List axisIndices) {\n        if (index < 0) {\n            throw new IllegalArgumentException("Requires \'index\' >= 0.");\n        }\n        checkAxisIndices(axisIndices);\n        Integer key = new Integer(index);\n        this.datasetToDomainAxesMap.put(key, new ArrayList(axisIndices));\n        // fake a dataset change event to update axes...\n        datasetChanged(new DatasetChangeEvent(this, getDataset(index)));\n    }\n\n    /**\n     * Maps a dataset to a particular range axis.  All data will be plotted\n     * against axis zero by default, no mapping is required for this case.\n     *\n     * @param index  the dataset index (zero-based).\n     * @param axisIndex  the axis index.\n     *\n     * @see #mapDatasetToDomainAxis(int, int)\n     */\n    public void mapDatasetToRangeAxis(int index, int axisIndex) {\n        List axisIndices = new java.util.ArrayList(1);\n        axisIndices.add(new Integer(axisIndex));\n        mapDatasetToRangeAxes(index, axisIndices);\n    }\n\n    /**\n     * Maps the specified dataset to the axes in the list.  Note that the\n     * conversion of data values into Java2D space is always performed using\n     * the first axis in the list.\n     *\n     * @param index  the dataset index (zero-based).\n     * @param axisIndices  the axis indices (<code>null</code> permitted).\n     *\n     * @since 1.0.12\n     */\n    public void mapDatasetToRangeAxes(int index, List axisIndices) {\n        if (index < 0) {\n            throw new IllegalArgumentException("Requires \'index\' >= 0.");\n        }\n        checkAxisIndices(axisIndices);\n        Integer key = new Integer(index);\n        this.datasetToRangeAxesMap.put(key, new ArrayList(axisIndices));\n        // fake a dataset change event to update axes...\n        datasetChanged(new DatasetChangeEvent(this, getDataset(index)));\n    }\n\n    /**\n     * This method is used to perform argument checking on the list of\n     * axis indices passed to mapDatasetToDomainAxes() and\n     * mapDatasetToRangeAxes().\n     *\n     * @param indices  the list of indices (<code>null</code> permitted).\n     */\n    private void checkAxisIndices(List indices) {\n        // axisIndices can be:\n        // 1.  null;\n        // 2.  non-empty, containing only Integer objects that are unique.\n        if (indices == null) {\n            return;  // OK\n        }\n        int count = indices.size();\n        if (count == 0) {\n            throw new IllegalArgumentException("Empty list not permitted.");\n        }\n        HashSet set = new HashSet();\n        for (int i = 0; i < count; i++) {\n            Object item = indices.get(i);\n            if (!(item instanceof Integer)) {\n                throw new IllegalArgumentException(\n                        "Indices must be Integer instances.");\n            }\n            if (set.contains(item)) {\n                throw new IllegalArgumentException("Indices must be unique.");\n            }\n            set.add(item);\n        }\n    }\n\n    /**\n     * Returns the number of renderer slots for this plot.\n     *\n     * @return The number of renderer slots.\n     *\n     * @since 1.0.11\n     */\n    public int getRendererCount() {\n        return this.renderers.size();\n    }\n\n    /**\n     * Returns the renderer for the primary dataset.\n     *\n     * @return The item renderer (possibly <code>null</code>).\n     *\n     * @see #setRenderer(XYItemRenderer)\n     */\n    public XYItemRenderer getRenderer() {\n        return getRenderer(0);\n    }\n\n    /**\n     * Returns the renderer for a dataset, or <code>null</code>.\n     *\n     * @param index  the renderer index.\n     *\n     * @return The renderer (possibly <code>null</code>).\n     *\n     * @see #setRenderer(int, XYItemRenderer)\n     */\n    public XYItemRenderer getRenderer(int index) {\n        XYItemRenderer result = null;\n        if (this.renderers.size() > index) {\n            result = (XYItemRenderer) this.renderers.get(index);\n        }\n        return result;\n\n    }\n\n    /**\n     * Sets the renderer for the primary dataset and sends a\n     * {@link PlotChangeEvent} to all registered listeners.  If the renderer\n     * is set to <code>null</code>, no data will be displayed.\n     *\n     * @param renderer  the renderer (<code>null</code> permitted).\n     *\n     * @see #getRenderer()\n     */\n    public void setRenderer(XYItemRenderer renderer) {\n        setRenderer(0, renderer);\n    }\n\n    /**\n     * Sets a renderer and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param index  the index.\n     * @param renderer  the renderer.\n     *\n     * @see #getRenderer(int)\n     */\n    public void setRenderer(int index, XYItemRenderer renderer) {\n        setRenderer(index, renderer, true);\n    }\n\n    /**\n     * Sets a renderer and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param index  the index.\n     * @param renderer  the renderer.\n     * @param notify  notify listeners?\n     *\n     * @see #getRenderer(int)\n     */\n    public void setRenderer(int index, XYItemRenderer renderer,\n                            boolean notify) {\n        XYItemRenderer existing = getRenderer(index);\n        if (existing != null) {\n            existing.removeChangeListener(this);\n        }\n        this.renderers.set(index, renderer);\n        if (renderer != null) {\n            renderer.setPlot(this);\n            renderer.addChangeListener(this);\n        }\n        configureDomainAxes();\n        configureRangeAxes();\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n\n    /**\n     * Sets the renderers for this plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param renderers  the renderers (<code>null</code> not permitted).\n     */\n    public void setRenderers(XYItemRenderer[] renderers) {\n        for (int i = 0; i < renderers.length; i++) {\n            setRenderer(i, renderers[i], false);\n        }\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns the dataset rendering order.\n     *\n     * @return The order (never <code>null</code>).\n     *\n     * @see #setDatasetRenderingOrder(DatasetRenderingOrder)\n     */\n    public DatasetRenderingOrder getDatasetRenderingOrder() {\n        return this.datasetRenderingOrder;\n    }\n\n    /**\n     * Sets the rendering order and sends a {@link PlotChangeEvent} to all\n     * registered listeners.  By default, the plot renders the primary dataset\n     * last (so that the primary dataset overlays the secondary datasets).\n     * You can reverse this if you want to.\n     *\n     * @param order  the rendering order (<code>null</code> not permitted).\n     *\n     * @see #getDatasetRenderingOrder()\n     */\n    public void setDatasetRenderingOrder(DatasetRenderingOrder order) {\n        if (order == null) {\n            throw new IllegalArgumentException("Null \'order\' argument.");\n        }\n        this.datasetRenderingOrder = order;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns the series rendering order.\n     *\n     * @return the order (never <code>null</code>).\n     *\n     * @see #setSeriesRenderingOrder(SeriesRenderingOrder)\n     */\n    public SeriesRenderingOrder getSeriesRenderingOrder() {\n        return this.seriesRenderingOrder;\n    }\n\n    /**\n     * Sets the series order and sends a {@link PlotChangeEvent} to all\n     * registered listeners.  By default, the plot renders the primary series\n     * last (so that the primary series appears to be on top).\n     * You can reverse this if you want to.\n     *\n     * @param order  the rendering order (<code>null</code> not permitted).\n     *\n     * @see #getSeriesRenderingOrder()\n     */\n    public void setSeriesRenderingOrder(SeriesRenderingOrder order) {\n        if (order == null) {\n            throw new IllegalArgumentException("Null \'order\' argument.");\n        }\n        this.seriesRenderingOrder = order;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns the index of the specified renderer, or <code>-1</code> if the\n     * renderer is not assigned to this plot.\n     *\n     * @param renderer  the renderer (<code>null</code> permitted).\n     *\n     * @return The renderer index.\n     */\n    public int getIndexOf(XYItemRenderer renderer) {\n        return this.renderers.indexOf(renderer);\n    }\n\n    /**\n     * Returns the renderer for the specified dataset.  The code first\n     * determines the index of the dataset, then checks if there is a\n     * renderer with the same index (if not, the method returns renderer(0).\n     *\n     * @param dataset  the dataset (<code>null</code> permitted).\n     *\n     * @return The renderer (possibly <code>null</code>).\n     */\n    public XYItemRenderer getRendererForDataset(XYDataset dataset) {\n        XYItemRenderer result = null;\n        for (int i = 0; i < this.datasets.size(); i++) {\n            if (this.datasets.get(i) == dataset) {\n                result = (XYItemRenderer) this.renderers.get(i);\n                if (result == null) {\n                    result = getRenderer();\n                }\n                break;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Returns the weight for this plot when it is used as a subplot within a\n     * combined plot.\n     *\n     * @return The weight.\n     *\n     * @see #setWeight(int)\n     */\n    public int getWeight() {\n        return this.weight;\n    }\n\n    /**\n     * Sets the weight for the plot and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param weight  the weight.\n     *\n     * @see #getWeight()\n     */\n    public void setWeight(int weight) {\n        this.weight = weight;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns <code>true</code> if the domain gridlines are visible, and\n     * <code>false<code> otherwise.\n     *\n     * @return <code>true</code> or <code>false</code>.\n     *\n     * @see #setDomainGridlinesVisible(boolean)\n     */\n    public boolean isDomainGridlinesVisible() {\n        return this.domainGridlinesVisible;\n    }\n\n    /**\n     * Sets the flag that controls whether or not the domain grid-lines are\n     * visible.\n     * <p>\n     * If the flag value is changed, a {@link PlotChangeEvent} is sent to all\n     * registered listeners.\n     *\n     * @param visible  the new value of the flag.\n     *\n     * @see #isDomainGridlinesVisible()\n     */\n    public void setDomainGridlinesVisible(boolean visible) {\n        if (this.domainGridlinesVisible != visible) {\n            this.domainGridlinesVisible = visible;\n            fireChangeEvent();\n        }\n    }\n\n    /**\n     * Returns <code>true</code> if the domain minor gridlines are visible, and\n     * <code>false<code> otherwise.\n     *\n     * @return <code>true</code> or <code>false</code>.\n     *\n     * @see #setDomainMinorGridlinesVisible(boolean)\n     *\n     * @since 1.0.12\n     */\n    public boolean isDomainMinorGridlinesVisible() {\n        return this.domainMinorGridlinesVisible;\n    }\n\n    /**\n     * Sets the flag that controls whether or not the domain minor grid-lines\n     * are visible.\n     * <p>\n     * If the flag value is changed, a {@link PlotChangeEvent} is sent to all\n     * registered listeners.\n     *\n     * @param visible  the new value of the flag.\n     *\n     * @see #isDomainMinorGridlinesVisible()\n     *\n     * @since 1.0.12\n     */\n    public void setDomainMinorGridlinesVisible(boolean visible) {\n        if (this.domainMinorGridlinesVisible != visible) {\n            this.domainMinorGridlinesVisible = visible;\n            fireChangeEvent();\n        }\n    }\n\n    /**\n     * Returns the stroke for the grid-lines (if any) plotted against the\n     * domain axis.\n     *\n     * @return The stroke (never <code>null</code>).\n     *\n     * @see #setDomainGridlineStroke(Stroke)\n     */\n    public Stroke getDomainGridlineStroke() {\n        return this.domainGridlineStroke;\n    }\n\n    /**\n     * Sets the stroke for the grid lines plotted against the domain axis, and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke (<code>null</code> not permitted).\n     *\n     * @throws IllegalArgumentException if <code>stroke</code> is\n     *     <code>null</code>.\n     *\n     * @see #getDomainGridlineStroke()\n     */\n    public void setDomainGridlineStroke(Stroke stroke) {\n        if (stroke == null) {\n            throw new IllegalArgumentException("Null \'stroke\' argument.");\n        }\n        this.domainGridlineStroke = stroke;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns the stroke for the minor grid-lines (if any) plotted against the\n     * domain axis.\n     *\n     * @return The stroke (never <code>null</code>).\n     *\n     * @see #setDomainMinorGridlineStroke(Stroke)\n     *\n     * @since 1.0.12\n     */\n\n    public Stroke getDomainMinorGridlineStroke() {\n        return this.domainMinorGridlineStroke;\n    }\n\n    /**\n     * Sets the stroke for the minor grid lines plotted against the domain\n     * axis, and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke (<code>null</code> not permitted).\n     *\n     * @throws IllegalArgumentException if <code>stroke</code> is\n     *     <code>null</code>.\n     *\n     * @see #getDomainMinorGridlineStroke()\n     *\n     * @since 1.0.12\n     */\n    public void setDomainMinorGridlineStroke(Stroke stroke) {\n        if (stroke == null) {\n            throw new IllegalArgumentException("Null \'stroke\' argument.");\n        }\n        this.domainMinorGridlineStroke = stroke;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns the paint for the grid lines (if any) plotted against the domain\n     * axis.\n     *\n     * @return The paint (never <code>null</code>).\n     *\n     * @see #setDomainGridlinePaint(Paint)\n     */\n    public Paint getDomainGridlinePaint() {\n        return this.domainGridlinePaint;\n    }\n\n    /**\n     * Sets the paint for the grid lines plotted against the domain axis, and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint (<code>null</code> not permitted).\n     *\n     * @throws IllegalArgumentException if <code>paint</code> is\n     *     <code>null</code>.\n     *\n     * @see #getDomainGridlinePaint()\n     */\n    public void setDomainGridlinePaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException("Null \'paint\' argument.");\n        }\n        this.domainGridlinePaint = paint;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns the paint for the minor grid lines (if any) plotted against the\n     * domain axis.\n     *\n     * @return The paint (never <code>null</code>).\n     *\n     * @see #setDomainMinorGridlinePaint(Paint)\n     *\n     * @since 1.0.12\n     */\n    public Paint getDomainMinorGridlinePaint() {\n        return this.domainMinorGridlinePaint;\n    }\n\n    /**\n     * Sets the paint for the minor grid lines plotted against the domain axis,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint (<code>null</code> not permitted).\n     *\n     * @throws IllegalArgumentException if <code>paint</code> is\n     *     <code>null</code>.\n     *\n     * @see #getDomainMinorGridlinePaint()\n     *\n     * @since 1.0.12\n     */\n    public void setDomainMinorGridlinePaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException("Null \'paint\' argument.");\n        }\n        this.domainMinorGridlinePaint = paint;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns <code>true</code> if the range axis grid is visible, and\n     * <code>false<code> otherwise.\n     *\n     * @return A boolean.\n     *\n     * @see #setRangeGridlinesVisible(boolean)\n     */\n    public boolean isRangeGridlinesVisible() {\n        return this.rangeGridlinesVisible;\n    }\n\n    /**\n     * Sets the flag that controls whether or not the range axis grid lines\n     * are visible.\n     * <p>\n     * If the flag value is changed, a {@link PlotChangeEvent} is sent to all\n     * registered listeners.\n     *\n     * @param visible  the new value of the flag.\n     *\n     * @see #isRangeGridlinesVisible()\n     */\n    public void setRangeGridlinesVisible(boolean visible) {\n        if (this.rangeGridlinesVisible != visible) {\n            this.rangeGridlinesVisible = visible;\n            fireChangeEvent();\n        }\n    }\n\n    /**\n     * Returns the stroke for the grid lines (if any) plotted against the\n     * range axis.\n     *\n     * @return The stroke (never <code>null</code>).\n     *\n     * @see #setRangeGridlineStroke(Stroke)\n     */\n    public Stroke getRangeGridlineStroke() {\n        return this.rangeGridlineStroke;\n    }\n\n    /**\n     * Sets the stroke for the grid lines plotted against the range axis,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke (<code>null</code> not permitted).\n     *\n     * @see #getRangeGridlineStroke()\n     */\n    public void setRangeGridlineStroke(Stroke stroke) {\n        if (stroke == null) {\n            throw new IllegalArgumentException("Null \'stroke\' argument.");\n        }\n        this.rangeGridlineStroke = stroke;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns the paint for the grid lines (if any) plotted against the range\n     * axis.\n     *\n     * @return The paint (never <code>null</code>).\n     *\n     * @see #setRangeGridlinePaint(Paint)\n     */\n    public Paint getRangeGridlinePaint() {\n        return this.rangeGridlinePaint;\n    }\n\n    /**\n     * Sets the paint for the grid lines plotted against the range axis and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint (<code>null</code> not permitted).\n     *\n     * @see #getRangeGridlinePaint()\n     */\n    public void setRangeGridlinePaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException("Null \'paint\' argument.");\n        }\n        this.rangeGridlinePaint = paint;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns <code>true</code> if the range axis minor grid is visible, and\n     * <code>false<code> otherwise.\n     *\n     * @return A boolean.\n     *\n     * @see #setRangeMinorGridlinesVisible(boolean)\n     *\n     * @since 1.0.12\n     */\n    public boolean isRangeMinorGridlinesVisible() {\n        return this.rangeMinorGridlinesVisible;\n    }\n\n    /**\n     * Sets the flag that controls whether or not the range axis minor grid\n     * lines are visible.\n     * <p>\n     * If the flag value is changed, a {@link PlotChangeEvent} is sent to all\n     * registered listeners.\n     *\n     * @param visible  the new value of the flag.\n     *\n     * @see #isRangeMinorGridlinesVisible()\n     *\n     * @since 1.0.12\n     */\n    public void setRangeMinorGridlinesVisible(boolean visible) {\n        if (this.rangeMinorGridlinesVisible != visible) {\n            this.rangeMinorGridlinesVisible = visible;\n            fireChangeEvent();\n        }\n    }\n\n    /**\n     * Returns the stroke for the minor grid lines (if any) plotted against the\n     * range axis.\n     *\n     * @return The stroke (never <code>null</code>).\n     *\n     * @see #setRangeMinorGridlineStroke(Stroke)\n     *\n     * @since 1.0.12\n     */\n    public Stroke getRangeMinorGridlineStroke() {\n        return this.rangeMinorGridlineStroke;\n    }\n\n    /**\n     * Sets the stroke for the minor grid lines plotted against the range axis,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke (<code>null</code> not permitted).\n     *\n     * @see #getRangeMinorGridlineStroke()\n     *\n     * @since 1.0.12\n     */\n    public void setRangeMinorGridlineStroke(Stroke stroke) {\n        if (stroke == null) {\n            throw new IllegalArgumentException("Null \'stroke\' argument.");\n        }\n        this.rangeMinorGridlineStroke = stroke;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns the paint for the minor grid lines (if any) plotted against the\n     * range axis.\n     *\n     * @return The paint (never <code>null</code>).\n     *\n     * @see #setRangeMinorGridlinePaint(Paint)\n     *\n     * @since 1.0.12\n     */\n    public Paint getRangeMinorGridlinePaint() {\n        return this.rangeMinorGridlinePaint;\n    }\n\n    /**\n     * Sets the paint for the minor grid lines plotted against the range axis\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint (<code>null</code> not permitted).\n     *\n     * @see #getRangeMinorGridlinePaint()\n     *\n     * @since 1.0.12\n     */\n    public void setRangeMinorGridlinePaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException("Null \'paint\' argument.");\n        }\n        this.rangeMinorGridlinePaint = paint;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns a flag that controls whether or not a zero baseline is\n     * displayed for the domain axis.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.5\n     *\n     * @see #setDomainZeroBaselineVisible(boolean)\n     */\n    public boolean isDomainZeroBaselineVisible() {\n        return this.domainZeroBaselineVisible;\n    }\n\n    /**\n     * Sets the flag that controls whether or not the zero baseline is\n     * displayed for the domain axis, and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @since 1.0.5\n     *\n     * @see #isDomainZeroBaselineVisible()\n     */\n    public void setDomainZeroBaselineVisible(boolean visible) {\n        this.domainZeroBaselineVisible = visible;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns the stroke used for the zero baseline against the domain axis.\n     *\n     * @return The stroke (never <code>null</code>).\n     *\n     * @since 1.0.5\n     *\n     * @see #setDomainZeroBaselineStroke(Stroke)\n     */\n    public Stroke getDomainZeroBaselineStroke() {\n        return this.domainZeroBaselineStroke;\n    }\n\n    /**\n     * Sets the stroke for the zero baseline for the domain axis,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke (<code>null</code> not permitted).\n     *\n     * @since 1.0.5\n     *\n     * @see #getRangeZeroBaselineStroke()\n     */\n    public void setDomainZeroBaselineStroke(Stroke stroke) {\n        if (stroke == null) {\n            throw new IllegalArgumentException("Null \'stroke\' argument.");\n        }\n        this.domainZeroBaselineStroke = stroke;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns the paint for the zero baseline (if any) plotted against the\n     * domain axis.\n     *\n     * @since 1.0.5\n     *\n     * @return The paint (never <code>null</code>).\n     *\n     * @see #setDomainZeroBaselinePaint(Paint)\n     */\n    public Paint getDomainZeroBaselinePaint() {\n        return this.domainZeroBaselinePaint;\n    }\n\n    /**\n     * Sets the paint for the zero baseline plotted against the domain axis and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint (<code>null</code> not permitted).\n     *\n     * @since 1.0.5\n     *\n     * @see #getDomainZeroBaselinePaint()\n     */\n    public void setDomainZeroBaselinePaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException("Null \'paint\' argument.");\n        }\n        this.domainZeroBaselinePaint = paint;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns a flag that controls whether or not a zero baseline is\n     * displayed for the range axis.\n     *\n     * @return A boolean.\n     *\n     * @see #setRangeZeroBaselineVisible(boolean)\n     */\n    public boolean isRangeZeroBaselineVisible() {\n        return this.rangeZeroBaselineVisible;\n    }\n\n    /**\n     * Sets the flag that controls whether or not the zero baseline is\n     * displayed for the range axis, and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @see #isRangeZeroBaselineVisible()\n     */\n    public void setRangeZeroBaselineVisible(boolean visible) {\n        this.rangeZeroBaselineVisible = visible;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns the stroke used for the zero baseline against the range axis.\n     *\n     * @return The stroke (never <code>null</code>).\n     *\n     * @see #setRangeZeroBaselineStroke(Stroke)\n     */\n    public Stroke getRangeZeroBaselineStroke() {\n        return this.rangeZeroBaselineStroke;\n    }\n\n    /**\n     * Sets the stroke for the zero baseline for the range axis,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke (<code>null</code> not permitted).\n     *\n     * @see #getRangeZeroBaselineStroke()\n     */\n    public void setRangeZeroBaselineStroke(Stroke stroke) {\n        if (stroke == null) {\n            throw new IllegalArgumentException("Null \'stroke\' argument.");\n        }\n        this.rangeZeroBaselineStroke = stroke;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns the paint for the zero baseline (if any) plotted against the\n     * range axis.\n     *\n     * @return The paint (never <code>null</code>).\n     *\n     * @see #setRangeZeroBaselinePaint(Paint)\n     */\n    public Paint getRangeZeroBaselinePaint() {\n        return this.rangeZeroBaselinePaint;\n    }\n\n    /**\n     * Sets the paint for the zero baseline plotted against the range axis and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint (<code>null</code> not permitted).\n     *\n     * @see #getRangeZeroBaselinePaint()\n     */\n    public void setRangeZeroBaselinePaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException("Null \'paint\' argument.");\n        }\n        this.rangeZeroBaselinePaint = paint;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns the paint used for the domain tick bands.  If this is\n     * <code>null</code>, no tick bands will be drawn.\n     *\n     * @return The paint (possibly <code>null</code>).\n     *\n     * @see #setDomainTickBandPaint(Paint)\n     */\n    public Paint getDomainTickBandPaint() {\n        return this.domainTickBandPaint;\n    }\n\n    /**\n     * Sets the paint for the domain tick bands.\n     *\n     * @param paint  the paint (<code>null</code> permitted).\n     *\n     * @see #getDomainTickBandPaint()\n     */\n    public void setDomainTickBandPaint(Paint paint) {\n        this.domainTickBandPaint = paint;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns the paint used for the range tick bands.  If this is\n     * <code>null</code>, no tick bands will be drawn.\n     *\n     * @return The paint (possibly <code>null</code>).\n     *\n     * @see #setRangeTickBandPaint(Paint)\n     */\n    public Paint getRangeTickBandPaint() {\n        return this.rangeTickBandPaint;\n    }\n\n    /**\n     * Sets the paint for the range tick bands.\n     *\n     * @param paint  the paint (<code>null</code> permitted).\n     *\n     * @see #getRangeTickBandPaint()\n     */\n    public void setRangeTickBandPaint(Paint paint) {\n        this.rangeTickBandPaint = paint;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns the origin for the quadrants that can be displayed on the plot.\n     * This defaults to (0, 0).\n     *\n     * @return The origin point (never <code>null</code>).\n     *\n     * @see #setQuadrantOrigin(Point2D)\n     */\n    public Point2D getQuadrantOrigin() {\n        return this.quadrantOrigin;\n    }\n\n    /**\n     * Sets the quadrant origin and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param origin  the origin (<code>null</code> not permitted).\n     *\n     * @see #getQuadrantOrigin()\n     */\n    public void setQuadrantOrigin(Point2D origin) {\n        if (origin == null) {\n            throw new IllegalArgumentException("Null \'origin\' argument.");\n        }\n        this.quadrantOrigin = origin;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns the paint used for the specified quadrant.\n     *\n     * @param index  the quadrant index (0-3).\n     *\n     * @return The paint (possibly <code>null</code>).\n     *\n     * @see #setQuadrantPaint(int, Paint)\n     */\n    public Paint getQuadrantPaint(int index) {\n        if (index < 0 || index > 3) {\n            throw new IllegalArgumentException("The index value (" + index\n                    + ") should be in the range 0 to 3.");\n        }\n        return this.quadrantPaint[index];\n    }\n\n    /**\n     * Sets the paint used for the specified quadrant and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the quadrant index (0-3).\n     * @param paint  the paint (<code>null</code> permitted).\n     *\n     * @see #getQuadrantPaint(int)\n     */\n    public void setQuadrantPaint(int index, Paint paint) {\n        if (index < 0 || index > 3) {\n            throw new IllegalArgumentException("The index value (" + index\n                    + ") should be in the range 0 to 3.");\n        }\n        this.quadrantPaint[index] = paint;\n        fireChangeEvent();\n    }\n\n    /**\n     * Adds a marker for the domain axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the range axis, however this is entirely up to the renderer.\n     *\n     * @param marker  the marker (<code>null</code> not permitted).\n     *\n     * @see #addDomainMarker(Marker, Layer)\n     * @see #clearDomainMarkers()\n     */\n    public void addDomainMarker(Marker marker) {\n        // defer argument checking...\n        addDomainMarker(marker, Layer.FOREGROUND);\n    }\n\n    /**\n     * Adds a marker for the domain axis in the specified layer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the range axis, however this is entirely up to the renderer.\n     *\n     * @param marker  the marker (<code>null</code> not permitted).\n     * @param layer  the layer (foreground or background).\n     *\n     * @see #addDomainMarker(int, Marker, Layer)\n     */\n    public void addDomainMarker(Marker marker, Layer layer) {\n        addDomainMarker(0, marker, layer);\n    }\n\n    /**\n     * Clears all the (foreground and background) domain markers and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @see #addDomainMarker(int, Marker, Layer)\n     */\n    public void clearDomainMarkers() {\n        if (this.backgroundDomainMarkers != null) {\n            Set keys = this.backgroundDomainMarkers.keySet();\n            Iterator iterator = keys.iterator();\n            while (iterator.hasNext()) {\n                Integer key = (Integer) iterator.next();\n                clearDomainMarkers(key.intValue());\n            }\n            this.backgroundDomainMarkers.clear();\n        }\n        if (this.foregroundDomainMarkers != null) {\n            Set keys = this.foregroundDomainMarkers.keySet();\n            Iterator iterator = keys.iterator();\n            while (iterator.hasNext()) {\n                Integer key = (Integer) iterator.next();\n                clearDomainMarkers(key.intValue());\n            }\n            this.foregroundDomainMarkers.clear();\n        }\n        fireChangeEvent();\n    }\n\n    /**\n     * Clears the (foreground and background) domain markers for a particular\n     * renderer.\n     *\n     * @param index  the renderer index.\n     *\n     * @see #clearRangeMarkers(int)\n     */\n    public void clearDomainMarkers(int index) {\n        Integer key = new Integer(index);\n        if (this.backgroundDomainMarkers != null) {\n            Collection markers\n                = (Collection) this.backgroundDomainMarkers.get(key);\n            if (markers != null) {\n                Iterator iterator = markers.iterator();\n                while (iterator.hasNext()) {\n                    Marker m = (Marker) iterator.next();\n                    m.removeChangeListener(this);\n                }\n                markers.clear();\n            }\n        }\n        if (this.foregroundRangeMarkers != null) {\n            Collection markers\n                = (Collection) this.foregroundDomainMarkers.get(key);\n            if (markers != null) {\n                Iterator iterator = markers.iterator();\n                while (iterator.hasNext()) {\n                    Marker m = (Marker) iterator.next();\n                    m.removeChangeListener(this);\n                }\n                markers.clear();\n            }\n        }\n        fireChangeEvent();\n    }\n\n    /**\n     * Adds a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the domain axis (that the renderer is mapped to), however this is\n     * entirely up to the renderer.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     *\n     * @see #clearDomainMarkers(int)\n     * @see #addRangeMarker(int, Marker, Layer)\n     */\n    public void addDomainMarker(int index, Marker marker, Layer layer) {\n        addDomainMarker(index, marker, layer, true);\n    }\n\n    /**\n     * Adds a marker for a specific dataset/renderer and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the domain axis (that the renderer is mapped to), however this is\n     * entirely up to the renderer.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.10\n     */\n    public void addDomainMarker(int index, Marker marker, Layer layer,\n            boolean notify) {\n        if (marker == null) {\n            throw new IllegalArgumentException("Null \'marker\' not permitted.");\n        }\n        if (layer == null) {\n            throw new IllegalArgumentException("Null \'layer\' not permitted.");\n        }\n        Collection markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (Collection) this.foregroundDomainMarkers.get(\n                    new Integer(index));\n            if (markers == null) {\n                markers = new java.util.ArrayList();\n                this.foregroundDomainMarkers.put(new Integer(index), markers);\n            }\n            markers.add(marker);\n        }\n        else if (layer == Layer.BACKGROUND) {\n            markers = (Collection) this.backgroundDomainMarkers.get(\n                    new Integer(index));\n            if (markers == null) {\n                markers = new java.util.ArrayList();\n                this.backgroundDomainMarkers.put(new Integer(index), markers);\n            }\n            markers.add(marker);\n        }\n        marker.addChangeListener(this);\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n\n    /**\n     * Removes a marker for the domain axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param marker  the marker.\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     */\n    public boolean removeDomainMarker(Marker marker) {\n        return removeDomainMarker(marker, Layer.FOREGROUND);\n    }\n\n    /**\n     * Removes a marker for the domain axis in the specified layer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param marker the marker (<code>null</code> not permitted).\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     */\n    public boolean removeDomainMarker(Marker marker, Layer layer) {\n        return removeDomainMarker(0, marker, layer);\n    }\n\n    /**\n     * Removes a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index the dataset/renderer index.\n     * @param marker the marker.\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     */\n    public boolean removeDomainMarker(int index, Marker marker, Layer layer) {\n        return removeDomainMarker(index, marker, layer, true);\n    }\n\n    /**\n     * Removes a marker for a specific dataset/renderer and, if requested,\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     * @param notify  notify listeners?\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.10\n     */\n    public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n            boolean notify) {\n        ArrayList markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (ArrayList) this.foregroundDomainMarkers.get(\n                    new Integer(index));\n        }\n        else {\n            markers = (ArrayList) this.backgroundDomainMarkers.get(\n                    new Integer(index));\n        }\n        if (markers == null) {\n            return false;\n        }\n        boolean removed = markers.remove(marker);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }\n\n    /**\n     * Adds a marker for the range axis and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the range axis, however this is entirely up to the renderer.\n     *\n     * @param marker  the marker (<code>null</code> not permitted).\n     *\n     * @see #addRangeMarker(Marker, Layer)\n     */\n    public void addRangeMarker(Marker marker) {\n        addRangeMarker(marker, Layer.FOREGROUND);\n    }\n\n    /**\n     * Adds a marker for the range axis in the specified layer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the range axis, however this is entirely up to the renderer.\n     *\n     * @param marker  the marker (<code>null</code> not permitted).\n     * @param layer  the layer (foreground or background).\n     *\n     * @see #addRangeMarker(int, Marker, Layer)\n     */\n    public void addRangeMarker(Marker marker, Layer layer) {\n        addRangeMarker(0, marker, layer);\n    }\n\n    /**\n     * Clears all the range markers and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @see #clearRangeMarkers()\n     */\n    public void clearRangeMarkers() {\n        if (this.backgroundRangeMarkers != null) {\n            Set keys = this.backgroundRangeMarkers.keySet();\n            Iterator iterator = keys.iterator();\n            while (iterator.hasNext()) {\n                Integer key = (Integer) iterator.next();\n                clearRangeMarkers(key.intValue());\n            }\n            this.backgroundRangeMarkers.clear();\n        }\n        if (this.foregroundRangeMarkers != null) {\n            Set keys = this.foregroundRangeMarkers.keySet();\n            Iterator iterator = keys.iterator();\n            while (iterator.hasNext()) {\n                Integer key = (Integer) iterator.next();\n                clearRangeMarkers(key.intValue());\n            }\n            this.foregroundRangeMarkers.clear();\n        }\n        fireChangeEvent();\n    }\n\n    /**\n     * Adds a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the range axis, however this is entirely up to the renderer.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     *\n     * @see #clearRangeMarkers(int)\n     * @see #addDomainMarker(int, Marker, Layer)\n     */\n    public void addRangeMarker(int index, Marker marker, Layer layer) {\n        addRangeMarker(index, marker, layer, true);\n    }\n\n    /**\n     * Adds a marker for a specific dataset/renderer and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the range axis, however this is entirely up to the renderer.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.10\n     */\n    public void addRangeMarker(int index, Marker marker, Layer layer,\n            boolean notify) {\n        Collection markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (Collection) this.foregroundRangeMarkers.get(\n                    new Integer(index));\n            if (markers == null) {\n                markers = new java.util.ArrayList();\n                this.foregroundRangeMarkers.put(new Integer(index), markers);\n            }\n            markers.add(marker);\n        }\n        else if (layer == Layer.BACKGROUND) {\n            markers = (Collection) this.backgroundRangeMarkers.get(\n                    new Integer(index));\n            if (markers == null) {\n                markers = new java.util.ArrayList();\n                this.backgroundRangeMarkers.put(new Integer(index), markers);\n            }\n            markers.add(marker);\n        }\n        marker.addChangeListener(this);\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n\n    /**\n     * Clears the (foreground and background) range markers for a particular\n     * renderer.\n     *\n     * @param index  the renderer index.\n     */\n    public void clearRangeMarkers(int index) {\n        Integer key = new Integer(index);\n        if (this.backgroundRangeMarkers != null) {\n            Collection markers\n                = (Collection) this.backgroundRangeMarkers.get(key);\n            if (markers != null) {\n                Iterator iterator = markers.iterator();\n                while (iterator.hasNext()) {\n                    Marker m = (Marker) iterator.next();\n                    m.removeChangeListener(this);\n                }\n                markers.clear();\n            }\n        }\n        if (this.foregroundRangeMarkers != null) {\n            Collection markers\n                = (Collection) this.foregroundRangeMarkers.get(key);\n            if (markers != null) {\n                Iterator iterator = markers.iterator();\n                while (iterator.hasNext()) {\n                    Marker m = (Marker) iterator.next();\n                    m.removeChangeListener(this);\n                }\n                markers.clear();\n            }\n        }\n        fireChangeEvent();\n    }\n\n    /**\n     * Removes a marker for the range axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param marker the marker.\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     */\n    public boolean removeRangeMarker(Marker marker) {\n        return removeRangeMarker(marker, Layer.FOREGROUND);\n    }\n\n    /**\n     * Removes a marker for the range axis in the specified layer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param marker the marker (<code>null</code> not permitted).\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     */\n    public boolean removeRangeMarker(Marker marker, Layer layer) {\n        return removeRangeMarker(0, marker, layer);\n    }\n\n    /**\n     * Removes a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index the dataset/renderer index.\n     * @param marker the marker.\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     */\n    public boolean removeRangeMarker(int index, Marker marker, Layer layer) {\n        return removeRangeMarker(index, marker, layer, true);\n    }\n\n    /**\n     * Removes a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     * @param notify  notify listeners?\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.10\n     */\n    public boolean removeRangeMarker(int index, Marker marker, Layer layer,\n            boolean notify) {\n        if (marker == null) {\n            throw new IllegalArgumentException("Null \'marker\' argument.");\n        }\n        ArrayList markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (ArrayList) this.foregroundRangeMarkers.get(\n                    new Integer(index));\n        }\n        else {\n            markers = (ArrayList) this.backgroundRangeMarkers.get(\n                    new Integer(index));\n        }\n        if (markers == null) {\n            return false;\n        }\n        boolean removed = markers.remove(marker);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }\n\n    /**\n     * Adds an annotation to the plot and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param annotation  the annotation (<code>null</code> not permitted).\n     *\n     * @see #getAnnotations()\n     * @see #removeAnnotation(XYAnnotation)\n     */\n    public void addAnnotation(XYAnnotation annotation) {\n        addAnnotation(annotation, true);\n    }\n\n    /**\n     * Adds an annotation to the plot and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param annotation  the annotation (<code>null</code> not permitted).\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.10\n     */\n    public void addAnnotation(XYAnnotation annotation, boolean notify) {\n        if (annotation == null) {\n            throw new IllegalArgumentException("Null \'annotation\' argument.");\n        }\n        this.annotations.add(annotation);\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n\n    /**\n     * Removes an annotation from the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param annotation  the annotation (<code>null</code> not permitted).\n     *\n     * @return A boolean (indicates whether or not the annotation was removed).\n     *\n     * @see #addAnnotation(XYAnnotation)\n     * @see #getAnnotations()\n     */\n    public boolean removeAnnotation(XYAnnotation annotation) {\n        return removeAnnotation(annotation, true);\n    }\n\n    /**\n     * Removes an annotation from the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param annotation  the annotation (<code>null</code> not permitted).\n     * @param notify  notify listeners?\n     *\n     * @return A boolean (indicates whether or not the annotation was removed).\n     *\n     * @since 1.0.10\n     */\n    public boolean removeAnnotation(XYAnnotation annotation, boolean notify) {\n        if (annotation == null) {\n            throw new IllegalArgumentException("Null \'annotation\' argument.");\n        }\n        boolean removed = this.annotations.remove(annotation);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }\n\n    /**\n     * Returns the list of annotations.\n     *\n     * @return The list of annotations.\n     *\n     * @since 1.0.1\n     *\n     * @see #addAnnotation(XYAnnotation)\n     */\n    public List getAnnotations() {\n        return new ArrayList(this.annotations);\n    }\n\n    /**\n     * Clears all the annotations and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @see #addAnnotation(XYAnnotation)\n     */\n    public void clearAnnotations() {\n        this.annotations.clear();\n        fireChangeEvent();\n    }\n\n    /**\n     * Calculates the space required for all the axes in the plot.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     *\n     * @return The required space.\n     */\n    protected AxisSpace calculateAxisSpace(Graphics2D g2,\n                                           Rectangle2D plotArea) {\n        AxisSpace space = new AxisSpace();\n        space = calculateRangeAxisSpace(g2, plotArea, space);\n        Rectangle2D revPlotArea = space.shrink(plotArea, null);\n        space = calculateDomainAxisSpace(g2, revPlotArea, space);\n        return space;\n    }\n\n    /**\n     * Calculates the space required for the domain axis/axes.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param space  a carrier for the result (<code>null</code> permitted).\n     *\n     * @return The required space.\n     */\n    protected AxisSpace calculateDomainAxisSpace(Graphics2D g2,\n                                                 Rectangle2D plotArea,\n                                                 AxisSpace space) {\n\n        if (space == null) {\n            space = new AxisSpace();\n        }\n\n        // reserve some space for the domain axis...\n        if (this.fixedDomainAxisSpace != null) {\n            if (this.orientation == PlotOrientation.HORIZONTAL) {\n                space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),\n                        RectangleEdge.LEFT);\n                space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),\n                        RectangleEdge.RIGHT);\n            }\n            else if (this.orientation == PlotOrientation.VERTICAL) {\n                space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),\n                        RectangleEdge.TOP);\n                space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),\n                        RectangleEdge.BOTTOM);\n            }\n        }\n        else {\n            // reserve space for the domain axes...\n            for (int i = 0; i < this.domainAxes.size(); i++) {\n                Axis axis = (Axis) this.domainAxes.get(i);\n                if (axis != null) {\n                    RectangleEdge edge = getDomainAxisEdge(i);\n                    space = axis.reserveSpace(g2, this, plotArea, edge, space);\n                }\n            }\n        }\n\n        return space;\n\n    }\n\n    /**\n     * Calculates the space required for the range axis/axes.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param space  a carrier for the result (<code>null</code> permitted).\n     *\n     * @return The required space.\n     */\n    protected AxisSpace calculateRangeAxisSpace(Graphics2D g2,\n                                                Rectangle2D plotArea,\n                                                AxisSpace space) {\n\n        if (space == null) {\n            space = new AxisSpace();\n        }\n\n        // reserve some space for the range axis...\n        if (this.fixedRangeAxisSpace != null) {\n            if (this.orientation == PlotOrientation.HORIZONTAL) {\n                space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),\n                        RectangleEdge.TOP);\n                space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),\n                        RectangleEdge.BOTTOM);\n            }\n            else if (this.orientation == PlotOrientation.VERTICAL) {\n                space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),\n                        RectangleEdge.LEFT);\n                space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),\n                        RectangleEdge.RIGHT);\n            }\n        }\n        else {\n            // reserve space for the range axes...\n            for (int i = 0; i < this.rangeAxes.size(); i++) {\n                Axis axis = (Axis) this.rangeAxes.get(i);\n                if (axis != null) {\n                    RectangleEdge edge = getRangeAxisEdge(i);\n                    space = axis.reserveSpace(g2, this, plotArea, edge, space);\n                }\n            }\n        }\n        return space;\n\n    }\n\n    /**\n     * Draws the plot within the specified area on a graphics device.\n     *\n     * @param g2  the graphics device.\n     * @param area  the plot area (in Java2D space).\n     * @param anchor  an anchor point in Java2D space (<code>null</code>\n     *                permitted).\n     * @param parentState  the state from the parent plot, if there is one\n     *                     (<code>null</code> permitted).\n     * @param info  collects chart drawing information (<code>null</code>\n     *              permitted).\n     */\n    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n            PlotState parentState, PlotRenderingInfo info) {\n\n        // if the plot area is too small, just return...\n        boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);\n        boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);\n        if (b1 || b2) {\n            return;\n        }\n\n        // record the plot area...\n        if (info != null) {\n            info.setPlotArea(area);\n        }\n\n        // adjust the drawing area for the plot insets (if any)...\n        RectangleInsets insets = getInsets();\n        insets.trim(area);\n\n        AxisSpace space = calculateAxisSpace(g2, area);\n        Rectangle2D dataArea = space.shrink(area, null);\n        this.axisOffset.trim(dataArea);\n        createAndAddEntity((Rectangle2D) dataArea.clone(), info, null, null);\n        if (info != null) {\n            info.setDataArea(dataArea);\n        }\n\n        // draw the plot background and axes...\n        drawBackground(g2, dataArea);\n        Map axisStateMap = drawAxes(g2, area, dataArea, info);\n\n        PlotOrientation orient = getOrientation();\n\n        // the anchor point is typically the point where the mouse last\n        // clicked - the crosshairs will be driven off this point...\n        if (anchor != null && !dataArea.contains(anchor)) {\n            anchor = null;\n        }\n        CrosshairState crosshairState = new CrosshairState();\n        crosshairState.setCrosshairDistance(Double.POSITIVE_INFINITY);\n        crosshairState.setAnchor(anchor);\n\n        crosshairState.setAnchorX(Double.NaN);\n        crosshairState.setAnchorY(Double.NaN);\n        if (anchor != null) {\n            ValueAxis domainAxis = getDomainAxis();\n            if (domainAxis != null) {\n                double x;\n                if (orient == PlotOrientation.VERTICAL) {\n                    x = domainAxis.java2DToValue(anchor.getX(), dataArea,\n                            getDomainAxisEdge());\n                }\n                else {\n                    x = domainAxis.java2DToValue(anchor.getY(), dataArea,\n                            getDomainAxisEdge());\n                }\n                crosshairState.setAnchorX(x);\n            }\n            ValueAxis rangeAxis = getRangeAxis();\n            if (rangeAxis != null) {\n                double y;\n                if (orient == PlotOrientation.VERTICAL) {\n                    y = rangeAxis.java2DToValue(anchor.getY(), dataArea,\n                            getRangeAxisEdge());\n                }\n                else {\n                    y = rangeAxis.java2DToValue(anchor.getX(), dataArea,\n                            getRangeAxisEdge());\n                }\n                crosshairState.setAnchorY(y);\n            }\n        }\n        crosshairState.setCrosshairX(getDomainCrosshairValue());\n        crosshairState.setCrosshairY(getRangeCrosshairValue());\n        Shape originalClip = g2.getClip();\n        Composite originalComposite = g2.getComposite();\n\n        g2.clip(dataArea);\n        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,\n                getForegroundAlpha()));\n\n        AxisState domainAxisState = (AxisState) axisStateMap.get(\n                getDomainAxis());\n        if (domainAxisState == null) {\n            if (parentState != null) {\n                domainAxisState = (AxisState) parentState.getSharedAxisStates()\n                        .get(getDomainAxis());\n            }\n        }\n\n        AxisState rangeAxisState = (AxisState) axisStateMap.get(getRangeAxis());\n        if (rangeAxisState == null) {\n            if (parentState != null) {\n                rangeAxisState = (AxisState) parentState.getSharedAxisStates()\n                        .get(getRangeAxis());\n            }\n        }\n        if (domainAxisState != null) {\n            drawDomainTickBands(g2, dataArea, domainAxisState.getTicks());\n        }\n        if (rangeAxisState != null) {\n            drawRangeTickBands(g2, dataArea, rangeAxisState.getTicks());\n        }\n        if (domainAxisState != null) {\n            drawDomainGridlines(g2, dataArea, domainAxisState.getTicks());\n            drawZeroDomainBaseline(g2, dataArea);\n        }\n        if (rangeAxisState != null) {\n            drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks());\n            drawZeroRangeBaseline(g2, dataArea);\n        }\n\n        // draw the markers that are associated with a specific renderer...\n        for (int i = 0; i < this.renderers.size(); i++) {\n            drawDomainMarkers(g2, dataArea, i, Layer.BACKGROUND);\n        }\n        for (int i = 0; i < this.renderers.size(); i++) {\n            drawRangeMarkers(g2, dataArea, i, Layer.BACKGROUND);\n        }\n\n        // now draw annotations and render data items...\n        boolean foundData = false;\n        DatasetRenderingOrder order = getDatasetRenderingOrder();\n        if (order == DatasetRenderingOrder.FORWARD) {\n\n            // draw background annotations\n            int rendererCount = this.renderers.size();\n            for (int i = 0; i < rendererCount; i++) {\n                XYItemRenderer r = getRenderer(i);\n                if (r != null) {\n                    ValueAxis domainAxis = getDomainAxisForDataset(i);\n                    ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis,\n                            Layer.BACKGROUND, info);\n                }\n            }\n\n            // render data items...\n            for (int i = 0; i < getDatasetCount(); i++) {\n                foundData = render(g2, dataArea, i, info, crosshairState)\n                    || foundData;\n            }\n\n            // draw foreground annotations\n            for (int i = 0; i < rendererCount; i++) {\n                XYItemRenderer r = getRenderer(i);\n                if (r != null) {\n                    ValueAxis domainAxis = getDomainAxisForDataset(i);\n                    ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis,\n                            Layer.FOREGROUND, info);\n                }\n            }\n\n        }\n        else if (order == DatasetRenderingOrder.REVERSE) {\n\n            // draw background annotations\n            int rendererCount = this.renderers.size();\n            for (int i = rendererCount - 1; i >= 0; i--) {\n                XYItemRenderer r = getRenderer(i);\n                if (i >= getDatasetCount()) { // we need the dataset to make\n                    continue;                 // a link to the axes\n                }\n                if (r != null) {\n                    ValueAxis domainAxis = getDomainAxisForDataset(i);\n                    ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis,\n                            Layer.BACKGROUND, info);\n                }\n            }\n\n            for (int i = getDatasetCount() - 1; i >= 0; i--) {\n                foundData = render(g2, dataArea, i, info, crosshairState)\n                    || foundData;\n            }\n\n            // draw foreground annotations\n            for (int i = rendererCount - 1; i >= 0; i--) {\n                XYItemRenderer r = getRenderer(i);\n                if (i >= getDatasetCount()) { // we need the dataset to make\n                    continue;                 // a link to the axes\n                }\n                if (r != null) {\n                    ValueAxis domainAxis = getDomainAxisForDataset(i);\n                    ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis,\n                            Layer.FOREGROUND, info);\n                }\n            }\n\n        }\n\n        // draw domain crosshair if required...\n        int xAxisIndex = crosshairState.getDomainAxisIndex();\n        ValueAxis xAxis = getDomainAxis(xAxisIndex);\n        RectangleEdge xAxisEdge = getDomainAxisEdge(xAxisIndex);\n        if (!this.domainCrosshairLockedOnData && anchor != null) {\n            double xx;\n            if (orient == PlotOrientation.VERTICAL) {\n                xx = xAxis.java2DToValue(anchor.getX(), dataArea, xAxisEdge);\n            }\n            else {\n                xx = xAxis.java2DToValue(anchor.getY(), dataArea, xAxisEdge);\n            }\n            crosshairState.setCrosshairX(xx);\n        }\n        setDomainCrosshairValue(crosshairState.getCrosshairX(), false);\n        if (isDomainCrosshairVisible()) {\n            double x = getDomainCrosshairValue();\n            Paint paint = getDomainCrosshairPaint();\n            Stroke stroke = getDomainCrosshairStroke();\n            drawDomainCrosshair(g2, dataArea, orient, x, xAxis, stroke, paint);\n        }\n\n        // draw range crosshair if required...\n        int yAxisIndex = crosshairState.getRangeAxisIndex();\n        ValueAxis yAxis = getRangeAxis(yAxisIndex);\n        RectangleEdge yAxisEdge = getRangeAxisEdge(yAxisIndex);\n        if (!this.rangeCrosshairLockedOnData && anchor != null) {\n            double yy;\n            if (orient == PlotOrientation.VERTICAL) {\n                yy = yAxis.java2DToValue(anchor.getY(), dataArea, yAxisEdge);\n            } else {\n                yy = yAxis.java2DToValue(anchor.getX(), dataArea, yAxisEdge);\n            }\n            crosshairState.setCrosshairY(yy);\n        }\n        setRangeCrosshairValue(crosshairState.getCrosshairY(), false);\n        if (isRangeCrosshairVisible()) {\n            double y = getRangeCrosshairValue();\n            Paint paint = getRangeCrosshairPaint();\n            Stroke stroke = getRangeCrosshairStroke();\n            drawRangeCrosshair(g2, dataArea, orient, y, yAxis, stroke, paint);\n        }\n\n        if (!foundData) {\n            drawNoDataMessage(g2, dataArea);\n        }\n\n        for (int i = 0; i < this.renderers.size(); i++) {\n            drawDomainMarkers(g2, dataArea, i, Layer.FOREGROUND);\n        }\n        for (int i = 0; i < this.renderers.size(); i++) {\n            drawRangeMarkers(g2, dataArea, i, Layer.FOREGROUND);\n        }\n\n        drawAnnotations(g2, dataArea, info);\n        g2.setClip(originalClip);\n        g2.setComposite(originalComposite);\n\n        drawOutline(g2, dataArea);\n\n    }\n\n    /**\n     * Draws the background for the plot.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     */\n    public void drawBackground(Graphics2D g2, Rectangle2D area) {\n        fillBackground(g2, area, this.orientation);\n        drawQuadrants(g2, area);\n        drawBackgroundImage(g2, area);\n    }\n\n    /**\n     * Draws the quadrants.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     *\n     * @see #setQuadrantOrigin(Point2D)\n     * @see #setQuadrantPaint(int, Paint)\n     */\n    protected void drawQuadrants(Graphics2D g2, Rectangle2D area) {\n        //  0 | 1\n        //  --+--\n        //  2 | 3\n        boolean somethingToDraw = false;\n\n        ValueAxis xAxis = getDomainAxis();\n        if (xAxis == null) {  // we can\'t draw quadrants without a valid x-axis\n            return;\n        }\n        double x = xAxis.getRange().constrain(this.quadrantOrigin.getX());\n        double xx = xAxis.valueToJava2D(x, area, getDomainAxisEdge());\n\n        ValueAxis yAxis = getRangeAxis();\n        if (yAxis == null) {  // we can\'t draw quadrants without a valid y-axis\n            return;\n        }\n        double y = yAxis.getRange().constrain(this.quadrantOrigin.getY());\n        double yy = yAxis.valueToJava2D(y, area, getRangeAxisEdge());\n\n        double xmin = xAxis.getLowerBound();\n        double xxmin = xAxis.valueToJava2D(xmin, area, getDomainAxisEdge());\n\n        double xmax = xAxis.getUpperBound();\n        double xxmax = xAxis.valueToJava2D(xmax, area, getDomainAxisEdge());\n\n        double ymin = yAxis.getLowerBound();\n        double yymin = yAxis.valueToJava2D(ymin, area, getRangeAxisEdge());\n\n        double ymax = yAxis.getUpperBound();\n        double yymax = yAxis.valueToJava2D(ymax, area, getRangeAxisEdge());\n\n        Rectangle2D[] r = new Rectangle2D[] {null, null, null, null};\n        if (this.quadrantPaint[0] != null) {\n            if (x > xmin && y < ymax) {\n                if (this.orientation == PlotOrientation.HORIZONTAL) {\n                    r[0] = new Rectangle2D.Double(Math.min(yymax, yy),\n                            Math.min(xxmin, xx), Math.abs(yy - yymax),\n                            Math.abs(xx - xxmin));\n                }\n                else {  // PlotOrientation.VERTICAL\n                    r[0] = new Rectangle2D.Double(Math.min(xxmin, xx),\n                            Math.min(yymax, yy), Math.abs(xx - xxmin),\n                            Math.abs(yy - yymax));\n                }\n                somethingToDraw = true;\n            }\n        }\n        if (this.quadrantPaint[1] != null) {\n            if (x < xmax && y < ymax) {\n                if (this.orientation == PlotOrientation.HORIZONTAL) {\n                    r[1] = new Rectangle2D.Double(Math.min(yymax, yy),\n                            Math.min(xxmax, xx), Math.abs(yy - yymax),\n                            Math.abs(xx - xxmax));\n                }\n                else {  // PlotOrientation.VERTICAL\n                    r[1] = new Rectangle2D.Double(Math.min(xx, xxmax),\n                            Math.min(yymax, yy), Math.abs(xx - xxmax),\n                            Math.abs(yy - yymax));\n                }\n                somethingToDraw = true;\n            }\n        }\n        if (this.quadrantPaint[2] != null) {\n            if (x > xmin && y > ymin) {\n                if (this.orientation == PlotOrientation.HORIZONTAL) {\n                    r[2] = new Rectangle2D.Double(Math.min(yymin, yy),\n                            Math.min(xxmin, xx), Math.abs(yy - yymin),\n                            Math.abs(xx - xxmin));\n                }\n                else {  // PlotOrientation.VERTICAL\n                    r[2] = new Rectangle2D.Double(Math.min(xxmin, xx),\n                            Math.min(yymin, yy), Math.abs(xx - xxmin),\n                            Math.abs(yy - yymin));\n                }\n                somethingToDraw = true;\n            }\n        }\n        if (this.quadrantPaint[3] != null) {\n            if (x < xmax && y > ymin) {\n                if (this.orientation == PlotOrientation.HORIZONTAL) {\n                    r[3] = new Rectangle2D.Double(Math.min(yymin, yy),\n                            Math.min(xxmax, xx), Math.abs(yy - yymin),\n                            Math.abs(xx - xxmax));\n                }\n                else {  // PlotOrientation.VERTICAL\n                    r[3] = new Rectangle2D.Double(Math.min(xx, xxmax),\n                            Math.min(yymin, yy), Math.abs(xx - xxmax),\n                            Math.abs(yy - yymin));\n                }\n                somethingToDraw = true;\n            }\n        }\n        if (somethingToDraw) {\n            Composite originalComposite = g2.getComposite();\n            g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,\n                    getBackgroundAlpha()));\n            for (int i = 0; i < 4; i++) {\n                if (this.quadrantPaint[i] != null && r[i] != null) {\n                    g2.setPaint(this.quadrantPaint[i]);\n                    g2.fill(r[i]);\n                }\n            }\n            g2.setComposite(originalComposite);\n        }\n    }\n\n    /**\n     * Draws the domain tick bands, if any.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param ticks  the ticks.\n     *\n     * @see #setDomainTickBandPaint(Paint)\n     */\n    public void drawDomainTickBands(Graphics2D g2, Rectangle2D dataArea,\n                                    List ticks) {\n        Paint bandPaint = getDomainTickBandPaint();\n        if (bandPaint != null) {\n            boolean fillBand = false;\n            ValueAxis xAxis = getDomainAxis();\n            double previous = xAxis.getLowerBound();\n            Iterator iterator = ticks.iterator();\n            while (iterator.hasNext()) {\n                ValueTick tick = (ValueTick) iterator.next();\n                double current = tick.getValue();\n                if (fillBand) {\n                    getRenderer().fillDomainGridBand(g2, this, xAxis, dataArea,\n                            previous, current);\n                }\n                previous = current;\n                fillBand = !fillBand;\n            }\n            double end = xAxis.getUpperBound();\n            if (fillBand) {\n                getRenderer().fillDomainGridBand(g2, this, xAxis, dataArea,\n                        previous, end);\n            }\n        }\n    }\n\n    /**\n     * Draws the range tick bands, if any.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param ticks  the ticks.\n     *\n     * @see #setRangeTickBandPaint(Paint)\n     */\n    public void drawRangeTickBands(Graphics2D g2, Rectangle2D dataArea,\n                                   List ticks) {\n        Paint bandPaint = getRangeTickBandPaint();\n        if (bandPaint != null) {\n            boolean fillBand = false;\n            ValueAxis axis = getRangeAxis();\n            double previous = axis.getLowerBound();\n            Iterator iterator = ticks.iterator();\n            while (iterator.hasNext()) {\n                ValueTick tick = (ValueTick) iterator.next();\n                double current = tick.getValue();\n                if (fillBand) {\n                    getRenderer().fillRangeGridBand(g2, this, axis, dataArea,\n                            previous, current);\n                }\n                previous = current;\n                fillBand = !fillBand;\n            }\n            double end = axis.getUpperBound();\n            if (fillBand) {\n                getRenderer().fillRangeGridBand(g2, this, axis, dataArea,\n                        previous, end);\n            }\n        }\n    }\n\n    /**\n     * A utility method for drawing the axes.\n     *\n     * @param g2  the graphics device (<code>null</code> not permitted).\n     * @param plotArea  the plot area (<code>null</code> not permitted).\n     * @param dataArea  the data area (<code>null</code> not permitted).\n     * @param plotState  collects information about the plot (<code>null</code>\n     *                   permitted).\n     *\n     * @return A map containing the state for each axis drawn.\n     */\n    protected Map drawAxes(Graphics2D g2,\n                           Rectangle2D plotArea,\n                           Rectangle2D dataArea,\n                           PlotRenderingInfo plotState) {\n\n        AxisCollection axisCollection = new AxisCollection();\n\n        // add domain axes to lists...\n        for (int index = 0; index < this.domainAxes.size(); index++) {\n            ValueAxis axis = (ValueAxis) this.domainAxes.get(index);\n            if (axis != null) {\n                axisCollection.add(axis, getDomainAxisEdge(index));\n            }\n        }\n\n        // add range axes to lists...\n        for (int index = 0; index < this.rangeAxes.size(); index++) {\n            ValueAxis yAxis = (ValueAxis) this.rangeAxes.get(index);\n            if (yAxis != null) {\n                axisCollection.add(yAxis, getRangeAxisEdge(index));\n            }\n        }\n\n        Map axisStateMap = new HashMap();\n\n        // draw the top axes\n        double cursor = dataArea.getMinY() - this.axisOffset.calculateTopOutset(\n                dataArea.getHeight());\n        Iterator iterator = axisCollection.getAxesAtTop().iterator();\n        while (iterator.hasNext()) {\n            ValueAxis axis = (ValueAxis) iterator.next();\n            AxisState info = axis.draw(g2, cursor, plotArea, dataArea,\n                    RectangleEdge.TOP, plotState);\n            cursor = info.getCursor();\n            axisStateMap.put(axis, info);\n        }\n\n        // draw the bottom axes\n        cursor = dataArea.getMaxY()\n                 + this.axisOffset.calculateBottomOutset(dataArea.getHeight());\n        iterator = axisCollection.getAxesAtBottom().iterator();\n        while (iterator.hasNext()) {\n            ValueAxis axis = (ValueAxis) iterator.next();\n            AxisState info = axis.draw(g2, cursor, plotArea, dataArea,\n                    RectangleEdge.BOTTOM, plotState);\n            cursor = info.getCursor();\n            axisStateMap.put(axis, info);\n        }\n\n        // draw the left axes\n        cursor = dataArea.getMinX()\n                 - this.axisOffset.calculateLeftOutset(dataArea.getWidth());\n        iterator = axisCollection.getAxesAtLeft().iterator();\n        while (iterator.hasNext()) {\n            ValueAxis axis = (ValueAxis) iterator.next();\n            AxisState info = axis.draw(g2, cursor, plotArea, dataArea,\n                    RectangleEdge.LEFT, plotState);\n            cursor = info.getCursor();\n            axisStateMap.put(axis, info);\n        }\n\n        // draw the right axes\n        cursor = dataArea.getMaxX()\n                 + this.axisOffset.calculateRightOutset(dataArea.getWidth());\n        iterator = axisCollection.getAxesAtRight().iterator();\n        while (iterator.hasNext()) {\n            ValueAxis axis = (ValueAxis) iterator.next();\n            AxisState info = axis.draw(g2, cursor, plotArea, dataArea,\n                    RectangleEdge.RIGHT, plotState);\n            cursor = info.getCursor();\n            axisStateMap.put(axis, info);\n        }\n\n        return axisStateMap;\n    }\n\n    /**\n     * Draws a representation of the data within the dataArea region, using the\n     * current renderer.\n     * <P>\n     * The <code>info</code> and <code>crosshairState</code> arguments may be\n     * <code>null</code>.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the region in which the data is to be drawn.\n     * @param index  the dataset index.\n     * @param info  an optional object for collection dimension information.\n     * @param crosshairState  collects crosshair information\n     *                        (<code>null</code> permitted).\n     *\n     * @return A flag that indicates whether any data was actually rendered.\n     */\n    public boolean render(Graphics2D g2, Rectangle2D dataArea, int index,\n            PlotRenderingInfo info, CrosshairState crosshairState) {\n\n        boolean foundData = false;\n        XYDataset dataset = getDataset(index);\n        if (!DatasetUtilities.isEmptyOrNull(dataset)) {\n            foundData = true;\n            ValueAxis xAxis = getDomainAxisForDataset(index);\n            ValueAxis yAxis = getRangeAxisForDataset(index);\n            if (xAxis == null || yAxis == null) {\n                return foundData;  // can\'t render anything without axes\n            }\n            XYItemRenderer renderer = getRenderer(index);\n            if (renderer == null) {\n                renderer = getRenderer();\n                if (renderer == null) { // no default renderer available\n                    return foundData;\n                }\n            }\n\n            XYItemRendererState state = renderer.initialise(g2, dataArea, this,\n                    dataset, info);\n            XYDatasetSelectionState selectionState = state.getSelectionState();\n            int passCount = renderer.getPassCount();\n\n            SeriesRenderingOrder seriesOrder = getSeriesRenderingOrder();\n            if (seriesOrder == SeriesRenderingOrder.REVERSE) {\n                //render series in reverse order\n                for (int pass = 0; pass < passCount; pass++) {\n                    int seriesCount = dataset.getSeriesCount();\n                    for (int series = seriesCount - 1; series >= 0; series--) {\n                        int firstItem = 0;\n                        int lastItem = dataset.getItemCount(series) - 1;\n                        if (lastItem == -1) {\n                            continue;\n                        }\n                        if (state.getProcessVisibleItemsOnly()) {\n                            int[] itemBounds = RendererUtilities.findLiveItems(\n                                    dataset, series, xAxis.getLowerBound(),\n                                    xAxis.getUpperBound());\n                            firstItem = Math.max(itemBounds[0] - 1, 0);\n                            lastItem = Math.min(itemBounds[1] + 1, lastItem);\n                        }\n                        state.startSeriesPass(dataset, series, firstItem,\n                                lastItem, pass, passCount);\n                        for (int item = firstItem; item <= lastItem; item++) {\n                            boolean selected = false;\n                            if (selectionState != null) {\n                                selected = selectionState.isSelected(series,\n                                        item);\n                            }\n                            renderer.drawItem(g2, state, dataArea, this,\n                                    xAxis, yAxis, dataset, series, item,\n                                    selected, pass);\n                        }\n                        state.endSeriesPass(dataset, series, firstItem,\n                                lastItem, pass, passCount);\n                    }\n                }\n            }\n            else {\n                //render series in forward order\n                for (int pass = 0; pass < passCount; pass++) {\n                    int seriesCount = dataset.getSeriesCount();\n                    for (int series = 0; series < seriesCount; series++) {\n                        int firstItem = 0;\n                        int lastItem = dataset.getItemCount(series) - 1;\n                        if (state.getProcessVisibleItemsOnly()) {\n                            int[] itemBounds = RendererUtilities.findLiveItems(\n                                    dataset, series, xAxis.getLowerBound(),\n                                    xAxis.getUpperBound());\n                            firstItem = Math.max(itemBounds[0] - 1, 0);\n                            lastItem = Math.min(itemBounds[1] + 1, lastItem);\n                        }\n                        state.startSeriesPass(dataset, series, firstItem,\n                                lastItem, pass, passCount);\n                        for (int item = firstItem; item <= lastItem; item++) {\n                            boolean selected = false;\n                            if (selectionState != null) {\n                                selected = selectionState.isSelected(series,\n                                        item);\n                            }\n                            renderer.drawItem(g2, state, dataArea, this, \n                                    xAxis, yAxis, dataset, series, item,\n                                    selected, pass);\n                        }\n                        state.endSeriesPass(dataset, series, firstItem,\n                                lastItem, pass, passCount);\n                    }\n                }\n            }\n        }\n        return foundData;\n    }\n\n    /**\n     * Returns the domain axis for a dataset.\n     *\n     * @param index  the dataset index.\n     *\n     * @return The axis.\n     */\n    public ValueAxis getDomainAxisForDataset(int index) {\n        int upper = Math.max(getDatasetCount(), getRendererCount());\n        if (index < 0 || index >= upper) {\n            throw new IllegalArgumentException("Index " + index\n                    + " out of bounds.");\n        }\n        ValueAxis valueAxis = null;\n        List axisIndices = (List) this.datasetToDomainAxesMap.get(\n                new Integer(index));\n        if (axisIndices != null) {\n            // the first axis in the list is used for data <--> Java2D\n            Integer axisIndex = (Integer) axisIndices.get(0);\n            valueAxis = getDomainAxis(axisIndex.intValue());\n        }\n        else {\n            valueAxis = getDomainAxis(0);\n        }\n        return valueAxis;\n    }\n\n    /**\n     * Returns the range axis for a dataset.\n     *\n     * @param index  the dataset index.\n     *\n     * @return The axis.\n     */\n    public ValueAxis getRangeAxisForDataset(int index) {\n        int upper = Math.max(getDatasetCount(), getRendererCount());\n        if (index < 0 || index >= upper) {\n            throw new IllegalArgumentException("Index " + index\n                    + " out of bounds.");\n        }\n        ValueAxis valueAxis = null;\n        List axisIndices = (List) this.datasetToRangeAxesMap.get(\n                new Integer(index));\n        if (axisIndices != null) {\n            // the first axis in the list is used for data <--> Java2D\n            Integer axisIndex = (Integer) axisIndices.get(0);\n            valueAxis = getRangeAxis(axisIndex.intValue());\n        }\n        else {\n            valueAxis = getRangeAxis(0);\n        }\n        return valueAxis;\n    }\n\n    /**\n     * Draws the gridlines for the plot, if they are visible.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param ticks  the ticks.\n     *\n     * @see #drawRangeGridlines(Graphics2D, Rectangle2D, List)\n     */\n    protected void drawDomainGridlines(Graphics2D g2, Rectangle2D dataArea,\n                                       List ticks) {\n\n        // no renderer, no gridlines...\n        if (getRenderer() == null) {\n            return;\n        }\n\n        // draw the domain grid lines, if any...\n        if (isDomainGridlinesVisible() || isDomainMinorGridlinesVisible()) {\n            Stroke gridStroke = null;\n            Paint gridPaint = null;\n            Iterator iterator = ticks.iterator();\n            boolean paintLine = false;\n            while (iterator.hasNext()) {\n                paintLine = false;\n                ValueTick tick = (ValueTick) iterator.next();\n                if ((tick.getTickType() == TickType.MINOR)\n                        && isDomainMinorGridlinesVisible()) {\n                    gridStroke = getDomainMinorGridlineStroke();\n                    gridPaint = getDomainMinorGridlinePaint();\n                    paintLine = true;\n                }\n                else if ((tick.getTickType() == TickType.MAJOR)\n                        && isDomainGridlinesVisible()) {\n                    gridStroke = getDomainGridlineStroke();\n                    gridPaint = getDomainGridlinePaint();\n                    paintLine = true;\n                }\n                XYItemRenderer r = getRenderer();\n                if ((r instanceof AbstractXYItemRenderer) && paintLine) {\n                    ((AbstractXYItemRenderer) r).drawDomainLine(g2, this,\n                            getDomainAxis(), dataArea, tick.getValue(),\n                            gridPaint, gridStroke);\n                }\n            }\n        }\n    }\n\n    /**\n     * Draws the gridlines for the plot\'s primary range axis, if they are\n     * visible.\n     *\n     * @param g2  the graphics device.\n     * @param area  the data area.\n     * @param ticks  the ticks.\n     *\n     * @see #drawDomainGridlines(Graphics2D, Rectangle2D, List)\n     */\n    protected void drawRangeGridlines(Graphics2D g2, Rectangle2D area,\n                                      List ticks) {\n\n        // no renderer, no gridlines...\n        if (getRenderer() == null) {\n            return;\n        }\n\n        // draw the range grid lines, if any...\n        if (isRangeGridlinesVisible() || isRangeMinorGridlinesVisible()) {\n            Stroke gridStroke = null;\n            Paint gridPaint = null;\n            ValueAxis axis = getRangeAxis();\n            if (axis != null) {\n                Iterator iterator = ticks.iterator();\n                boolean paintLine = false;\n                while (iterator.hasNext()) {\n                    paintLine = false;\n                    ValueTick tick = (ValueTick) iterator.next();\n                    if ((tick.getTickType() == TickType.MINOR)\n                            && isRangeMinorGridlinesVisible()) {\n                        gridStroke = getRangeMinorGridlineStroke();\n                        gridPaint = getRangeMinorGridlinePaint();\n                        paintLine = true;\n                    }\n                    else if ((tick.getTickType() == TickType.MAJOR)\n                            && isRangeGridlinesVisible()) {\n                        gridStroke = getRangeGridlineStroke();\n                        gridPaint = getRangeGridlinePaint();\n                        paintLine = true;\n                    }\n                    if ((tick.getValue() != 0.0\n                            || !isRangeZeroBaselineVisible()) && paintLine) {\n                        getRenderer().drawRangeLine(g2, this, getRangeAxis(),\n                                area, tick.getValue(), gridPaint, gridStroke);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Draws a base line across the chart at value zero on the domain axis.\n     *\n     * @param g2  the graphics device.\n     * @param area  the data area.\n     *\n     * @see #setDomainZeroBaselineVisible(boolean)\n     *\n     * @since 1.0.5\n     */\n    protected void drawZeroDomainBaseline(Graphics2D g2, Rectangle2D area) {\n        if (isDomainZeroBaselineVisible()) {\n            XYItemRenderer r = getRenderer();\n            r.drawDomainLine(g2, this, getDomainAxis(), area, 0.0,\n                    this.domainZeroBaselinePaint,\n                    this.domainZeroBaselineStroke);\n        }\n    }\n\n    /**\n     * Draws a base line across the chart at value zero on the range axis.\n     *\n     * @param g2  the graphics device.\n     * @param area  the data area.\n     *\n     * @see #setRangeZeroBaselineVisible(boolean)\n     */\n    protected void drawZeroRangeBaseline(Graphics2D g2, Rectangle2D area) {\n        if (isRangeZeroBaselineVisible()) {\n            getRenderer().drawRangeLine(g2, this, getRangeAxis(), area, 0.0,\n                    this.rangeZeroBaselinePaint, this.rangeZeroBaselineStroke);\n        }\n    }\n\n    /**\n     * Draws the annotations for the plot.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param info  the chart rendering info.\n     */\n    public void drawAnnotations(Graphics2D g2,\n                                Rectangle2D dataArea,\n                                PlotRenderingInfo info) {\n\n        Iterator iterator = this.annotations.iterator();\n        while (iterator.hasNext()) {\n            XYAnnotation annotation = (XYAnnotation) iterator.next();\n            ValueAxis xAxis = getDomainAxis();\n            ValueAxis yAxis = getRangeAxis();\n            annotation.draw(g2, this, dataArea, xAxis, yAxis, 0, info);\n        }\n\n    }\n\n    /**\n     * Draws the domain markers (if any) for an axis and layer.  This method is\n     * typically called from within the draw() method.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param index  the renderer index.\n     * @param layer  the layer (foreground or background).\n     */\n    protected void drawDomainMarkers(Graphics2D g2, Rectangle2D dataArea,\n                                     int index, Layer layer) {\n\n        XYItemRenderer r = getRenderer(index);\n        if (r == null) {\n            return;\n        }\n        // check that the renderer has a corresponding dataset (it doesn\'t\n        // matter if the dataset is null)\n        if (index >= getDatasetCount()) {\n            return;\n        }\n        Collection markers = getDomainMarkers(index, layer);\n        ValueAxis axis = getDomainAxisForDataset(index);\n        if (markers != null && axis != null) {\n            Iterator iterator = markers.iterator();\n            while (iterator.hasNext()) {\n                Marker marker = (Marker) iterator.next();\n                r.drawDomainMarker(g2, this, axis, marker, dataArea);\n            }\n        }\n\n    }\n\n    /**\n     * Draws the range markers (if any) for a renderer and layer.  This method\n     * is typically called from within the draw() method.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param index  the renderer index.\n     * @param layer  the layer (foreground or background).\n     */\n    protected void drawRangeMarkers(Graphics2D g2, Rectangle2D dataArea,\n                                    int index, Layer layer) {\n\n        XYItemRenderer r = getRenderer(index);\n        if (r == null) {\n            return;\n        }\n        // check that the renderer has a corresponding dataset (it doesn\'t\n        // matter if the dataset is null)\n        if (index >= getDatasetCount()) {\n            return;\n        }\n        Collection markers = getRangeMarkers(index, layer);\n        ValueAxis axis = getRangeAxisForDataset(index);\n        if (markers != null && axis != null) {\n            Iterator iterator = markers.iterator();\n            while (iterator.hasNext()) {\n                Marker marker = (Marker) iterator.next();\n                r.drawRangeMarker(g2, this, axis, marker, dataArea);\n            }\n        }\n    }\n\n    /**\n     * Returns the list of domain markers (read only) for the specified layer.\n     *\n     * @param layer  the layer (foreground or background).\n     *\n     * @return The list of domain markers.\n     *\n     * @see #getRangeMarkers(Layer)\n     */\n    public Collection getDomainMarkers(Layer layer) {\n        return getDomainMarkers(0, layer);\n    }\n\n    /**\n     * Returns the list of range markers (read only) for the specified layer.\n     *\n     * @param layer  the layer (foreground or background).\n     *\n     * @return The list of range markers.\n     *\n     * @see #getDomainMarkers(Layer)\n     */\n    public Collection getRangeMarkers(Layer layer) {\n        return getRangeMarkers(0, layer);\n    }\n\n    /**\n     * Returns a collection of domain markers for a particular renderer and\n     * layer.\n     *\n     * @param index  the renderer index.\n     * @param layer  the layer.\n     *\n     * @return A collection of markers (possibly <code>null</code>).\n     *\n     * @see #getRangeMarkers(int, Layer)\n     */\n    public Collection getDomainMarkers(int index, Layer layer) {\n        Collection result = null;\n        Integer key = new Integer(index);\n        if (layer == Layer.FOREGROUND) {\n            result = (Collection) this.foregroundDomainMarkers.get(key);\n        }\n        else if (layer == Layer.BACKGROUND) {\n            result = (Collection) this.backgroundDomainMarkers.get(key);\n        }\n        if (result != null) {\n            result = Collections.unmodifiableCollection(result);\n        }\n        return result;\n    }\n\n    /**\n     * Returns a collection of range markers for a particular renderer and\n     * layer.\n     *\n     * @param index  the renderer index.\n     * @param layer  the layer.\n     *\n     * @return A collection of markers (possibly <code>null</code>).\n     *\n     * @see #getDomainMarkers(int, Layer)\n     */\n    public Collection getRangeMarkers(int index, Layer layer) {\n        Collection result = null;\n        Integer key = new Integer(index);\n        if (layer == Layer.FOREGROUND) {\n            result = (Collection) this.foregroundRangeMarkers.get(key);\n        }\n        else if (layer == Layer.BACKGROUND) {\n            result = (Collection) this.backgroundRangeMarkers.get(key);\n        }\n        if (result != null) {\n            result = Collections.unmodifiableCollection(result);\n        }\n        return result;\n    }\n\n    /**\n     * Utility method for drawing a horizontal line across the data area of the\n     * plot.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param value  the coordinate, where to draw the line.\n     * @param stroke  the stroke to use.\n     * @param paint  the paint to use.\n     */\n    protected void drawHorizontalLine(Graphics2D g2, Rectangle2D dataArea,\n                                      double value, Stroke stroke,\n                                      Paint paint) {\n\n        ValueAxis axis = getRangeAxis();\n        if (getOrientation() == PlotOrientation.HORIZONTAL) {\n            axis = getDomainAxis();\n        }\n        if (axis.getRange().contains(value)) {\n            double yy = axis.valueToJava2D(value, dataArea, RectangleEdge.LEFT);\n            Line2D line = new Line2D.Double(dataArea.getMinX(), yy,\n                    dataArea.getMaxX(), yy);\n            g2.setStroke(stroke);\n            g2.setPaint(paint);\n            g2.draw(line);\n        }\n\n    }\n\n    /**\n     * Draws a domain crosshair.\n     *\n     * @param g2  the graphics target.\n     * @param dataArea  the data area.\n     * @param orientation  the plot orientation.\n     * @param value  the crosshair value.\n     * @param axis  the axis against which the value is measured.\n     * @param stroke  the stroke used to draw the crosshair line.\n     * @param paint  the paint used to draw the crosshair line.\n     *\n     * @since 1.0.4\n     */\n    protected void drawDomainCrosshair(Graphics2D g2, Rectangle2D dataArea,\n            PlotOrientation orientation, double value, ValueAxis axis,\n            Stroke stroke, Paint paint) {\n\n        if (axis.getRange().contains(value)) {\n            Line2D line = null;\n            if (orientation == PlotOrientation.VERTICAL) {\n                double xx = axis.valueToJava2D(value, dataArea,\n                        RectangleEdge.BOTTOM);\n                line = new Line2D.Double(xx, dataArea.getMinY(), xx,\n                        dataArea.getMaxY());\n            }\n            else {\n                double yy = axis.valueToJava2D(value, dataArea,\n                        RectangleEdge.LEFT);\n                line = new Line2D.Double(dataArea.getMinX(), yy,\n                        dataArea.getMaxX(), yy);\n            }\n            g2.setStroke(stroke);\n            g2.setPaint(paint);\n            g2.draw(line);\n        }\n\n    }\n\n    /**\n     * Utility method for drawing a vertical line on the data area of the plot.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param value  the coordinate, where to draw the line.\n     * @param stroke  the stroke to use.\n     * @param paint  the paint to use.\n     */\n    protected void drawVerticalLine(Graphics2D g2, Rectangle2D dataArea,\n                                    double value, Stroke stroke, Paint paint) {\n\n        ValueAxis axis = getDomainAxis();\n        if (getOrientation() == PlotOrientation.HORIZONTAL) {\n            axis = getRangeAxis();\n        }\n        if (axis.getRange().contains(value)) {\n            double xx = axis.valueToJava2D(value, dataArea,\n                    RectangleEdge.BOTTOM);\n            Line2D line = new Line2D.Double(xx, dataArea.getMinY(), xx,\n                    dataArea.getMaxY());\n            g2.setStroke(stroke);\n            g2.setPaint(paint);\n            g2.draw(line);\n        }\n\n    }\n\n    /**\n     * Draws a range crosshair.\n     *\n     * @param g2  the graphics target.\n     * @param dataArea  the data area.\n     * @param orientation  the plot orientation.\n     * @param value  the crosshair value.\n     * @param axis  the axis against which the value is measured.\n     * @param stroke  the stroke used to draw the crosshair line.\n     * @param paint  the paint used to draw the crosshair line.\n     *\n     * @since 1.0.4\n     */\n    protected void drawRangeCrosshair(Graphics2D g2, Rectangle2D dataArea,\n            PlotOrientation orientation, double value, ValueAxis axis,\n            Stroke stroke, Paint paint) {\n\n        if (axis.getRange().contains(value)) {\n            Line2D line = null;\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                double xx = axis.valueToJava2D(value, dataArea,\n                        RectangleEdge.BOTTOM);\n                line = new Line2D.Double(xx, dataArea.getMinY(), xx,\n                        dataArea.getMaxY());\n            }\n            else {\n                double yy = axis.valueToJava2D(value, dataArea,\n                        RectangleEdge.LEFT);\n                line = new Line2D.Double(dataArea.getMinX(), yy,\n                        dataArea.getMaxX(), yy);\n            }\n            g2.setStroke(stroke);\n            g2.setPaint(paint);\n            g2.draw(line);\n        }\n\n    }\n\n    /**\n     * Handles a \'click\' on the plot by updating the anchor values.\n     *\n     * @param x  the x-coordinate, where the click occurred, in Java2D space.\n     * @param y  the y-coordinate, where the click occurred, in Java2D space.\n     * @param info  object containing information about the plot dimensions.\n     */\n    public void handleClick(int x, int y, PlotRenderingInfo info) {\n\n        Rectangle2D dataArea = info.getDataArea();\n        if (dataArea.contains(x, y)) {\n            // set the anchor value for the horizontal axis...\n            ValueAxis xaxis = getDomainAxis();\n            if (xaxis != null) {\n                double hvalue = xaxis.java2DToValue(x, info.getDataArea(),\n                        getDomainAxisEdge());\n                setDomainCrosshairValue(hvalue);\n            }\n\n            // set the anchor value for the vertical axis...\n            ValueAxis yaxis = getRangeAxis();\n            if (yaxis != null) {\n                double vvalue = yaxis.java2DToValue(y, info.getDataArea(),\n                        getRangeAxisEdge());\n                setRangeCrosshairValue(vvalue);\n            }\n        }\n    }\n\n    /**\n     * A utility method that returns a list of datasets that are mapped to a\n     * particular axis.\n     *\n     * @param axisIndex  the axis index (<code>null</code> not permitted).\n     *\n     * @return A list of datasets.\n     */\n    private List getDatasetsMappedToDomainAxis(Integer axisIndex) {\n        if (axisIndex == null) {\n            throw new IllegalArgumentException("Null \'axisIndex\' argument.");\n        }\n        List result = new ArrayList();\n        for (int i = 0; i < this.datasets.size(); i++) {\n            List mappedAxes = (List) this.datasetToDomainAxesMap.get(\n                    new Integer(i));\n            if (mappedAxes == null) {\n                if (axisIndex.equals(ZERO)) {\n                    result.add(this.datasets.get(i));\n                }\n            }\n            else {\n                if (mappedAxes.contains(axisIndex)) {\n                    result.add(this.datasets.get(i));\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * A utility method that returns a list of datasets that are mapped to a\n     * particular axis.\n     *\n     * @param axisIndex  the axis index (<code>null</code> not permitted).\n     *\n     * @return A list of datasets.\n     */\n    private List getDatasetsMappedToRangeAxis(Integer axisIndex) {\n        if (axisIndex == null) {\n            throw new IllegalArgumentException("Null \'axisIndex\' argument.");\n        }\n        List result = new ArrayList();\n        for (int i = 0; i < this.datasets.size(); i++) {\n            List mappedAxes = (List) this.datasetToRangeAxesMap.get(\n                    new Integer(i));\n            if (mappedAxes == null) {\n                if (axisIndex.equals(ZERO)) {\n                    result.add(this.datasets.get(i));\n                }\n            }\n            else {\n                if (mappedAxes.contains(axisIndex)) {\n                    result.add(this.datasets.get(i));\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Returns the index of the given domain axis.\n     *\n     * @param axis  the axis.\n     *\n     * @return The axis index.\n     *\n     * @see #getRangeAxisIndex(ValueAxis)\n     */\n    public int getDomainAxisIndex(ValueAxis axis) {\n        int result = this.domainAxes.indexOf(axis);\n        if (result < 0) {\n            // try the parent plot\n            Plot parent = getParent();\n            if (parent instanceof XYPlot) {\n                XYPlot p = (XYPlot) parent;\n                result = p.getDomainAxisIndex(axis);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Returns the index of the given range axis.\n     *\n     * @param axis  the axis.\n     *\n     * @return The axis index.\n     *\n     * @see #getDomainAxisIndex(ValueAxis)\n     */\n    public int getRangeAxisIndex(ValueAxis axis) {\n        int result = this.rangeAxes.indexOf(axis);\n        if (result < 0) {\n            // try the parent plot\n            Plot parent = getParent();\n            if (parent instanceof XYPlot) {\n                XYPlot p = (XYPlot) parent;\n                result = p.getRangeAxisIndex(axis);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Returns the range for the specified axis.\n     *\n     * @param axis  the axis.\n     *\n     * @return The range.\n     */\n    public Range getDataRange(ValueAxis axis) {\n\n        Range result = null;\n        List mappedDatasets = new ArrayList();\n        List includedAnnotations = new ArrayList();\n        boolean isDomainAxis = true;\n\n        // is it a domain axis?\n        int domainIndex = getDomainAxisIndex(axis);\n        if (domainIndex >= 0) {\n            isDomainAxis = true;\n            mappedDatasets.addAll(getDatasetsMappedToDomainAxis(\n                    new Integer(domainIndex)));\n            if (domainIndex == 0) {\n                // grab the plot\'s annotations\n                Iterator iterator = this.annotations.iterator();\n                while (iterator.hasNext()) {\n                    XYAnnotation annotation = (XYAnnotation) iterator.next();\n                    if (annotation instanceof XYAnnotationBoundsInfo) {\n                        includedAnnotations.add(annotation);\n                    }\n                }\n            }\n        }\n\n        // or is it a range axis?\n        int rangeIndex = getRangeAxisIndex(axis);\n        if (rangeIndex >= 0) {\n            isDomainAxis = false;\n            mappedDatasets.addAll(getDatasetsMappedToRangeAxis(\n                    new Integer(rangeIndex)));\n            if (rangeIndex == 0) {\n                Iterator iterator = this.annotations.iterator();\n                while (iterator.hasNext()) {\n                    XYAnnotation annotation = (XYAnnotation) iterator.next();\n                    if (annotation instanceof XYAnnotationBoundsInfo) {\n                        includedAnnotations.add(annotation);\n                    }\n                }\n            }\n        }\n\n        // iterate through the datasets that map to the axis and get the union\n        // of the ranges.\n        Iterator iterator = mappedDatasets.iterator();\n        while (iterator.hasNext()) {\n            XYDataset d = (XYDataset) iterator.next();\n            if (d != null) {\n                XYItemRenderer r = getRendererForDataset(d);\n                if (isDomainAxis) {\n                    if (r != null) {\n                        result = Range.combine(result, r.findDomainBounds(d));\n                    }\n                    else {\n                        result = Range.combine(result,\n                                DatasetUtilities.findDomainBounds(d));\n                    }\n                }\n                else {\n                    if (r != null) {\n                        result = Range.combine(result, r.findRangeBounds(d));\n                    }\n                    else {\n                        result = Range.combine(result,\n                                DatasetUtilities.findRangeBounds(d));\n                    }\n                }\n                ', 'aftercode': '                    Iterator i = c.iterator();\n                    while (i.hasNext()) {\n                        XYAnnotation a = (XYAnnotation) i.next();\n                        if (a instanceof XYAnnotationBoundsInfo) {\n                            includedAnnotations.add(a);\n                        }\n                    }\n            }\n        }\n\n        Iterator it = includedAnnotations.iterator();\n        while (it.hasNext()) {\n            XYAnnotationBoundsInfo xyabi = (XYAnnotationBoundsInfo) it.next();\n            if (xyabi.getIncludeInDataBounds()) {\n                if (isDomainAxis) {\n                    result = Range.combine(result, xyabi.getXRange());\n                }\n                else {\n                    result = Range.combine(result, xyabi.getYRange());\n                }\n            }\n        }\n\n        return result;\n\n    }\n\n    /**\n     * Receives notification of a change to the plot\'s dataset.\n     * <P>\n     * The axis ranges are updated if necessary.\n     *\n     * @param event  information about the event (not used here).\n     */\n    public void datasetChanged(DatasetChangeEvent event) {\n        configureDomainAxes();\n        configureRangeAxes();\n        if (getParent() != null) {\n            getParent().datasetChanged(event);\n        }\n        else {\n            PlotChangeEvent e = new PlotChangeEvent(this);\n            e.setType(ChartChangeEventType.DATASET_UPDATED);\n            notifyListeners(e);\n        }\n    }\n\n    /**\n     * Receives notification of a renderer change event.\n     *\n     * @param event  the event.\n     */\n    public void rendererChanged(RendererChangeEvent event) {\n        // if the event was caused by a change to series visibility, then\n        // the axis ranges might need updating...\n        if (event.getSeriesVisibilityChanged()) {\n            configureDomainAxes();\n            configureRangeAxes();\n        }\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns a flag indicating whether or not the domain crosshair is visible.\n     *\n     * @return The flag.\n     *\n     * @see #setDomainCrosshairVisible(boolean)\n     */\n    public boolean isDomainCrosshairVisible() {\n        return this.domainCrosshairVisible;\n    }\n\n    /**\n     * Sets the flag indicating whether or not the domain crosshair is visible\n     * and, if the flag changes, sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param flag  the new value of the flag.\n     *\n     * @see #isDomainCrosshairVisible()\n     */\n    public void setDomainCrosshairVisible(boolean flag) {\n        if (this.domainCrosshairVisible != flag) {\n            this.domainCrosshairVisible = flag;\n            fireChangeEvent();\n        }\n    }\n\n    /**\n     * Returns a flag indicating whether or not the crosshair should "lock-on"\n     * to actual data values.\n     *\n     * @return The flag.\n     *\n     * @see #setDomainCrosshairLockedOnData(boolean)\n     */\n    public boolean isDomainCrosshairLockedOnData() {\n        return this.domainCrosshairLockedOnData;\n    }\n\n    /**\n     * Sets the flag indicating whether or not the domain crosshair should\n     * "lock-on" to actual data values.  If the flag value changes, this\n     * method sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #isDomainCrosshairLockedOnData()\n     */\n    public void setDomainCrosshairLockedOnData(boolean flag) {\n        if (this.domainCrosshairLockedOnData != flag) {\n            this.domainCrosshairLockedOnData = flag;\n            fireChangeEvent();\n        }\n    }\n\n    /**\n     * Returns the domain crosshair value.\n     *\n     * @return The value.\n     *\n     * @see #setDomainCrosshairValue(double)\n     */\n    public double getDomainCrosshairValue() {\n        return this.domainCrosshairValue;\n    }\n\n    /**\n     * Sets the domain crosshair value and sends a {@link PlotChangeEvent} to\n     * all registered listeners (provided that the domain crosshair is visible).\n     *\n     * @param value  the value.\n     *\n     * @see #getDomainCrosshairValue()\n     */\n    public void setDomainCrosshairValue(double value) {\n        setDomainCrosshairValue(value, true);\n    }\n\n    /**\n     * Sets the domain crosshair value and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners (provided that the\n     * domain crosshair is visible).\n     *\n     * @param value  the new value.\n     * @param notify  notify listeners?\n     *\n     * @see #getDomainCrosshairValue()\n     */\n    public void setDomainCrosshairValue(double value, boolean notify) {\n        this.domainCrosshairValue = value;\n        if (isDomainCrosshairVisible() && notify) {\n            fireChangeEvent();\n        }\n    }\n\n    /**\n     * Returns the {@link Stroke} used to draw the crosshair (if visible).\n     *\n     * @return The crosshair stroke (never <code>null</code>).\n     *\n     * @see #setDomainCrosshairStroke(Stroke)\n     * @see #isDomainCrosshairVisible()\n     * @see #getDomainCrosshairPaint()\n     */\n    public Stroke getDomainCrosshairStroke() {\n        return this.domainCrosshairStroke;\n    }\n\n    /**\n     * Sets the Stroke used to draw the crosshairs (if visible) and notifies\n     * registered listeners that the axis has been modified.\n     *\n     * @param stroke  the new crosshair stroke (<code>null</code> not\n     *     permitted).\n     *\n     * @see #getDomainCrosshairStroke()\n     */\n    public void setDomainCrosshairStroke(Stroke stroke) {\n        if (stroke == null) {\n            throw new IllegalArgumentException("Null \'stroke\' argument.");\n        }\n        this.domainCrosshairStroke = stroke;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns the domain crosshair paint.\n     *\n     * @return The crosshair paint (never <code>null</code>).\n     *\n     * @see #setDomainCrosshairPaint(Paint)\n     * @see #isDomainCrosshairVisible()\n     * @see #getDomainCrosshairStroke()\n     */\n    public Paint getDomainCrosshairPaint() {\n        return this.domainCrosshairPaint;\n    }\n\n    /**\n     * Sets the paint used to draw the crosshairs (if visible) and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint the new crosshair paint (<code>null</code> not permitted).\n     *\n     * @see #getDomainCrosshairPaint()\n     */\n    public void setDomainCrosshairPaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException("Null \'paint\' argument.");\n        }\n        this.domainCrosshairPaint = paint;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns a flag indicating whether or not the range crosshair is visible.\n     *\n     * @return The flag.\n     *\n     * @see #setRangeCrosshairVisible(boolean)\n     * @see #isDomainCrosshairVisible()\n     */\n    public boolean isRangeCrosshairVisible() {\n        return this.rangeCrosshairVisible;\n    }\n\n    /**\n     * Sets the flag indicating whether or not the range crosshair is visible.\n     * If the flag value changes, this method sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param flag  the new value of the flag.\n     *\n     * @see #isRangeCrosshairVisible()\n     */\n    public void setRangeCrosshairVisible(boolean flag) {\n        if (this.rangeCrosshairVisible != flag) {\n            this.rangeCrosshairVisible = flag;\n            fireChangeEvent();\n        }\n    }\n\n    /**\n     * Returns a flag indicating whether or not the crosshair should "lock-on"\n     * to actual data values.\n     *\n     * @return The flag.\n     *\n     * @see #setRangeCrosshairLockedOnData(boolean)\n     */\n    public boolean isRangeCrosshairLockedOnData() {\n        return this.rangeCrosshairLockedOnData;\n    }\n\n    /**\n     * Sets the flag indicating whether or not the range crosshair should\n     * "lock-on" to actual data values.  If the flag value changes, this method\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #isRangeCrosshairLockedOnData()\n     */\n    public void setRangeCrosshairLockedOnData(boolean flag) {\n        if (this.rangeCrosshairLockedOnData != flag) {\n            this.rangeCrosshairLockedOnData = flag;\n            fireChangeEvent();\n        }\n    }\n\n    /**\n     * Returns the range crosshair value.\n     *\n     * @return The value.\n     *\n     * @see #setRangeCrosshairValue(double)\n     */\n    public double getRangeCrosshairValue() {\n        return this.rangeCrosshairValue;\n    }\n\n    /**\n     * Sets the range crosshair value.\n     * <P>\n     * Registered listeners are notified that the plot has been modified, but\n     * only if the crosshair is visible.\n     *\n     * @param value  the new value.\n     *\n     * @see #getRangeCrosshairValue()\n     */\n    public void setRangeCrosshairValue(double value) {\n        setRangeCrosshairValue(value, true);\n    }\n\n    /**\n     * Sets the range crosshair value and sends a {@link PlotChangeEvent} to\n     * all registered listeners, but only if the crosshair is visible.\n     *\n     * @param value  the new value.\n     * @param notify  a flag that controls whether or not listeners are\n     *                notified.\n     *\n     * @see #getRangeCrosshairValue()\n     */\n    public void setRangeCrosshairValue(double value, boolean notify) {\n        this.rangeCrosshairValue = value;\n        if (isRangeCrosshairVisible() && notify) {\n            fireChangeEvent();\n        }\n    }\n\n    /**\n     * Returns the stroke used to draw the crosshair (if visible).\n     *\n     * @return The crosshair stroke (never <code>null</code>).\n     *\n     * @see #setRangeCrosshairStroke(Stroke)\n     * @see #isRangeCrosshairVisible()\n     * @see #getRangeCrosshairPaint()\n     */\n    public Stroke getRangeCrosshairStroke() {\n        return this.rangeCrosshairStroke;\n    }\n\n    /**\n     * Sets the stroke used to draw the crosshairs (if visible) and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the new crosshair stroke (<code>null</code> not\n     *         permitted).\n     *\n     * @see #getRangeCrosshairStroke()\n     */\n    public void setRangeCrosshairStroke(Stroke stroke) {\n        if (stroke == null) {\n            throw new IllegalArgumentException("Null \'stroke\' argument.");\n        }\n        this.rangeCrosshairStroke = stroke;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns the range crosshair paint.\n     *\n     * @return The crosshair paint (never <code>null</code>).\n     *\n     * @see #setRangeCrosshairPaint(Paint)\n     * @see #isRangeCrosshairVisible()\n     * @see #getRangeCrosshairStroke()\n     */\n    public Paint getRangeCrosshairPaint() {\n        return this.rangeCrosshairPaint;\n    }\n\n    /**\n     * Sets the paint used to color the crosshairs (if visible) and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint the new crosshair paint (<code>null</code> not permitted).\n     *\n     * @see #getRangeCrosshairPaint()\n     */\n    public void setRangeCrosshairPaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException("Null \'paint\' argument.");\n        }\n        this.rangeCrosshairPaint = paint;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns the fixed domain axis space.\n     *\n     * @return The fixed domain axis space (possibly <code>null</code>).\n     *\n     * @see #setFixedDomainAxisSpace(AxisSpace)\n     */\n    public AxisSpace getFixedDomainAxisSpace() {\n        return this.fixedDomainAxisSpace;\n    }\n\n    /**\n     * Sets the fixed domain axis space and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param space  the space (<code>null</code> permitted).\n     *\n     * @see #getFixedDomainAxisSpace()\n     */\n    public void setFixedDomainAxisSpace(AxisSpace space) {\n        setFixedDomainAxisSpace(space, true);\n    }\n\n    /**\n     * Sets the fixed domain axis space and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param space  the space (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getFixedDomainAxisSpace()\n     *\n     * @since 1.0.9\n     */\n    public void setFixedDomainAxisSpace(AxisSpace space, boolean notify) {\n        this.fixedDomainAxisSpace = space;\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n\n    /**\n     * Returns the fixed range axis space.\n     *\n     * @return The fixed range axis space (possibly <code>null</code>).\n     *\n     * @see #setFixedRangeAxisSpace(AxisSpace)\n     */\n    public AxisSpace getFixedRangeAxisSpace() {\n        return this.fixedRangeAxisSpace;\n    }\n\n    /**\n     * Sets the fixed range axis space and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param space  the space (<code>null</code> permitted).\n     *\n     * @see #getFixedRangeAxisSpace()\n     */\n    public void setFixedRangeAxisSpace(AxisSpace space) {\n        setFixedRangeAxisSpace(space, true);\n    }\n\n    /**\n     * Sets the fixed range axis space and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param space  the space (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getFixedRangeAxisSpace()\n     *\n     * @since 1.0.9\n     */\n    public void setFixedRangeAxisSpace(AxisSpace space, boolean notify) {\n        this.fixedRangeAxisSpace = space;\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n\n    /**\n     * Returns <code>true</code> if panning is enabled for the domain axes,\n     * and <code>false</code> otherwise.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.13\n     */\n    public boolean isDomainPannable() {\n        return this.domainPannable;\n    }\n\n    /**\n     * Sets the flag that enables or disables panning of the plot along the\n     * domain axes.\n     *\n     * @param pannable  the new flag value.\n     *\n     * @since 1.0.13\n     */\n    public void setDomainPannable(boolean pannable) {\n        this.domainPannable = pannable;\n    }\n\n    /**\n     * Returns <code>true</code> if panning is enabled for the range axes,\n     * and <code>false</code> otherwise.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.13\n     */\n    public boolean isRangePannable() {\n        return this.rangePannable;\n    }\n\n    /**\n     * Sets the flag that enables or disables panning of the plot along\n     * the range axes.\n     *\n     * @param pannable  the new flag value.\n     *\n     * @since 1.0.13\n     */\n    public void setRangePannable(boolean pannable) {\n        this.rangePannable = pannable;\n    }\n\n    /**\n     * Pans the domain axes by the specified percentage.\n     *\n     * @param percent  the distance to pan (as a percentage of the axis length).\n     * @param info the plot info\n     * @param source the source point where the pan action started.\n     *\n     * @since 1.0.13\n     */\n    public void panDomainAxes(double percent, PlotRenderingInfo info,\n            Point2D source) {\n        if (!isDomainPannable()) {\n            return;\n        }\n        int domainAxisCount = getDomainAxisCount();\n        for (int i = 0; i < domainAxisCount; i++) {\n            ValueAxis axis = getDomainAxis(i);\n            if (axis == null) {\n                continue;\n            }\n            if (axis.isInverted()) {\n                percent = -percent;\n            }\n            axis.pan(percent);\n        }\n    }\n\n    /**\n     * Pans the range axes by the specified percentage.\n     *\n     * @param percent  the distance to pan (as a percentage of the axis length).\n     * @param info the plot info\n     * @param source the source point where the pan action started.\n     *\n     * @since 1.0.13\n     */\n    public void panRangeAxes(double percent, PlotRenderingInfo info,\n            Point2D source) {\n        if (!isRangePannable()) {\n            return;\n        }\n        int rangeAxisCount = getRangeAxisCount();\n        for (int i = 0; i < rangeAxisCount; i++) {\n            ValueAxis axis = getRangeAxis(i);\n            if (axis == null) {\n                continue;\n            }\n            if (axis.isInverted()) {\n                percent = -percent;\n            }\n            axis.pan(percent);\n        }\n    }\n\n    /**\n     * Multiplies the range on the domain axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info.\n     * @param source  the source point (in Java2D space).\n     *\n     * @see #zoomRangeAxes(double, PlotRenderingInfo, Point2D)\n     */\n    public void zoomDomainAxes(double factor, PlotRenderingInfo info,\n                               Point2D source) {\n        // delegate to other method\n        zoomDomainAxes(factor, info, source, false);\n    }\n\n    /**\n     * Multiplies the range on the domain axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info.\n     * @param source  the source point (in Java2D space).\n     * @param useAnchor  use source point as zoom anchor?\n     *\n     * @see #zoomRangeAxes(double, PlotRenderingInfo, Point2D, boolean)\n     *\n     * @since 1.0.7\n     */\n    public void zoomDomainAxes(double factor, PlotRenderingInfo info,\n                               Point2D source, boolean useAnchor) {\n\n        // perform the zoom on each domain axis\n        for (int i = 0; i < this.domainAxes.size(); i++) {\n            ValueAxis domainAxis = (ValueAxis) this.domainAxes.get(i);\n            if (domainAxis != null) {\n                if (useAnchor) {\n                    // get the relevant source coordinate given the plot\n                    // orientation\n                    double sourceX = source.getX();\n                    if (this.orientation == PlotOrientation.HORIZONTAL) {\n                        sourceX = source.getY();\n                    }\n                    double anchorX = domainAxis.java2DToValue(sourceX,\n                            info.getDataArea(), getDomainAxisEdge());\n                    domainAxis.resizeRange2(factor, anchorX);\n                }\n                else {\n                    domainAxis.resizeRange(factor);\n                }\n            }\n        }\n    }\n\n    /**\n     * Zooms in on the domain axis/axes.  The new lower and upper bounds are\n     * specified as percentages of the current axis range, where 0 percent is\n     * the current lower bound and 100 percent is the current upper bound.\n     *\n     * @param lowerPercent  a percentage that determines the new lower bound\n     *                      for the axis (e.g. 0.20 is twenty percent).\n     * @param upperPercent  a percentage that determines the new upper bound\n     *                      for the axis (e.g. 0.80 is eighty percent).\n     * @param info  the plot rendering info.\n     * @param source  the source point (ignored).\n     *\n     * @see #zoomRangeAxes(double, double, PlotRenderingInfo, Point2D)\n     */\n    public void zoomDomainAxes(double lowerPercent, double upperPercent,\n                               PlotRenderingInfo info, Point2D source) {\n        for (int i = 0; i < this.domainAxes.size(); i++) {\n            ValueAxis domainAxis = (ValueAxis) this.domainAxes.get(i);\n            if (domainAxis != null) {\n                domainAxis.zoomRange(lowerPercent, upperPercent);\n            }\n        }\n    }\n\n    /**\n     * Multiplies the range on the range axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info.\n     * @param source  the source point.\n     *\n     * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)\n     */\n    public void zoomRangeAxes(double factor, PlotRenderingInfo info,\n                              Point2D source) {\n        // delegate to other method\n        zoomRangeAxes(factor, info, source, false);\n    }\n\n    /**\n     * Multiplies the range on the range axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info.\n     * @param source  the source point.\n     * @param useAnchor  a flag that controls whether or not the source point\n     *         is used for the zoom anchor.\n     *\n     * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)\n     *\n     * @since 1.0.7\n     */\n    public void zoomRangeAxes(double factor, PlotRenderingInfo info,\n                              Point2D source, boolean useAnchor) {\n\n        // perform the zoom on each range axis\n        for (int i = 0; i < this.rangeAxes.size(); i++) {\n            ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i);\n            if (rangeAxis != null) {\n                if (useAnchor) {\n                    // get the relevant source coordinate given the plot\n                    // orientation\n                    double sourceY = source.getY();\n                    if (this.orientation == PlotOrientation.HORIZONTAL) {\n                        sourceY = source.getX();\n                    }\n                    double anchorY = rangeAxis.java2DToValue(sourceY,\n                            info.getDataArea(), getRangeAxisEdge());\n                    rangeAxis.resizeRange2(factor, anchorY);\n                }\n                else {\n                    rangeAxis.resizeRange(factor);\n                }\n            }\n        }\n    }\n\n    /**\n     * Zooms in on the range axes.\n     *\n     * @param lowerPercent  the lower bound.\n     * @param upperPercent  the upper bound.\n     * @param info  the plot rendering info.\n     * @param source  the source point.\n     *\n     * @see #zoomDomainAxes(double, double, PlotRenderingInfo, Point2D)\n     */\n    public void zoomRangeAxes(double lowerPercent, double upperPercent,\n                              PlotRenderingInfo info, Point2D source) {\n        for (int i = 0; i < this.rangeAxes.size(); i++) {\n            ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i);\n            if (rangeAxis != null) {\n                rangeAxis.zoomRange(lowerPercent, upperPercent);\n            }\n        }\n    }\n\n    /**\n     * Returns <code>true</code>, indicating that the domain axis/axes for this\n     * plot are zoomable.\n     *\n     * @return A boolean.\n     *\n     * @see #isRangeZoomable()\n     */\n    public boolean isDomainZoomable() {\n        return true;\n    }\n\n    /**\n     * Returns <code>true</code>, indicating that the range axis/axes for this\n     * plot are zoomable.\n     *\n     * @return A boolean.\n     *\n     * @see #isDomainZoomable()\n     */\n    public boolean isRangeZoomable() {\n        return true;\n    }\n\n    /**\n     * Returns the number of series in the primary dataset for this plot.  If\n     * the dataset is <code>null</code>, the method returns 0.\n     *\n     * @return The series count.\n     */\n    public int getSeriesCount() {\n        int result = 0;\n        XYDataset dataset = getDataset();\n        if (dataset != null) {\n            result = dataset.getSeriesCount();\n        }\n        return result;\n    }\n\n    /**\n     * Returns the fixed legend items, if any.\n     *\n     * @return The legend items (possibly <code>null</code>).\n     *\n     * @see #setFixedLegendItems(LegendItemCollection)\n     */\n    public LegendItemCollection getFixedLegendItems() {\n        return this.fixedLegendItems;\n    }\n\n    /**\n     * Sets the fixed legend items for the plot.  Leave this set to\n     * <code>null</code> if you prefer the legend items to be created\n     * automatically.\n     *\n     * @param items  the legend items (<code>null</code> permitted).\n     *\n     * @see #getFixedLegendItems()\n     */\n    public void setFixedLegendItems(LegendItemCollection items) {\n        this.fixedLegendItems = items;\n        fireChangeEvent();\n    }\n\n    /**\n     * Returns the legend items for the plot.  Each legend item is generated by\n     * the plot\'s renderer, since the renderer is responsible for the visual\n     * representation of the data.\n     *\n     * @return The legend items.\n     */\n    public LegendItemCollection getLegendItems() {\n        if (this.fixedLegendItems != null) {\n            return this.fixedLegendItems;\n        }\n        LegendItemCollection result = new LegendItemCollection();\n        int count = this.datasets.size();\n        for (int datasetIndex = 0; datasetIndex < count; datasetIndex++) {\n            XYDataset dataset = getDataset(datasetIndex);\n            if (dataset != null) {\n                XYItemRenderer renderer = getRenderer(datasetIndex);\n                if (renderer == null) {\n                    renderer = getRenderer(0);\n                }\n                if (renderer != null) {\n                    int seriesCount = dataset.getSeriesCount();\n                    for (int i = 0; i < seriesCount; i++) {\n                        if (renderer.isSeriesVisible(i)\n                                && renderer.isSeriesVisibleInLegend(i)) {\n                            LegendItem item = renderer.getLegendItem(\n                                    datasetIndex, i);\n                            if (item != null) {\n                                result.add(item);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Tests this plot for equality with another object.\n     *\n     * @param obj  the object (<code>null</code> permitted).\n     *\n     * @return <code>true</code> or <code>false</code>.\n     */\n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof XYPlot)) {\n            return false;\n        }\n        XYPlot that = (XYPlot) obj;\n        if (this.weight != that.weight) {\n            return false;\n        }\n        if (this.orientation != that.orientation) {\n            return false;\n        }\n        if (!this.domainAxes.equals(that.domainAxes)) {\n            return false;\n        }\n        if (!this.domainAxisLocations.equals(that.domainAxisLocations)) {\n            return false;\n        }\n        if (this.rangeCrosshairLockedOnData\n                != that.rangeCrosshairLockedOnData) {\n            return false;\n        }\n        if (this.domainGridlinesVisible != that.domainGridlinesVisible) {\n            return false;\n        }\n        if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) {\n            return false;\n        }\n        if (this.domainMinorGridlinesVisible\n                != that.domainMinorGridlinesVisible) {\n            return false;\n        }\n        if (this.rangeMinorGridlinesVisible\n                != that.rangeMinorGridlinesVisible) {\n            return false;\n        }\n        if (this.domainZeroBaselineVisible != that.domainZeroBaselineVisible) {\n            return false;\n        }\n        if (this.rangeZeroBaselineVisible != that.rangeZeroBaselineVisible) {\n            return false;\n        }\n        if (this.domainCrosshairVisible != that.domainCrosshairVisible) {\n            return false;\n        }\n        if (this.domainCrosshairValue != that.domainCrosshairValue) {\n            return false;\n        }\n        if (this.domainCrosshairLockedOnData\n                != that.domainCrosshairLockedOnData) {\n            return false;\n        }\n        if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) {\n            return false;\n        }\n        if (this.rangeCrosshairValue != that.rangeCrosshairValue) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.axisOffset, that.axisOffset)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.renderers, that.renderers)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxes, that.rangeAxes)) {\n            return false;\n        }\n        if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.datasetToDomainAxesMap,\n                that.datasetToDomainAxesMap)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.datasetToRangeAxesMap,\n                that.datasetToRangeAxesMap)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.domainGridlineStroke,\n                that.domainGridlineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.domainGridlinePaint,\n                that.domainGridlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeGridlineStroke,\n                that.rangeGridlineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.rangeGridlinePaint,\n                that.rangeGridlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.domainMinorGridlineStroke,\n                that.domainMinorGridlineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.domainMinorGridlinePaint,\n                that.domainMinorGridlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeMinorGridlineStroke,\n                that.rangeMinorGridlineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.rangeMinorGridlinePaint,\n                that.rangeMinorGridlinePaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.domainZeroBaselinePaint,\n                that.domainZeroBaselinePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.domainZeroBaselineStroke,\n                that.domainZeroBaselineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.rangeZeroBaselinePaint,\n                that.rangeZeroBaselinePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeZeroBaselineStroke,\n                that.rangeZeroBaselineStroke)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.domainCrosshairStroke,\n                that.domainCrosshairStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.domainCrosshairPaint,\n                that.domainCrosshairPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeCrosshairStroke,\n                that.rangeCrosshairStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.rangeCrosshairPaint,\n                that.rangeCrosshairPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.foregroundDomainMarkers,\n                that.foregroundDomainMarkers)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.backgroundDomainMarkers,\n                that.backgroundDomainMarkers)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.foregroundRangeMarkers,\n                that.foregroundRangeMarkers)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.backgroundRangeMarkers,\n                that.backgroundRangeMarkers)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.foregroundDomainMarkers,\n                that.foregroundDomainMarkers)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.backgroundDomainMarkers,\n                that.backgroundDomainMarkers)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.foregroundRangeMarkers,\n                that.foregroundRangeMarkers)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.backgroundRangeMarkers,\n                that.backgroundRangeMarkers)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.annotations, that.annotations)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.fixedLegendItems,\n                that.fixedLegendItems)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.domainTickBandPaint,\n                that.domainTickBandPaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.rangeTickBandPaint,\n                that.rangeTickBandPaint)) {\n            return false;\n        }\n        if (!this.quadrantOrigin.equals(that.quadrantOrigin)) {\n            return false;\n        }\n        for (int i = 0; i < 4; i++) {\n            if (!PaintUtilities.equal(this.quadrantPaint[i],\n                    that.quadrantPaint[i])) {\n                return false;\n            }\n        }\n        return super.equals(obj);\n    }\n\n    /**\n     * Returns a clone of the plot.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  this can occur if some component of\n     *         the plot cannot be cloned.\n     */\n    public Object clone() throws CloneNotSupportedException {\n\n        XYPlot clone = (XYPlot) super.clone();\n        clone.domainAxes = (ObjectList) ObjectUtilities.clone(this.domainAxes);\n        for (int i = 0; i < this.domainAxes.size(); i++) {\n            ValueAxis axis = (ValueAxis) this.domainAxes.get(i);\n            if (axis != null) {\n                ValueAxis clonedAxis = (ValueAxis) axis.clone();\n                clone.domainAxes.set(i, clonedAxis);\n                clonedAxis.setPlot(clone);\n                clonedAxis.addChangeListener(clone);\n            }\n        }\n        clone.domainAxisLocations = (ObjectList)\n                this.domainAxisLocations.clone();\n\n        clone.rangeAxes = (ObjectList) ObjectUtilities.clone(this.rangeAxes);\n        for (int i = 0; i < this.rangeAxes.size(); i++) {\n            ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);\n            if (axis != null) {\n                ValueAxis clonedAxis = (ValueAxis) axis.clone();\n                clone.rangeAxes.set(i, clonedAxis);\n                clonedAxis.setPlot(clone);\n                clonedAxis.addChangeListener(clone);\n            }\n        }\n        clone.rangeAxisLocations = (ObjectList) ObjectUtilities.clone(\n                this.rangeAxisLocations);\n\n        // the datasets are not cloned, but listeners need to be added...\n        clone.datasets = (ObjectList) ObjectUtilities.clone(this.datasets);\n        for (int i = 0; i < clone.datasets.size(); ++i) {\n            XYDataset d = getDataset(i);\n            if (d != null) {\n                d.addChangeListener(clone);\n            }\n        }\n\n        clone.datasetToDomainAxesMap = new TreeMap();\n        clone.datasetToDomainAxesMap.putAll(this.datasetToDomainAxesMap);\n        clone.datasetToRangeAxesMap = new TreeMap();\n        clone.datasetToRangeAxesMap.putAll(this.datasetToRangeAxesMap);\n\n        clone.renderers = (ObjectList) ObjectUtilities.clone(this.renderers);\n        for (int i = 0; i < this.renderers.size(); i++) {\n            XYItemRenderer renderer2 = (XYItemRenderer) this.renderers.get(i);\n            if (renderer2 instanceof PublicCloneable) {\n                PublicCloneable pc = (PublicCloneable) renderer2;\n                clone.renderers.set(i, pc.clone());\n            }\n        }\n        clone.foregroundDomainMarkers = (Map) ObjectUtilities.clone(\n                this.foregroundDomainMarkers);\n        clone.backgroundDomainMarkers = (Map) ObjectUtilities.clone(\n                this.backgroundDomainMarkers);\n        clone.foregroundRangeMarkers = (Map) ObjectUtilities.clone(\n                this.foregroundRangeMarkers);\n        clone.backgroundRangeMarkers = (Map) ObjectUtilities.clone(\n                this.backgroundRangeMarkers);\n        clone.annotations = (List) ObjectUtilities.deepClone(this.annotations);\n        if (this.fixedDomainAxisSpace != null) {\n            clone.fixedDomainAxisSpace = (AxisSpace) ObjectUtilities.clone(\n                    this.fixedDomainAxisSpace);\n        }\n        if (this.fixedRangeAxisSpace != null) {\n            clone.fixedRangeAxisSpace = (AxisSpace) ObjectUtilities.clone(\n                    this.fixedRangeAxisSpace);\n        }\n        if (this.fixedLegendItems != null) {\n            clone.fixedLegendItems\n                    = (LegendItemCollection) this.fixedLegendItems.clone();\n        }\n        clone.quadrantOrigin = (Point2D) ObjectUtilities.clone(\n                this.quadrantOrigin);\n        clone.quadrantPaint = (Paint[]) this.quadrantPaint.clone();\n        return clone;\n\n    }\n\n    /**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n        SerialUtilities.writeStroke(this.domainGridlineStroke, stream);\n        SerialUtilities.writePaint(this.domainGridlinePaint, stream);\n        SerialUtilities.writeStroke(this.rangeGridlineStroke, stream);\n        SerialUtilities.writePaint(this.rangeGridlinePaint, stream);\n        SerialUtilities.writeStroke(this.domainMinorGridlineStroke, stream);\n        SerialUtilities.writePaint(this.domainMinorGridlinePaint, stream);\n        SerialUtilities.writeStroke(this.rangeMinorGridlineStroke, stream);\n        SerialUtilities.writePaint(this.rangeMinorGridlinePaint, stream);\n        SerialUtilities.writeStroke(this.rangeZeroBaselineStroke, stream);\n        SerialUtilities.writePaint(this.rangeZeroBaselinePaint, stream);\n        SerialUtilities.writeStroke(this.domainCrosshairStroke, stream);\n        SerialUtilities.writePaint(this.domainCrosshairPaint, stream);\n        SerialUtilities.writeStroke(this.rangeCrosshairStroke, stream);\n        SerialUtilities.writePaint(this.rangeCrosshairPaint, stream);\n        SerialUtilities.writePaint(this.domainTickBandPaint, stream);\n        SerialUtilities.writePaint(this.rangeTickBandPaint, stream);\n        SerialUtilities.writePoint2D(this.quadrantOrigin, stream);\n        for (int i = 0; i < 4; i++) {\n            SerialUtilities.writePaint(this.quadrantPaint[i], stream);\n        }\n        SerialUtilities.writeStroke(this.domainZeroBaselineStroke, stream);\n        SerialUtilities.writePaint(this.domainZeroBaselinePaint, stream);\n    }\n\n    /**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n    private void readObject(ObjectInputStream stream)\n        throws IOException, ClassNotFoundException {\n\n        stream.defaultReadObject();\n        this.domainGridlineStroke = SerialUtilities.readStroke(stream);\n        this.domainGridlinePaint = SerialUtilities.readPaint(stream);\n        this.rangeGridlineStroke = SerialUtilities.readStroke(stream);\n        this.rangeGridlinePaint = SerialUtilities.readPaint(stream);\n        this.domainMinorGridlineStroke = SerialUtilities.readStroke(stream);\n        this.domainMinorGridlinePaint = SerialUtilities.readPaint(stream);\n        this.rangeMinorGridlineStroke = SerialUtilities.readStroke(stream);\n        this.rangeMinorGridlinePaint = SerialUtilities.readPaint(stream);\n        this.rangeZeroBaselineStroke = SerialUtilities.readStroke(stream);\n        this.rangeZeroBaselinePaint = SerialUtilities.readPaint(stream);\n        this.domainCrosshairStroke = SerialUtilities.readStroke(stream);\n        this.domainCrosshairPaint = SerialUtilities.readPaint(stream);\n        this.rangeCrosshairStroke = SerialUtilities.readStroke(stream);\n        this.rangeCrosshairPaint = SerialUtilities.readPaint(stream);\n        this.domainTickBandPaint = SerialUtilities.readPaint(stream);\n        this.rangeTickBandPaint = SerialUtilities.readPaint(stream);\n        this.quadrantOrigin = SerialUtilities.readPoint2D(stream);\n        this.quadrantPaint = new Paint[4];\n        for (int i = 0; i < 4; i++) {\n            this.quadrantPaint[i] = SerialUtilities.readPaint(stream);\n        }\n\n        this.domainZeroBaselineStroke = SerialUtilities.readStroke(stream);\n        this.domainZeroBaselinePaint = SerialUtilities.readPaint(stream);\n\n        // register the plot as a listener with its axes, datasets, and\n        // renderers...\n        int domainAxisCount = this.domainAxes.size();\n        for (int i = 0; i < domainAxisCount; i++) {\n            Axis axis = (Axis) this.domainAxes.get(i);\n            if (axis != null) {\n                axis.setPlot(this);\n                axis.addChangeListener(this);\n            }\n        }\n        int rangeAxisCount = this.rangeAxes.size();\n        for (int i = 0; i < rangeAxisCount; i++) {\n            Axis axis = (Axis) this.rangeAxes.get(i);\n            if (axis != null) {\n                axis.setPlot(this);\n                axis.addChangeListener(this);\n            }\n        }\n        int datasetCount = this.datasets.size();\n        for (int i = 0; i < datasetCount; i++) {\n            Dataset dataset = (Dataset) this.datasets.get(i);\n            if (dataset != null) {\n                dataset.addChangeListener(this);\n            }\n        }\n        int rendererCount = this.renderers.size();\n        for (int i = 0; i < rendererCount; i++) {\n            XYItemRenderer renderer = (XYItemRenderer) this.renderers.get(i);\n            if (renderer != null) {\n                renderer.addChangeListener(this);\n            }\n        }\n\n    }\n\n    /**\n     * Returns <code>false</code> to indicate that this plot does not support\n     * selection of data items at a point (only because it hasn\'t been\n     * implemented yet).\n     *\n     * @return A boolean.\n     *\n     * @since 1.2.0\n     */\n    public boolean canSelectByPoint() {\n        return false;  // TODO: make this true later\n}\n\n    /**\n     * Returns <code>true</code> to indicate that this plot supports selection\n     * of data items by region.\n     *\n     * @return A boolean.\n     *\n     * @since 1.2.0\n     */\n    public boolean canSelectByRegion() {\n        return true;\n    }\n\n    /**\n     * Selects a single point - NOT YET IMPLEMENTED.\n     *\n     * @since 1.2.0\n     */\n    public void select(double x, double y, Rectangle2D dataArea,\n            RenderingSource source) {\n        // TODO: implement\n    }\n\n    /**\n     * Selects the data items within the specified region.\n     *\n     * @param region  the region (in Java2D coordinates).\n     * @param dataArea  the data area.\n     * @param source  the rendering source.\n     *\n     * @since 1.2.0\n     */\n    public void select(GeneralPath region, Rectangle2D dataArea,\n            RenderingSource source) {\n        // cycle through the datasets and change the selection state for the\n        // items that fall within the specified region\n        int datasetCount = this.datasets.size();\n        for (int d = 0; d < datasetCount; d++) {\n            XYDataset dataset = (XYDataset) this.datasets.get(d);\n            if (dataset == null) {\n                continue;\n            }\n            XYDatasetSelectionState state = findSelectionStateForDataset(\n                    dataset, source);\n            if (state == null) {\n                continue;\n            }\n            GeneralPath path = convertToDataSpace(region, dataArea, dataset);\n            // now we have to iterate over all the dataset values and\n            // convert each point to Java2D space and then check if it should\n            // be selected.\n            int seriesCount = dataset.getSeriesCount();\n            for (int s = 0; s < seriesCount; s++) {\n                int itemCount = dataset.getItemCount(s);\n                for (int i = 0; i < itemCount; i++) {\n                    double x = dataset.getXValue(s, i);\n                    double y = dataset.getYValue(s, i);\n                    if (path.contains(x, y)) {\n                        state.setSelected(s, i, true);\n                        // FIXME:  we should fire just one dataset change event\n                        // for the whole selection\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the selection state for the specified dataset.  This could be\n     * <code>null</code> if the dataset hasn\'t been set up to support\n     * selections.\n     *\n     * @param dataset  the dataset.\n     * @param source  the selection source.\n     *\n     * @return The selection state (possibly <code>null</code>).\n     */\n    private XYDatasetSelectionState findSelectionStateForDataset(\n            XYDataset dataset, Object source) {\n        if (dataset instanceof SelectableXYDataset) {\n            SelectableXYDataset sd = (SelectableXYDataset) dataset;\n            XYDatasetSelectionState s = sd.getSelectionState();\n            return s;\n        }\n        throw new RuntimeException();\n        //return null;  // TODO: implement\n    }\n\n    /**\n     * Converts a path from Java2D space to data space.\n     *\n     * @param path  the path (<code>null</code> not permitted).\n     * @param dataArea  the data area.\n     * @param dataset  the dataset which can be used to find the appropriate\n     *         axes.\n     *\n     * @return A path in data space.\n     */\n    private GeneralPath convertToDataSpace(GeneralPath path,\n            Rectangle2D dataArea, XYDataset dataset) {\n        GeneralPath result = new GeneralPath(path.getWindingRule());\n        int datasetIndex = indexOf(dataset);\n        ValueAxis xAxis = getDomainAxisForDataset(datasetIndex);\n        ValueAxis yAxis = getRangeAxisForDataset(datasetIndex);\n        RectangleEdge xAxisEdge = getDomainAxisEdge();\n        RectangleEdge yAxisEdge = getRangeAxisEdge();\n        double[] coords = new double[6];\n        PathIterator iterator = path.getPathIterator(null);\n        while (!iterator.isDone()) {\n            int segType = iterator.currentSegment(coords);\n            double xx = xAxis.java2DToValue(coords[0], dataArea, xAxisEdge);\n            double yy = yAxis.java2DToValue(coords[1], dataArea, yAxisEdge);\n            if (segType == PathIterator.SEG_MOVETO) {\n                result.moveTo((float) xx, (float) yy);\n            }\n            else if (segType == PathIterator.SEG_LINETO) {\n                result.lineTo((float) xx, (float) yy);\n            }\n            else if (segType == PathIterator.SEG_CLOSE) {\n                result.closePath();\n            }\n            iterator.next();\n        }\n        return result;\n    }\n\n    /**\n     * Clears the selection.\n     *\n     * @since 1.2.0\n     */\n    public void clearSelection() {\n        // cycle through the datasets and clear the selection state\n        int datasetCount = this.datasets.size();\n        for (int d = 0; d < datasetCount; d++) {\n            XYDataset dataset = (XYDataset) this.datasets.get(d);\n            if (dataset instanceof AbstractXYDataset) {\n                // TODO: we could add an interface that *any* dataset could\n                // implement if it provides a selection state\n                AbstractXYDataset axyd = (AbstractXYDataset) dataset;\n                if (axyd.getSelectionState() != null) {\n                    XYDatasetSelectionState selState = axyd.getSelectionState();\n                    selState.clearSelection();\n                }\n            }\n        }\n    }\n\n}', 'tree': 'body WhileStatement condition MethodInvocation qualifier loc16 ^ ^ member hasNext_ter ^ ^ ^ ^ body BlockStatement statements LocalVariableDeclaration type ReferenceType name XYDataset_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer Cast type ReferenceType name XYDataset_ter ^ ^ ^ ^ expression MethodInvocation qualifier loc16 ^ ^ member next_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements LocalVariableDeclaration type ReferenceType name XYItemRenderer_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer MethodInvocation arguments MemberReference member loc0 ^ ^ ^ ^ member getRendererForDataset_ter ^ ^ ^ ^ ^ ^ ^ IfStatement condition MemberReference member isDomainAxis_ter ^ ^ ^ ^ then_statement BlockStatement statements IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findDomainBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ else_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findDomainBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ else_statement BlockStatement statements IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findRangeBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ else_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findRangeBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer MethodInvocation qualifier loc2 ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ WhileStatement condition MethodInvocation qualifier loc3 ^ ^ member hasNext_ter ^ ^ ^ ^ body BlockStatement statements LocalVariableDeclaration type ReferenceType name XYAnnotation_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer Cast type ReferenceType name XYAnnotation_ter ^ ^ ^ ^ expression MethodInvocation qualifier loc3 ^ ^ member next_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr ReferenceType name XYAnnotationBoundsInfo_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression MethodInvocation qualifier includedAnnotations_ter ^ ^ arguments MemberReference member loc4 ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer MethodInvocation qualifier includedAnnotations_ter ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc16 ^ ^ initializer MethodInvocation qualifier mappedDatasets_ter ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc16 ^ ^ initializer MethodInvocation qualifier mappedDatasets_ter ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc16 ^ ^ initializer MethodInvocation qualifier mappedDatasets_ter ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc16 ^ ^ initializer MethodInvocation qualifier mappedDatasets_ter ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc16 ^ ^ initializer MethodInvocation qualifier mappedDatasets_ter ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc16 ^ ^ initializer MethodInvocation qualifier mappedDatasets_ter ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc16 ^ ^ initializer MethodInvocation qualifier mappedDatasets_ter ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc16 ^ ^ initializer MethodInvocation qualifier mappedDatasets_ter ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc16 ^ ^ initializer MethodInvocation qualifier mappedDatasets_ter ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc16 ^ ^ initializer MethodInvocation qualifier mappedDatasets_ter ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc16 ^ ^ initializer MethodInvocation qualifier mappedDatasets_ter ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ ^ ', 'prob': [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 'mode': 0, 'line': 4493, 'isa': False, 'fl_score': 1}]
before@0 batch0 x: 0: root ^  ; []
after@0 batch0 x: 0: root ^  ; []
copynode 0:  root add ^ ^ ; ['root -> add']
copynode 0:  root modified ^ ^ ; ['root -> modified']
copynode 0:  root ReturnStatement ^ ^ ; ['root -> ReturnStatement']
copynode 0:  root ^ ; ['root -> End']
copynode 0:  root return_type ^ ^ ; ['root -> return_type']
copynode 0:  root StatementExpression ^ ^ ; ['root -> StatementExpression']
copynode 0:  root parameters ^ ^ ; ['root -> parameters']
copynode 0:  root IfStatement ^ ^ ; ['root -> IfStatement']
copynode 0:  root member-member getAnnotations_ter ^ ^  ^ ^ ; ['copy-member']
copynode 0:  root LocalVariableDeclaration ^ ^ ; ['root -> LocalVariableDeclaration']
before@1 batch0 x: -13.170207023620605: root LocalVariableDeclaration ^ ^  ; ['root -> LocalVariableDeclaration']
after@1 batch0 x: -13.170207023620605: root LocalVariableDeclaration ^ ^  ; ['root -> LocalVariableDeclaration']
copynode -0.9974701404571533:  root modified ^ member-member getAnnotations_ter ^ ^  ^ ^ ; ['root -> modified', 'copy-member']
copynode -0.4617169499397278:  root add ^ IfStatement ^ ^ ; ['root -> add', 'root -> IfStatement']
copynode -0.4617169499397278:  root add ^ StatementExpression ^ ^ ; ['root -> add', 'root -> StatementExpression']
copynode -0.4617169499397278:  root add ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter']
copynode -0.9974701404571533:  root modified ^ LocalVariableDeclaration ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration']
copynode -0.4617169499397278:  root add ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter']
copynode -0.4617169499397278:  root add ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> ContinueStatement_ter']
copynode -0.9974701404571533:  root modified ^ qualifier-qualifier loc1 ^ ^  ^ ^ ; ['root -> modified', 'copy-qualifier']
copynode -0.4617169499397278:  root add ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement']
copynode -0.4617169499397278:  root add ^ control ^ ^ ; ['root -> add', 'root -> control']
copynode -0.4617169499397278:  root add ^ WhileStatement ^ ^ ; ['root -> add', 'root -> WhileStatement']
copynode -0.9974701404571533:  root modified ^ ^ ; ['root -> modified', 'root -> End']
copynode -0.4617169499397278:  root add ^ LocalVariableDeclaration ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration']
copynode -0.9974701404571533:  root modified ^ StatementExpression ^ ^ ; ['root -> modified', 'root -> StatementExpression']
copynode -0.4617169499397278:  root add ^ AssertStatement ^ ^ ; ['root -> add', 'root -> AssertStatement']
copynode -7.650193691253662:  root ReturnStatement expression ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -0.9974701404571533:  root modified ^ control ^ ^ ; ['root -> modified', 'root -> control']
copynode -0.9974701404571533:  root modified ^ IfStatement ^ ^ ; ['root -> modified', 'root -> IfStatement']
copynode -9.8010892868042:  root return_type ReferenceType ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType']
copynode -0.9974701404571533:  root modified ^ ReturnStatement ^ ^ ; ['root -> modified', 'root -> ReturnStatement']
copynode -9.971068382263184:  root parameters FormalParameter ^ ^ ^ ; ['root -> parameters', 'parameters -> FormalParameter']
copynode -9.841168403625488:  root StatementExpression expression ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression']
copynode -10.276581764221191:  root IfStatement condition ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition']
copynode -10.352354049682617:  root member-member getAnnotations_ter ^ ^  unknown ^ ^ ^ ; ['copy-member', 'start -> unknown']
copynode -0.9974701404571533:  root modified ^ parameters ^ ^ ; ['root -> modified', 'root -> parameters']
copynode -0.9974701404571533:  root modified ^ unknown ^ ^ ; ['root -> modified', 'start -> unknown']
copynode -9.8010892868042:  root return_type BasicType ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType']
copynode -9.841168403625488:  root StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findRangeBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -9.841168403625488:  root StatementExpression expression MethodInvocation qualifier includedAnnotations_ter ^ ^ arguments MemberReference member loc4 ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -9.971068382263184:  root parameters ^ ^ ; ['root -> parameters', 'parameters -> End']
copynode -9.841168403625488:  root StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findDomainBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -9.841168403625488:  root StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findRangeBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -9.841168403625488:  root StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findDomainBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -10.352354049682617:  root member-member getAnnotations_ter ^ ^  meth0 ^ ^ ^ ; ['copy-member', 'member -> meth0']
copynode -13.170207023620605:  root LocalVariableDeclaration type ^ declarators ^ ^ ^ ; ['root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators']
copynode -10.352354049682617:  root member-member getAnnotations_ter ^ ^  get_ter ^ ^ ^ ; ['copy-member', 'member -> get_ter']
copynode -10.352354049682617:  root member-member getAnnotations_ter ^ ^  getName_ter ^ ^ ^ ; ['copy-member', 'member -> getName_ter']
copynode -13.170207023620605:  root LocalVariableDeclaration type ReferenceType name XYItemRenderer_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer MethodInvocation arguments MemberReference member loc0 ^ ^ ^ ^ member getRendererForDataset_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -9.971068382263184:  root parameters MemberReference ^ ^ ^ ; ['root -> parameters', 'parameters -> MemberReference']
copynode -10.352354049682617:  root member-member getAnnotations_ter ^ ^  findDomainBounds_ter ^ ^ ^ ; ['copy-member', 'copy-member']
copynode -10.352354049682617:  root member-member getAnnotations_ter ^ ^  findDomainBounds_ter ^ ^ ^ ; ['copy-member', 'copy-member']
copynode -13.170207023620605:  root LocalVariableDeclaration type ReferenceType name XYAnnotation_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer Cast type ReferenceType name XYAnnotation_ter ^ ^ ^ ^ expression MethodInvocation qualifier loc3 ^ ^ member next_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -10.352354049682617:  root member-member getAnnotations_ter ^ ^  toString_ter ^ ^ ^ ; ['copy-member', 'member -> toString_ter']
copynode -10.352354049682617:  root member-member getAnnotations_ter ^ ^  findRangeBounds_ter ^ ^ ^ ; ['copy-member', 'copy-member']
copynode -13.170207023620605:  root LocalVariableDeclaration type ReferenceType name XYDataset_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer Cast type ReferenceType name XYDataset_ter ^ ^ ^ ^ expression MethodInvocation qualifier loc16 ^ ^ member next_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -10.352354049682617:  root member-member getAnnotations_ter ^ ^  hasNext_ter ^ ^ ^ ; ['copy-member', 'copy-member']
copynode -10.352354049682617:  root member-member getAnnotations_ter ^ ^  findRangeBounds_ter ^ ^ ^ ; ['copy-member', 'copy-member']
copynode -13.170207023620605:  root LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer MethodInvocation qualifier loc2 ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -9.971068382263184:  root parameters InferredFormalParameter ^ ^ ^ ; ['root -> parameters', 'parameters -> InferredFormalParameter']
copynode -13.170207023620605:  root LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc16 ^ ^ initializer MethodInvocation qualifier mappedDatasets_ter ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -13.170207023620605:  root LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc16 ^ ^ initializer MethodInvocation qualifier mappedDatasets_ter ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -13.170207023620605:  root LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc16 ^ ^ initializer MethodInvocation qualifier mappedDatasets_ter ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -13.170207023620605:  root LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc16 ^ ^ initializer MethodInvocation qualifier mappedDatasets_ter ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -13.170207023620605:  root LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer MethodInvocation qualifier includedAnnotations_ter ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -9.971068382263184:  root parameters loc0 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -9.971068382263184:  root parameters loc1 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -9.971068382263184:  root parameters Cast ^ ^ ^ ; ['root -> parameters', 'parameters -> Cast']
copynode -9.971068382263184:  root parameters loc4 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -9.971068382263184:  root parameters loc16 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -9.971068382263184:  root parameters loc3 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -10.276581764221191:  root IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findDomainBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ else_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findDomainBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -10.276581764221191:  root IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findRangeBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ else_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findRangeBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -10.276581764221191:  root IfStatement condition MemberReference member isDomainAxis_ter ^ ^ ^ ^ then_statement BlockStatement statements IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findDomainBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ else_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findDomainBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ else_statement BlockStatement statements IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findRangeBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ else_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findRangeBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -10.276581764221191:  root IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements LocalVariableDeclaration type ReferenceType name XYItemRenderer_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer MethodInvocation arguments MemberReference member loc0 ^ ^ ^ ^ member getRendererForDataset_ter ^ ^ ^ ^ ^ ^ ^ IfStatement condition MemberReference member isDomainAxis_ter ^ ^ ^ ^ then_statement BlockStatement statements IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findDomainBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ else_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findDomainBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ else_statement BlockStatement statements IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findRangeBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ else_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findRangeBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer MethodInvocation qualifier loc2 ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ WhileStatement condition MethodInvocation qualifier loc3 ^ ^ member hasNext_ter ^ ^ ^ ^ body BlockStatement statements LocalVariableDeclaration type ReferenceType name XYAnnotation_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer Cast type ReferenceType name XYAnnotation_ter ^ ^ ^ ^ expression MethodInvocation qualifier loc3 ^ ^ member next_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr ReferenceType name XYAnnotationBoundsInfo_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression MethodInvocation qualifier includedAnnotations_ter ^ ^ arguments MemberReference member loc4 ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -9.8010892868042:  root return_type unknown ^ ^ ^ ; ['root -> return_type', 'start -> unknown']
copynode -10.276581764221191:  root IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr ReferenceType name XYAnnotationBoundsInfo_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression MethodInvocation qualifier includedAnnotations_ter ^ ^ arguments MemberReference member loc4 ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -9.841168403625488:  root StatementExpression unknown ^ ^ ^ ; ['root -> StatementExpression', 'start -> unknown']
copynode -10.276581764221191:  root IfStatement unknown ^ ^ ^ ; ['root -> IfStatement', 'start -> unknown']
copynode -7.650193691253662:  root ReturnStatement unknown ^ ^ ^ ; ['root -> ReturnStatement', 'start -> unknown']
copynode -10.276581764221191:  root IfStatement condition ^ then_statement ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition then_statement']
copynode -7.650193691253662:  root ReturnStatement loc4 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -7.650193691253662:  root ReturnStatement loc16 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -7.650193691253662:  root ReturnStatement loc16 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -7.650193691253662:  root ReturnStatement loc16 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -7.650193691253662:  root ReturnStatement loc5 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -7.650193691253662:  root ReturnStatement loc16 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -7.650193691253662:  root ReturnStatement loc3 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -7.650193691253662:  root ReturnStatement loc16 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -9.8010892868042:  root return_type loc3 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -10.276581764221191:  root IfStatement condition ^ then_statement ^ else_statement ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition then_statement else_statement']
copynode -9.8010892868042:  root return_type loc1 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.8010892868042:  root return_type loc4 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.8010892868042:  root return_type loc0 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.8010892868042:  root return_type loc16 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.8010892868042:  root return_type loc16 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.8010892868042:  root return_type loc2 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.841168403625488:  root StatementExpression label ^ expression ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> label expression']
copynode -9.841168403625488:  root StatementExpression loc16 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -9.841168403625488:  root StatementExpression loc2 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -10.276581764221191:  root IfStatement loc4 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
before@2 batch0 x: -33.13444995880127: root IfStatement loc4 ^ ^ ^  ; ['root -> IfStatement', 'copy-VariableDeclarator']
after@2 batch0 x: -33.13444995880127: root IfStatement loc4 ^ ^ ^  ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -1.147241473197937:  root modified ^ member-member getAnnotations_ter ^ ^  unknown ^ ^ ^ ; ['root -> modified', 'copy-member', 'start -> unknown']
copynode -1.4191386103630066:  root add ^ IfStatement condition ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition']
copynode -1.5510757565498352:  root add ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -2.2183616757392883:  root add ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> End']
copynode -3.3201591968536377:  root modified ^ LocalVariableDeclaration type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators']
copynode -3.602509319782257:  root add ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> End']
copynode -1.147241473197937:  root modified ^ member-member getAnnotations_ter ^ ^  meth0 ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> meth0']
copynode -1.5510757565498352:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findRangeBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -1.5510757565498352:  root add ^ StatementExpression expression MethodInvocation qualifier includedAnnotations_ter ^ ^ arguments MemberReference member loc4 ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -1.5510757565498352:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findDomainBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -1.5510757565498352:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findRangeBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -1.5510757565498352:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findDomainBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -4.6723087430000305:  root add ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> ContinueStatement_ter', 'root -> End']
copynode -5.544045269489288:  root add ^ WhileStatement condition ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition']
copynode -5.023510754108429:  root add ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -1.147241473197937:  root modified ^ member-member getAnnotations_ter ^ ^  findDomainBounds_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'copy-member']
copynode -1.147241473197937:  root modified ^ member-member getAnnotations_ter ^ ^  findRangeBounds_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'copy-member']
copynode -1.147241473197937:  root modified ^ member-member getAnnotations_ter ^ ^  findDomainBounds_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'copy-member']
copynode -6.051598310470581:  root modified ^ StatementExpression expression ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -4.730073928833008:  root modified ^ qualifier-qualifier loc1 ^ ^  loc0 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> loc0']
copynode -1.147241473197937:  root modified ^ member-member getAnnotations_ter ^ ^  findRangeBounds_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'copy-member']
copynode -1.147241473197937:  root modified ^ member-member getAnnotations_ter ^ ^  getName_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> getName_ter']
copynode -6.1160858273506165:  root add ^ AssertStatement condition ^ ^ ^ ; ['root -> add', 'root -> AssertStatement', 'AssertStatement -> condition']
copynode -1.147241473197937:  root modified ^ member-member getAnnotations_ter ^ ^  hasNext_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'copy-member']
copynode -5.120400249958038:  root add ^ control EnhancedForControl ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> EnhancedForControl']
copynode -4.730073928833008:  root modified ^ qualifier-qualifier loc1 ^ ^  unknown ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'start -> unknown']
copynode -4.730073928833008:  root modified ^ qualifier-qualifier loc1 ^ ^  loc1 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> loc1']
copynode -4.730073928833008:  root modified ^ qualifier-qualifier loc1 ^ ^  loc3 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> loc3']
copynode -1.147241473197937:  root modified ^ member-member getAnnotations_ter ^ ^  get_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> get_ter']
copynode -1.147241473197937:  root modified ^ member-member getAnnotations_ter ^ ^  add_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> add_ter']
copynode -2.2183616757392883:  root add ^ ReturnStatement_ter ^ StatementExpression ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> StatementExpression']
copynode -3.3201591968536377:  root modified ^ LocalVariableDeclaration modifiers ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators']
copynode -5.967858135700226:  root add ^ LocalVariableDeclaration type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators']
copynode -5.967858135700226:  root add ^ LocalVariableDeclaration type ReferenceType name XYItemRenderer_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer MethodInvocation arguments MemberReference member loc0 ^ ^ ^ ^ member getRendererForDataset_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -4.730073928833008:  root modified ^ qualifier-qualifier loc1 ^ ^  loc2 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> loc2']
copynode -4.730073928833008:  root modified ^ qualifier-qualifier loc1 ^ ^  loc4 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> loc4']
copynode -5.967858135700226:  root add ^ LocalVariableDeclaration type ReferenceType name XYAnnotation_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer Cast type ReferenceType name XYAnnotation_ter ^ ^ ^ ^ expression MethodInvocation qualifier loc3 ^ ^ member next_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -3.602509319782257:  root add ^ BreakStatement_ter ^ StatementExpression ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> StatementExpression']
copynode -2.2183616757392883:  root add ^ ReturnStatement_ter ^ IfStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> IfStatement']
copynode -8.250293016433716:  root modified ^ control EnhancedForControl ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> EnhancedForControl']
copynode -5.967858135700226:  root add ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer MethodInvocation qualifier loc2 ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -5.967858135700226:  root add ^ LocalVariableDeclaration type ReferenceType name XYDataset_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer Cast type ReferenceType name XYDataset_ter ^ ^ ^ ^ expression MethodInvocation qualifier loc16 ^ ^ member next_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -4.730073928833008:  root modified ^ qualifier-qualifier loc1 ^ ^  par0 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> par0']
copynode -2.2183616757392883:  root add ^ ReturnStatement_ter ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> BreakStatement_ter']
copynode -4.730073928833008:  root modified ^ qualifier-qualifier loc1 ^ ^  DatasetUtilities_ter ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'copy-qualifier']
copynode -7.9813045263290405:  root ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -4.730073928833008:  root modified ^ qualifier-qualifier loc1 ^ ^  mappedDatasets_ter ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'copy-qualifier']
copynode -2.2183616757392883:  root add ^ ReturnStatement_ter ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> ContinueStatement_ter']
copynode -4.730073928833008:  root modified ^ qualifier-qualifier loc1 ^ ^  mappedDatasets_ter ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'copy-qualifier']
copynode -3.3201591968536377:  root modified ^ LocalVariableDeclaration type ReferenceType name XYAnnotation_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer Cast type ReferenceType name XYAnnotation_ter ^ ^ ^ ^ expression MethodInvocation qualifier loc3 ^ ^ member next_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -9.081576585769653:  root modified ^ IfStatement condition ^ ^ ^ ; ['root -> modified', 'root -> IfStatement', 'IfStatement -> condition']
copynode -3.3201591968536377:  root modified ^ LocalVariableDeclaration type ReferenceType name XYItemRenderer_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer MethodInvocation arguments MemberReference member loc0 ^ ^ ^ ^ member getRendererForDataset_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -7.9813045263290405:  root ReturnStatement expression MemberReference ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference']
copynode -3.602509319782257:  root add ^ BreakStatement_ter ^ IfStatement ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> IfStatement']
copynode -5.967858135700226:  root add ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc16 ^ ^ initializer MethodInvocation qualifier mappedDatasets_ter ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -5.967858135700226:  root add ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc16 ^ ^ initializer MethodInvocation qualifier mappedDatasets_ter ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -5.967858135700226:  root add ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc16 ^ ^ initializer MethodInvocation qualifier mappedDatasets_ter ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -5.120400249958038:  root add ^ control ForControl ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> ForControl']
copynode -5.967858135700226:  root add ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc16 ^ ^ initializer MethodInvocation qualifier mappedDatasets_ter ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -2.2183616757392883:  root add ^ ReturnStatement_ter ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> ReturnStatement_ter']
copynode -3.3201591968536377:  root modified ^ LocalVariableDeclaration type ReferenceType name XYDataset_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer Cast type ReferenceType name XYDataset_ter ^ ^ ^ ^ expression MethodInvocation qualifier loc16 ^ ^ member next_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -5.967858135700226:  root add ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer MethodInvocation qualifier includedAnnotations_ter ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -4.6723087430000305:  root add ^ ContinueStatement_ter ^ StatementExpression ^ ^ ; ['root -> add', 'root -> ContinueStatement_ter', 'root -> StatementExpression']
copynode -3.602509319782257:  root add ^ BreakStatement_ter ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> BreakStatement_ter']
copynode -2.2183616757392883:  root add ^ ReturnStatement_ter ^ control ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> control']
copynode -7.9813045263290405:  root ReturnStatement expression MethodInvocation ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation']
copynode -3.3201591968536377:  root modified ^ LocalVariableDeclaration annotations ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> annotations type declarators']
copynode -3.602509319782257:  root add ^ BreakStatement_ter ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> ContinueStatement_ter']
copynode -10.039382219314575:  root modified ^ ReturnStatement expression ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -6.051598310470581:  root modified ^ StatementExpression expression MethodInvocation qualifier includedAnnotations_ter ^ ^ arguments MemberReference member loc4 ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -2.2183616757392883:  root add ^ ReturnStatement_ter ^ WhileStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> WhileStatement']
copynode -6.051598310470581:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findDomainBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -6.051598310470581:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findDomainBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -4.6723087430000305:  root add ^ ContinueStatement_ter ^ IfStatement ^ ^ ; ['root -> add', 'root -> ContinueStatement_ter', 'root -> IfStatement']
copynode -6.051598310470581:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findRangeBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -2.2183616757392883:  root add ^ ReturnStatement_ter ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> ReturnStatement']
copynode -10.200756251811981:  root StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -3.3201591968536377:  root modified ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer MethodInvocation qualifier loc2 ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -3.602509319782257:  root add ^ BreakStatement_ter ^ control ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> control']
copynode -3.602509319782257:  root add ^ BreakStatement_ter ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> ReturnStatement_ter']
copynode -6.051598310470581:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findRangeBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -10.0676509141922:  root parameters FormalParameter type ^ name ^ ^ ^ ^ ; ['root -> parameters', 'parameters -> FormalParameter', 'FormalParameter -> type name']
copynode -10.277197610237636:  root IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -10.881381273269653:  root modified ^ parameters FormalParameter ^ ^ ^ ; ['root -> modified', 'root -> parameters', 'parameters -> FormalParameter']
copynode -4.6723087430000305:  root add ^ ContinueStatement_ter ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> ContinueStatement_ter', 'root -> BreakStatement_ter']
copynode -10.471819840371609:  root member-member getAnnotations_ter ^ ^  unknown ^ ^ ^ ; ['copy-member', 'start -> unknown', 'root -> End']
copynode -3.602509319782257:  root add ^ BreakStatement_ter ^ WhileStatement ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> WhileStatement']
copynode -6.1160858273506165:  root add ^ AssertStatement condition ^ value ^ ^ ^ ; ['root -> add', 'root -> AssertStatement', 'AssertStatement -> condition value']
copynode -10.0676509141922:  root parameters FormalParameter modifiers ^ type ^ name ^ ^ ^ ^ ; ['root -> parameters', 'parameters -> FormalParameter', 'FormalParameter -> modifiers type name']
copynode -4.6723087430000305:  root add ^ ContinueStatement_ter ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> ContinueStatement_ter', 'root -> ContinueStatement_ter']
copynode -5.120400249958038:  root add ^ control ForControl_ter ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> ForControl_ter']
copynode -5.544045269489288:  root add ^ WhileStatement condition MethodInvocation qualifier loc3 ^ ^ member hasNext_ter ^ ^ ^ ^ body BlockStatement statements LocalVariableDeclaration type ReferenceType name XYAnnotation_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer Cast type ReferenceType name XYAnnotation_ter ^ ^ ^ ^ expression MethodInvocation qualifier loc3 ^ ^ member next_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr ReferenceType name XYAnnotationBoundsInfo_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression MethodInvocation qualifier includedAnnotations_ter ^ ^ arguments MemberReference member loc4 ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'copy-WhileStatement']
copynode -2.2183616757392883:  root add ^ ReturnStatement_ter ^ DoStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> DoStatement']
copynode -3.602509319782257:  root add ^ BreakStatement_ter ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> ReturnStatement']
copynode -7.9813045263290405:  root ReturnStatement expression This_ter ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This_ter']
copynode -10.277197610237636:  root IfStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation']
copynode -10.200756251811981:  root StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -10.471819840371609:  root member-member getAnnotations_ter ^ ^  unknown ^ ^ StatementExpression ^ ^ ; ['copy-member', 'start -> unknown', 'root -> StatementExpression']
before@3 batch0 x: -11.471139036118984: root member-member getAnnotations_ter ^ ^  unknown ^ ^ StatementExpression ^ ^  ; ['copy-member', 'start -> unknown', 'root -> StatementExpression']
after@3 batch0 x: -11.471139036118984: root member-member getAnnotations_ter ^ ^  unknown ^ ^ StatementExpression ^ ^  ; ['copy-member', 'start -> unknown', 'root -> StatementExpression']
copynode -1.2812925428152084:  root modified ^ member-member getAnnotations_ter ^ ^  unknown ^ ^ ^ ; ['root -> modified', 'copy-member', 'start -> unknown', 'root -> End']
copynode -1.4195698237163015:  root add ^ IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -1.8796811997890472:  root add ^ StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -1.4195698237163015:  root add ^ IfStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation']
copynode -1.8796811997890472:  root add ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -3.352771744132042:  root modified ^ LocalVariableDeclaration type ReferenceType ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType']
copynode -4.055058121681213:  root modified ^ member-member getAnnotations_ter ^ ^  meth0 ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> meth0', 'root -> End']
copynode -4.139332115650177:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findRangeBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
copynode -1.4195698237163015:  root add ^ IfStatement condition MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference']
copynode -4.389221489429474:  root add ^ StatementExpression expression MethodInvocation qualifier includedAnnotations_ter ^ ^ arguments MemberReference member loc4 ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
copynode -4.498901665210724:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findDomainBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
copynode -4.584650099277496:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findRangeBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
copynode -4.648189604282379:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findDomainBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
copynode -1.8796811997890472:  root add ^ StatementExpression expression MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference']
copynode -1.4195698237163015:  root add ^ IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr ReferenceType name XYAnnotationBoundsInfo_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -6.026625990867615:  root modified ^ member-member getAnnotations_ter ^ ^  findDomainBounds_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'copy-member', 'root -> End']
copynode -1.4195698237163015:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -6.082484602928162:  root modified ^ member-member getAnnotations_ter ^ ^  findRangeBounds_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'copy-member', 'root -> End']
copynode -6.085488677024841:  root modified ^ member-member getAnnotations_ter ^ ^  findDomainBounds_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'copy-member', 'root -> End']
copynode -5.561731066554785:  root add ^ WhileStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> BinaryOperation']
copynode -6.139348030090332:  root modified ^ qualifier-qualifier loc1 ^ ^  loc0 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> loc0', 'root -> End']
copynode -6.142781615257263:  root modified ^ member-member getAnnotations_ter ^ ^  findRangeBounds_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'copy-member', 'root -> End']
copynode -1.4195698237163015:  root add ^ IfStatement condition MemberReference member isDomainAxis_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -6.152685523033142:  root modified ^ member-member getAnnotations_ter ^ ^  getName_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> getName_ter', 'root -> End']
copynode -1.4195698237163015:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -1.4195698237163015:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -5.870627701282501:  root add ^ ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -6.458032011985779:  root modified ^ member-member getAnnotations_ter ^ ^  hasNext_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'copy-member', 'root -> End']
copynode -6.458871781826019:  root add ^ control EnhancedForControl var ^ iterable ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> EnhancedForControl', 'EnhancedForControl -> var iterable']
copynode -6.120189435780048:  root modified ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -6.676316261291504:  root modified ^ qualifier-qualifier loc1 ^ ^  unknown ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'start -> unknown', 'root -> End']
copynode -6.772713661193848:  root modified ^ qualifier-qualifier loc1 ^ ^  loc1 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> loc1', 'root -> End']
copynode -6.773074150085449:  root modified ^ qualifier-qualifier loc1 ^ ^  loc3 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> loc3', 'root -> End']
copynode -6.323804274201393:  root add ^ AssertStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> AssertStatement', 'AssertStatement -> condition', 'condition -> BinaryOperation']
copynode -6.965601801872253:  root modified ^ member-member getAnnotations_ter ^ ^  get_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> get_ter', 'root -> End']
copynode -6.968197226524353:  root modified ^ member-member getAnnotations_ter ^ ^  add_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> add_ter', 'root -> End']
copynode -5.561731066554785:  root add ^ WhileStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> MethodInvocation']
copynode -1.8796811997890472:  root add ^ StatementExpression expression This ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This']
copynode -6.120189435780048:  root modified ^ StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -1.4195698237163015:  root add ^ IfStatement condition MethodInvocation qualifier loc3 ^ ^ member hasNext_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -5.870627701282501:  root add ^ ReturnStatement expression MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference']
copynode -7.334151029586792:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'modifiers -> final_ter']
copynode -7.540646255016327:  root add ^ LocalVariableDeclaration type ReferenceType ^ ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType']
copynode -1.8796811997890472:  root add ^ StatementExpression expression SuperMethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> SuperMethodInvocation']
copynode -6.972019970417023:  root add ^ ReturnStatement_ter ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -5.561731066554785:  root add ^ WhileStatement condition MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> MemberReference']
copynode -1.4195698237163015:  root add ^ IfStatement condition Literal ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> Literal']
copynode -7.807009696960449:  root modified ^ qualifier-qualifier loc1 ^ ^  loc2 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> loc2', 'root -> End']
copynode -7.922858238220215:  root modified ^ qualifier-qualifier loc1 ^ ^  loc4 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> loc4', 'root -> End']
copynode -4.389221489429474:  root add ^ StatementExpression expression MethodInvocation qualifier includedAnnotations_ter ^ ^ arguments MemberReference member loc4 ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> StatementExpression']
copynode -8.119229137897491:  root add ^ ReturnStatement_ter ^ IfStatement condition ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> IfStatement', 'IfStatement -> condition']
copynode -6.323804274201393:  root add ^ AssertStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> AssertStatement', 'AssertStatement -> condition', 'condition -> MethodInvocation']
copynode -4.498901665210724:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findDomainBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> StatementExpression']
copynode -6.323804274201393:  root add ^ AssertStatement condition MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> AssertStatement', 'AssertStatement -> condition', 'condition -> MemberReference']
copynode -8.277332747355103:  root modified ^ control EnhancedForControl var ^ iterable ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> EnhancedForControl', 'EnhancedForControl -> var iterable']
copynode -4.584650099277496:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findRangeBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> StatementExpression']
copynode -7.7258952260017395:  root add ^ LocalVariableDeclaration type ReferenceType name XYItemRenderer_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer MethodInvocation arguments MemberReference member loc0 ^ ^ ^ ^ member getRendererForDataset_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration', 'root -> End']
copynode -4.648189604282379:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findDomainBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> StatementExpression']
copynode -4.139332115650177:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findRangeBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> StatementExpression']
copynode -8.434388160705566:  root modified ^ qualifier-qualifier loc1 ^ ^  par0 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> par0', 'root -> End']
copynode -7.943983376026154:  root add ^ LocalVariableDeclaration type ReferenceType name XYAnnotation_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer Cast type ReferenceType name XYAnnotation_ter ^ ^ ^ ^ expression MethodInvocation qualifier loc3 ^ ^ member next_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration', 'root -> End']
copynode -8.638201534748077:  root add ^ ReturnStatement_ter ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> BreakStatement_ter', 'root -> End']
copynode -8.68031644821167:  root modified ^ qualifier-qualifier loc1 ^ ^  DatasetUtilities_ter ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'copy-qualifier', 'root -> End']
copynode -5.870627701282501:  root add ^ ReturnStatement expression This_ter ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This_ter']
copynode -8.814887940883636:  root ReturnStatement expression Literal value ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value']
copynode -8.350906670093536:  root add ^ LocalVariableDeclaration type ReferenceType name XYDataset_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer Cast type ReferenceType name XYDataset_ter ^ ^ ^ ^ expression MethodInvocation qualifier loc16 ^ ^ member next_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration', 'root -> End']
copynode -8.011557877063751:  root add ^ BreakStatement_ter ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -6.972019970417023:  root add ^ ReturnStatement_ter ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findRangeBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -8.301210701465607:  root add ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer MethodInvocation qualifier loc2 ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration', 'root -> End']
copynode -8.894975185394287:  root modified ^ qualifier-qualifier loc1 ^ ^  mappedDatasets_ter ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'copy-qualifier', 'root -> End']
copynode -8.90599137544632:  root add ^ ReturnStatement_ter ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> ContinueStatement_ter', 'root -> End']
copynode -8.965833187103271:  root modified ^ qualifier-qualifier loc1 ^ ^  mappedDatasets_ter ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'copy-qualifier', 'root -> End']
copynode -8.979418516159058:  root modified ^ LocalVariableDeclaration type ReferenceType name XYAnnotation_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer Cast type ReferenceType name XYAnnotation_ter ^ ^ ^ ^ expression MethodInvocation qualifier loc3 ^ ^ member next_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration', 'root -> End']
copynode -7.7258952260017395:  root add ^ LocalVariableDeclaration type ReferenceType name XYItemRenderer_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer MethodInvocation arguments MemberReference member loc0 ^ ^ ^ ^ member getRendererForDataset_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration', 'root -> StatementExpression']
copynode -1.8796811997890472:  root add ^ StatementExpression expression ClassCreator ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> ClassCreator']
copynode -4.389221489429474:  root add ^ StatementExpression expression MethodInvocation qualifier includedAnnotations_ter ^ ^ arguments MemberReference member loc4 ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ IfStatement ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> IfStatement']
copynode -9.086016416549683:  root modified ^ LocalVariableDeclaration type ReferenceType name XYItemRenderer_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer MethodInvocation arguments MemberReference member loc0 ^ ^ ^ ^ member getRendererForDataset_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration', 'root -> End']
copynode -4.498901665210724:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findDomainBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ IfStatement ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> IfStatement']
copynode -5.870627701282501:  root add ^ ReturnStatement expression MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation']
copynode -7.943983376026154:  root add ^ LocalVariableDeclaration type ReferenceType name XYAnnotation_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer Cast type ReferenceType name XYAnnotation_ter ^ ^ ^ ^ expression MethodInvocation qualifier loc3 ^ ^ member next_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration', 'root -> StatementExpression']
copynode -6.972019970417023:  root add ^ ReturnStatement_ter ^ StatementExpression expression MethodInvocation qualifier includedAnnotations_ter ^ ^ arguments MemberReference member loc4 ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -9.104410171508789:  root ReturnStatement expression MemberReference member ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member']
copynode -4.648189604282379:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findDomainBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ IfStatement ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> IfStatement']
copynode -9.24863749742508:  root add ^ BreakStatement_ter ^ IfStatement condition ^ ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> IfStatement', 'IfStatement -> condition']
copynode -4.584650099277496:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findRangeBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ IfStatement ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> IfStatement']
copynode -4.139332115650177:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findRangeBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ IfStatement ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> IfStatement']
copynode -6.972019970417023:  root add ^ ReturnStatement_ter ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findDomainBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -6.972019970417023:  root add ^ ReturnStatement_ter ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findRangeBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -1.8796811997890472:  root add ^ StatementExpression expression Cast ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Cast']
copynode -9.539538145065308:  root modified ^ LocalVariableDeclaration type ReferenceType name XYDataset_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer Cast type ReferenceType name XYDataset_ter ^ ^ ^ ^ expression MethodInvocation qualifier loc16 ^ ^ member next_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration', 'root -> End']
copynode -9.537979900836945:  root add ^ ReturnStatement_ter ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> ReturnStatement_ter', 'root -> End']
copynode -6.972019970417023:  root add ^ ReturnStatement_ter ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member findDomainBounds_ter ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -8.301210701465607:  root add ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer MethodInvocation qualifier loc2 ^ ^ member loc16 ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration', 'root -> StatementExpression']
copynode -9.081828625989147:  root modified ^ IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> modified', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -6.120189435780048:  root modified ^ StatementExpression expression MemberReference ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference']
before@4 batch0 x: -9.618845231831074: root modified ^ StatementExpression expression MemberReference ^ ^ ^ ^  ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference']
after@4 batch0 x: -9.618845231831074: root modified ^ StatementExpression expression MemberReference ^ ^ ^ ^  ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference']
copynode -1.9458502268535085:  root add ^ IfStatement condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -2.3283592760562897:  root add ^ StatementExpression expression MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -3.0693051517009735:  root add ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -3.3529827072197804:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -2.6599539255839773:  root add ^ IfStatement condition MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -2.3283592760562897:  root add ^ StatementExpression expression MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -2.6599539255839773:  root add ^ IfStatement condition MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -2.6599539255839773:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member']
copynode -4.194597098801751:  root add ^ IfStatement condition MemberReference member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member']
copynode -2.3283592760562897:  root add ^ StatementExpression expression MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -5.004558175802231:  root add ^ StatementExpression expression MemberReference postfix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member']
copynode -4.194597098801751:  root add ^ IfStatement condition MemberReference prefix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member']
copynode -2.6599539255839773:  root add ^ IfStatement condition MethodInvocation qualifier ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier selectors member']
copynode -2.6599539255839773:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member']
copynode -2.3283592760562897:  root add ^ StatementExpression expression MethodInvocation member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member']
copynode -2.6599539255839773:  root add ^ IfStatement condition MethodInvocation member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member']
copynode -5.732496592972893:  root add ^ IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr ReferenceType name XYAnnotationBoundsInfo_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition', 'root -> End']
copynode -6.122022535651922:  root add ^ WhileStatement condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -2.6599539255839773:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ qualifier ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier selectors member']
copynode -3.3529827072197804:  root modified ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -6.055740687821526:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition', 'root -> End']
copynode -2.3283592760562897:  root add ^ StatementExpression expression MethodInvocation qualifier ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors member']
copynode -6.327800095081329:  root add ^ ReturnStatement expression Literal value ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value']
copynode -6.151001307938714:  root add ^ IfStatement condition MemberReference member isDomainAxis_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition', 'root -> End']
copynode -2.6599539255839773:  root add ^ IfStatement condition MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -6.1586845850688405:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition', 'root -> End']
copynode -2.6599539255839773:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member']
copynode -6.252607676957268:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition', 'root -> End']
copynode -6.554909057915211:  root modified ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -4.194597098801751:  root add ^ IfStatement condition MemberReference qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> qualifier member']
copynode -3.3529827072197804:  root modified ^ LocalVariableDeclaration type ReferenceType name XYAnnotation_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -3.3529827072197804:  root modified ^ LocalVariableDeclaration type ReferenceType name ^ arguments ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'ReferenceType -> name arguments']
copynode -3.3529827072197804:  root modified ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -6.8912724405527115:  root add ^ AssertStatement condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> AssertStatement', 'AssertStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -3.3529827072197804:  root modified ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -3.3529827072197804:  root modified ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -3.3529827072197804:  root modified ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -7.1674133241176605:  root add ^ StatementExpression expression This selectors ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors']
copynode -3.3529827072197804:  root modified ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -7.27448321133852:  root modified ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'copy-MethodInvocation']
copynode -7.4065446481108665:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'modifiers -> final_ter', 'type -> ReferenceType']
copynode -2.6599539255839773:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators arguments member']
copynode -3.3529827072197804:  root modified ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -7.373524963855743:  root add ^ ReturnStatement expression MemberReference member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member']
copynode -7.355963084672112:  root add ^ IfStatement condition MethodInvocation qualifier loc3 ^ ^ member hasNext_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition', 'root -> End']
copynode -2.3283592760562897:  root add ^ StatementExpression expression MethodInvocation selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> selectors member']
copynode -5.732496592972893:  root add ^ IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr ReferenceType name XYAnnotationBoundsInfo_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition', 'root -> StatementExpression']
copynode -2.3283592760562897:  root add ^ StatementExpression expression MethodInvocation qualifier ^ selectors ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors arguments member']
copynode -6.055740687821526:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition', 'root -> StatementExpression']
copynode -7.093496408313513:  root add ^ WhileStatement condition MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -4.194597098801751:  root add ^ IfStatement condition MemberReference prefix_operators ^ qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -6.1586845850688405:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition', 'root -> StatementExpression']
copynode -6.151001307938714:  root add ^ IfStatement condition MemberReference member isDomainAxis_ter ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition', 'root -> StatementExpression']
copynode -7.714992489665747:  root add ^ WhileStatement condition MemberReference member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member']
copynode -6.252607676957268:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition', 'root -> StatementExpression']
copynode -7.555265039205551:  root add ^ StatementExpression expression SuperMethodInvocation arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> SuperMethodInvocation', 'SuperMethodInvocation -> arguments member']
copynode -7.703264474868774:  root add ^ ReturnStatement_ter ^ StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -8.156681910157204:  root add ^ AssertStatement condition MemberReference member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> AssertStatement', 'AssertStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member']
copynode -7.7896002268535085:  root add ^ IfStatement condition Literal value ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> Literal', 'Literal -> value']
copynode -7.093496408313513:  root add ^ WhileStatement condition MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -5.004558175802231:  root add ^ StatementExpression expression MemberReference prefix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> prefix_operators member']
copynode -7.703264474868774:  root add ^ ReturnStatement_ter ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -7.555265039205551:  root add ^ StatementExpression expression SuperMethodInvocation member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> SuperMethodInvocation', 'SuperMethodInvocation -> member']
copynode -6.489136677235365:  root add ^ control EnhancedForControl var VariableDeclaration ^ ^ iterable ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> EnhancedForControl', 'EnhancedForControl -> var iterable', 'var -> VariableDeclaration']
copynode -7.714992489665747:  root add ^ WhileStatement condition MemberReference prefix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member']
copynode -8.119898185366765:  root add ^ ReturnStatement_ter ^ IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -8.76283198595047:  root add ^ ReturnStatement expression This_ter ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This_ter', 'root -> End']
copynode -1.9458502268535085:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation']
copynode -5.004558175802231:  root add ^ StatementExpression expression MemberReference selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> selectors member']
before@5 batch0 x: -8.824945509433746: root add ^ LocalVariableDeclaration type ReferenceType name XYDataset_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer Cast type ReferenceType name XYDataset_ter ^ ^ ^ ^ expression MethodInvocation qualifier loc16 ^ ^ member next_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration', 'root -> End']
after@5 batch0 x: -8.824945509433746: root add ^ LocalVariableDeclaration type ReferenceType name XYDataset_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer Cast type ReferenceType name XYDataset_ter ^ ^ ^ ^ expression MethodInvocation qualifier loc16 ^ ^ member next_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration', 'root -> End']
copynode -1.9520955121261068:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -1.9520955121261068:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -3.0696025634824764:  root add ^ StatementExpression expression Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
copynode -3.8230783416802296:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator']
copynode -3.0696025634824764:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -3.835087153885979:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1']
copynode -2.746298998594284:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -4.592781517480034:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member', 'prefix_operators -> !_ter']
copynode -1.9520955121261068:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter']
copynode -2.746298998594284:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1']
copynode -5.110178325150628:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter']
copynode -4.905062053177971:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -2.746298998594284:  root add ^ StatementExpression expression MethodInvocation qualifier loc0 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc0']
copynode -5.294334742997307:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member', 'prefix_operators -> !_ter']
copynode -2.746298998594284:  root add ^ StatementExpression expression MethodInvocation qualifier includedAnnotations_ter ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier']
copynode -3.9398548901081085:  root add ^ StatementExpression expression MethodInvocation qualifier loc0 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc0']
copynode -1.9520955121261068:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter']
copynode -5.4877008497715:  root add ^ StatementExpression expression MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -3.9398548901081085:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1']
copynode -2.746298998594284:  root add ^ StatementExpression expression MethodInvocation qualifier Range_ter ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier']
copynode -2.746298998594284:  root add ^ StatementExpression expression MethodInvocation qualifier loc2 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc2']
copynode -1.9520955121261068:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter']
copynode -5.183794352982659:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> loc1']
copynode -4.223257515404839:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -5.095252327620983:  root add ^ StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> ++_ter']
copynode -3.0696025634824764:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -5.0371085703372955:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -4.223257515404839:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1']
copynode -1.9520955121261068:  root add ^ IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> instanceof_ter']
copynode -3.9398548901081085:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
copynode -2.746298998594284:  root add ^ StatementExpression expression MethodInvocation qualifier loc3 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc3']
copynode -5.904816005204339:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -3.0696025634824764:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -5.095252327620983:  root add ^ StatementExpression expression MemberReference postfix_operators --_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> --_ter']
copynode -3.0696025634824764:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -6.265228602860589:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier selectors member', 'prefix_operators -> !_ter']
copynode -2.746298998594284:  root add ^ StatementExpression expression MethodInvocation qualifier mappedDatasets_ter ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier']
copynode -3.835087153885979:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
copynode -2.746298998594284:  root add ^ StatementExpression expression MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier']
copynode -6.334103021305054:  root add ^ ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.44562968966784:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member', 'prefix_operators -> !_ter']
copynode -1.9520955121261068:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter']
copynode -2.746298998594284:  root add ^ StatementExpression expression MethodInvocation qualifier Range_ter ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier']
copynode -4.223257515404839:  root add ^ IfStatement condition MethodInvocation qualifier loc2 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc2']
copynode -6.2691347076470265:  root modified ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator']
copynode -1.9520955121261068:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter']
copynode -6.144592929631472:  root add ^ WhileStatement condition BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -3.835087153885979:  root add ^ IfStatement condition MethodInvocation qualifier loc2 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc2']
copynode -5.0371085703372955:  root add ^ StatementExpression expression MethodInvocation arguments MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MethodInvocation']
copynode -4.223257515404839:  root add ^ IfStatement condition MethodInvocation qualifier loc0 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc0']
copynode -4.223257515404839:  root add ^ IfStatement condition MethodInvocation qualifier Range_ter ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier']
copynode -3.9398548901081085:  root add ^ StatementExpression expression MethodInvocation qualifier loc3 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc3']
copynode -3.835087153885979:  root add ^ IfStatement condition MethodInvocation qualifier loc0 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc0']
copynode -6.883888192372979:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ arguments ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'ReferenceType -> name arguments', 'copy-name']
copynode -6.556873707799241:  root modified ^ StatementExpression expression Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
copynode -7.335253689438105:  root modified ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'copy-MethodInvocation', 'root -> End']
copynode -6.365088078950066:  root add ^ IfStatement condition MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -3.9398548901081085:  root add ^ StatementExpression expression MethodInvocation qualifier Range_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'copy-qualifier']
copynode -3.9398548901081085:  root add ^ StatementExpression expression MethodInvocation qualifier loc2 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc2']
copynode -7.422941539261956:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators arguments member', 'prefix_operators -> !_ter']
copynode -6.2691347076470265:  root modified ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-declarators']
copynode -6.875606723027886:  root modified ^ LocalVariableDeclaration type ReferenceType name XYAnnotation_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator']
copynode -6.893352694707573:  root modified ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator']
copynode -7.1807462646538625:  root modified ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator']
copynode -6.714475963090081:  root add ^ IfStatement condition MemberReference qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> qualifier member', 'start -> unknown']
copynode -6.987415499883355:  root modified ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator']
copynode -7.607054382562637:  root add ^ StatementExpression expression MethodInvocation selectors MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> selectors member', 'selectors -> MethodInvocation']
copynode -3.9398548901081085:  root add ^ StatementExpression expression MethodInvocation qualifier mappedDatasets_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'copy-qualifier']
copynode -6.929338686168194:  root add ^ AssertStatement condition BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> AssertStatement', 'AssertStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -6.144592929631472:  root add ^ WhileStatement condition BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -7.12866801758355:  root modified ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator']
before@6 batch0 x: -7.643838889795006: root modified ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator']
after@6 batch0 x: -7.643838889795006: root modified ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator']
copynode -2.400169972155709:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -3.7275182748853695:  root add ^ StatementExpression expression Assignment expressionl MemberReference member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member']
copynode -3.850529311122955:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer']
copynode -3.6019159590941854:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -4.286236975167412:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown']
copynode -4.25903887997265:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation']
copynode -2.400169972155709:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation']
copynode -4.627526048396248:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation']
copynode -4.317247718572617:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
copynode -3.6019159590941854:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation']
copynode -4.594223200401757:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier loc1 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member', 'prefix_operators -> !_ter', 'qualifier -> loc1']
copynode -5.115361363918055:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown']
copynode -5.488492280244827:  root add ^ StatementExpression expression MethodInvocation qualifier loc0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc0', 'start -> unknown']
copynode -5.506120881065726:  root add ^ StatementExpression expression MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> End']
copynode -5.506539613008499:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown']
copynode -4.830791920423508:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference']
copynode -5.642779145215172:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ selectors MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> loc1', 'selectors -> MethodInvocation']
copynode -5.7144783437252045:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.147356767032761:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -5.62732935306849:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation']
copynode -5.29579970240593:  root add ^ StatementExpression expression MethodInvocation qualifier loc0 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc0', 'arguments -> MemberReference']
copynode -5.505923036311287:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference']
copynode -5.712383105856134:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation']
copynode -5.778648856852669:  root add ^ IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> instanceof_ter', 'operandl -> MemberReference']
copynode -5.39971324801445:  root add ^ StatementExpression expression MethodInvocation qualifier includedAnnotations_ter ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier', 'arguments -> MemberReference']
copynode -5.558418244123459:  root add ^ StatementExpression expression MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier', 'arguments -> MemberReference']
copynode -5.147356767032761:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> StatementExpression']
copynode -5.699685864150524:  root add ^ StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> ++_ter', 'start -> unknown']
copynode -4.317247718572617:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MethodInvocation']
copynode -6.061315372091485:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation']
copynode -5.625053852796555:  root add ^ StatementExpression expression MethodInvocation qualifier loc2 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc2', 'arguments -> MemberReference']
copynode -6.418235335033387:  root add ^ ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -4.830791920423508:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation']
copynode -6.447048571135383:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown']
copynode -4.25903887997265:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MemberReference ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MemberReference']
copynode -4.317247718572617:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments Literal ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> Literal']
copynode -6.229125812154962:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation']
copynode -5.941217876796145:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> End']
copynode -5.795231312513351:  root add ^ StatementExpression expression MethodInvocation qualifier loc3 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc3', 'arguments -> MemberReference']
copynode -5.697881433938164:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
copynode -4.627526048396248:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation']
copynode -6.662079520421685:  root modified ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer']
copynode -5.296406539913733:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier loc1 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member', 'prefix_operators -> !_ter', 'qualifier -> loc1']
copynode -2.400169972155709:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'copy-operandl']
copynode -5.505923036311287:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MethodInvocation']
copynode -5.776931498025078:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference']
copynode -4.830791920423508:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments Literal ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> Literal']
copynode -2.400169972155709:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'copy-operandl']
copynode -3.7275182748853695:  root add ^ StatementExpression expression Assignment expressionl MemberReference qualifier ^ member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> qualifier member']
copynode -6.166801266372204:  root add ^ StatementExpression expression MemberReference postfix_operators --_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> --_ter', 'start -> unknown']
copynode -5.296406539913733:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member', 'prefix_operators -> !_ter', 'start -> unknown']
copynode -2.400169972155709:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'copy-operandl']
copynode -6.26691767439479:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier loc1 ^ ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier selectors member', 'prefix_operators -> !_ter', 'qualifier -> loc1']
copynode -6.814536426041741:  root add ^ IfStatement condition MethodInvocation qualifier loc2 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc2', 'start -> unknown']
copynode -6.447136405680794:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference']
copynode -5.29579970240593:  root add ^ StatementExpression expression MethodInvocation qualifier loc0 ^ ^ arguments MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc0', 'arguments -> MethodInvocation']
copynode -6.300004690885544:  root add ^ StatementExpression expression MethodInvocation qualifier mappedDatasets_ter ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier', 'arguments -> MemberReference']
copynode -6.390851706266403:  root add ^ StatementExpression expression MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier', 'arguments -> MemberReference']
copynode -4.594223200401757:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member', 'prefix_operators -> !_ter', 'start -> unknown']
copynode -4.627526048396248:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference']
copynode -6.792769718915224:  root add ^ WhileStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -4.25903887997265:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value Literal ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> Literal']
copynode -5.941217876796145:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> StatementExpression']
copynode -7.212104111909866:  root add ^ StatementExpression expression MethodInvocation qualifier loc3 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc3', 'start -> unknown']
copynode -6.79064607975306:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference']
copynode -7.212140176270623:  root add ^ IfStatement condition MethodInvocation qualifier loc0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc0', 'start -> unknown']
copynode -2.400169972155709:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'copy-operandl']
copynode -7.30056223156862:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member']
copynode -6.485366553068161:  root add ^ StatementExpression expression MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier', 'arguments -> MemberReference']
copynode -5.558418244123459:  root add ^ StatementExpression expression MethodInvocation qualifier Range_ter ^ ^ arguments MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier', 'arguments -> MethodInvocation']
copynode -5.625053852796555:  root add ^ StatementExpression expression MethodInvocation qualifier loc2 ^ ^ arguments MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc2', 'arguments -> MethodInvocation']
before@7 batch0 x: -7.33537779400649: root modified ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'copy-MethodInvocation', 'root -> End']
after@7 batch0 x: -7.33537779400649: root modified ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'copy-MethodInvocation', 'root -> End']
copynode -2.5989434754592367:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -3.8614028216252336:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2']
copynode -3.950106594536919:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -3.7753268996893894:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -4.912300232623238:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -4.500841259461595:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -5.006821304559708:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -4.384731773112435:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'root -> End']
copynode -5.2048251024098136:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member', 'prefix_operators -> !_ter', 'qualifier -> loc1', 'start -> unknown']
copynode -4.384731773112435:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'root -> StatementExpression']
copynode -4.528196219180245:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -5.322011814743746:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown', 'root -> End']
copynode -5.525989297777414:  root add ^ StatementExpression expression MethodInvocation qualifier loc0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc0', 'start -> unknown', 'root -> End']
copynode -5.542695242911577:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'root -> End']
copynode -5.563881546258926:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -4.528196219180245:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation']
copynode -5.992514077399392:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.9353249704581685:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -5.164429668162484:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -5.9897312223911285:  root add ^ StatementExpression expression MethodInvocation qualifier loc0 ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc0', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.702726423565764:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ selectors MethodInvocation arguments ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> loc1', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -6.117863122199196:  root add ^ IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> instanceof_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -4.384731773112435:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'root -> ReturnStatement_ter']
copynode -4.500841259461595:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -6.181086212396622:  root add ^ StatementExpression expression MethodInvocation qualifier includedAnnotations_ter ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.2621462643146515:  root add ^ StatementExpression expression MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.313324265182018:  root add ^ StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> ++_ter', 'start -> unknown', 'root -> End']
copynode -6.402991563081741:  root add ^ StatementExpression expression MethodInvocation qualifier loc2 ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc2', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.308116931293625:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -6.5401619374752045:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments Literal value ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> Literal', 'Literal -> value']
copynode -6.016616686683847:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -6.592762086365838:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.568980485200882:  root add ^ StatementExpression expression MethodInvocation qualifier loc3 ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc3', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.516451075178338:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MemberReference member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MemberReference', 'MemberReference -> member']
copynode -6.670808219249011:  root modified ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2']
copynode -6.817856520414352:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments Literal value ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> Literal', 'Literal -> value']
copynode -6.508544165815692:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown', 'root -> End']
copynode -5.702726423565764:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ selectors MethodInvocation member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> loc1', 'selectors -> MethodInvocation', 'MethodInvocation -> member']
copynode -6.849891535937786:  root add ^ StatementExpression expression MemberReference postfix_operators --_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> --_ter', 'start -> unknown', 'root -> End']
copynode -6.94556066748919:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.374132230383111:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -6.931895761343185:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier loc1 ^ ^ selectors MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier selectors member', 'prefix_operators -> !_ter', 'qualifier -> loc1', 'selectors -> MethodInvocation']
copynode -6.812436196778435:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.968857020139694:  root add ^ StatementExpression expression MethodInvocation qualifier mappedDatasets_ter ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -4.528196219180245:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier loc2 ^ ^ member loc16 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation']
copynode -6.3481641709804535:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments MethodInvocation qualifier ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -7.014644831418991:  root add ^ StatementExpression expression MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -7.095757115632296:  root add ^ WhileStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -7.098409845930291:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value Literal value ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> Literal', 'Literal -> value']
copynode -6.547421559196664:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -3.7753268996893894:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.4914900958538055:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation qualifier ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -4.528196219180245:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -3.7753268996893894:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.259984168980736:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.756963659077883:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -7.253486134111881:  root add ^ StatementExpression expression MethodInvocation qualifier loc3 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc3', 'start -> unknown', 'root -> End']
copynode -5.164429668162484:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation']
copynode -4.500841259461595:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -7.31966045498848:  root add ^ StatementExpression expression MethodInvocation qualifier Range_ter ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.322011814743746:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown', 'root -> StatementExpression']
copynode -7.31772896531038:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc2']
copynode -5.164429668162484:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -7.2011015189928:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -6.760090354655404:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MethodInvocation qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -3.7753268996893894:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.738289002154488:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'copy-operandl', 'copy-operandr']
before@8 batch0 x: -7.618511978362221: root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'copy-operandl', 'copy-operandr']
after@8 batch0 x: -7.618511978362221: root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'copy-operandl', 'copy-operandr']
copynode -2.604740705632139:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -3.8685431409539888:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation']
copynode -4.048102639120771:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value MethodInvocation ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> MethodInvocation']
copynode -2.604740705632139:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -2.604740705632139:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0']
copynode -3.9661750735831447:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -2.604740705632139:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc2']
copynode -4.982730518851895:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -2.604740705632139:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.329174703976605:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member', 'prefix_operators -> !_ter', 'qualifier -> loc1', 'start -> unknown', 'root -> End']
copynode -2.604740705632139:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -2.604740705632139:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.487831715319771:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier loc1 ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1']
copynode -5.443191055033822:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -2.604740705632139:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -2.604740705632139:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -2.604740705632139:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -3.9661750735831447:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -3.9661750735831447:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0']
copynode -6.2182117736083455:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'root -> ReturnStatement_ter', 'root -> End']
copynode -4.048102639120771:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value MemberReference ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> MemberReference']
copynode -6.022786859248299:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier loc1 ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1']
copynode -4.048102639120771:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal']
copynode -5.637267924845219:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.8768843447905965:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'copy-operandr']
copynode -3.9661750735831447:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc2']
copynode -4.982730518851895:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -6.007231119845528:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -5.008346139889909:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -6.679533070782782:  root modified ^ LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation']
copynode -6.545301419682801:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments Literal value <string>_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> Literal', 'Literal -> value', 'value -> <string>_ter']
copynode -6.055200710892677:  root add ^ StatementExpression expression MethodInvocation qualifier loc0 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc0', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -3.9661750735831447:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.541312862013001:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -6.007122489449102:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -5.329174703976605:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member', 'prefix_operators -> !_ter', 'qualifier -> loc1', 'start -> unknown', 'root -> StatementExpression']
copynode -6.007231119845528:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -3.9661750735831447:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -3.9661750735831447:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.886110484425444:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ selectors MethodInvocation member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> loc1', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -3.9661750735831447:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.089901119295973:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ selectors MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> loc1', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -3.9661750735831447:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -3.9661750735831447:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.1259391734492965:  root add ^ IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> instanceof_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -6.22229921768303:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1']
copynode -5.054074000567198:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> loc0']
copynode -5.8768843447905965:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'copy-operandr']
copynode -6.487779192626476:  root add ^ StatementExpression expression MethodInvocation qualifier loc2 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc2', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.008346139889909:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1']
copynode -7.167011908692075:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'copy-member', 'value -> MethodInvocation']
copynode -6.97455964476103:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier loc1 ^ ^ selectors MethodInvocation arguments ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier selectors member', 'prefix_operators -> !_ter', 'qualifier -> loc1', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -7.244146756333066:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'copy-member', 'value -> MethodInvocation']
copynode -7.113693522725953:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value Literal value null_ter ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.1259391734492965:  root add ^ IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> instanceof_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc2']
copynode -3.8685431409539888:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Cast ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Cast']
copynode -6.65273966640234:  root add ^ StatementExpression expression MethodInvocation qualifier loc3 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc3', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -7.4021403703372926:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value MethodInvocation ^ ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc2', 'value -> MethodInvocation']
copynode -6.541312862013001:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
before@9 batch0 x: -7.553979445074219: root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ StatementExpression expression Assignment ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
after@9 batch0 x: -7.553979445074219: root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ StatementExpression expression Assignment ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -3.5872693325509317:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr']
copynode -3.9658435959281633:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -3.5872693325509317:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr']
copynode -4.308948061865522:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -3.5872693325509317:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr']
copynode -4.864584531926084:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr']
copynode -5.442532669578213:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -3.9658435959281633:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -5.192770328663755:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'copy-operandr']
copynode -4.308948061865522:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value MethodInvocation qualifier ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -5.2467237378587015:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc2', 'copy-operandr']
copynode -5.237186306912918:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr']
copynode -5.753988180134911:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -4.864584531926084:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr']
copynode -5.750121120188851:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown']
copynode -5.573998298787046:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr']
copynode -6.285201571387006:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value MemberReference member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> MemberReference', 'MemberReference -> member']
copynode -3.9658435959281633:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -6.398633501928998:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value']
copynode -5.739403572224546:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr']
copynode -5.728503074788023:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr']
copynode -5.237186306912918:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr']
copynode -5.803059425496031:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr']
copynode -3.9658435959281633:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier ^ selectors ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier selectors member']
copynode -5.192770328663755:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'copy-operandr']
copynode -5.792322960041929:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr']
copynode -5.843344535969663:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr']
copynode -5.2467237378587015:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc2', 'copy-operandr']
copynode -6.426489986479282:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> End']
copynode -6.502870086405892:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'copy-operandr', 'root -> End']
copynode -4.864584531926084:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr']
copynode -5.885026926000137:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr']
copynode -6.360676083539147:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown']
copynode -5.573998298787046:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr']
copynode -6.540949951682705:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -5.728503074788023:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr']
copynode -5.739403572224546:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr']
copynode -6.728482309554238:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -5.753988180134911:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -5.192770328663755:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'copy-operandr']
copynode -5.792322960041929:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr']
copynode -6.22774123569252:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'copy-operandr']
copynode -4.308948061865522:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value MethodInvocation arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -5.237186306912918:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr']
copynode -5.2467237378587015:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc2', 'copy-operandr']
copynode -5.803059425496031:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr']
copynode -6.87603659927845:  root add ^ StatementExpression expression MethodInvocation qualifier loc0 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc0', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> End']
copynode -5.843344535969663:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr']
copynode -5.750121120188851:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'copy-member']
copynode -5.885026926000137:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr']
copynode -7.104639828030486:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ selectors MethodInvocation member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> loc1', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End']
copynode -3.9658435959281633:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> member']
copynode -6.835722607560456:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments Literal value <string>_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> Literal', 'Literal -> value', 'value -> <string>_ter', 'arguments -> End']
copynode -7.188315752719063:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'copy-operandr', 'root -> End']
copynode -5.573998298787046:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr']
copynode -7.162516891461564:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown']
copynode -4.308948061865522:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value MethodInvocation qualifier ^ selectors ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> MethodInvocation', 'MethodInvocation -> qualifier selectors member']
copynode -6.534812921483535:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc2', 'copy-operandr']
before@10 batch0 x: -7.320358807046432: root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc2', 'copy-operandr']
after@10 batch0 x: -7.320358807046432: root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc2', 'copy-operandr']
copynode -4.207976606034208:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> End']
copynode -4.872247007035185:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> End']
copynode -4.652456499999971:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1']
copynode -5.374905851029325:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> End']
copynode -5.668237041507382:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.498734917782713:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr', 'root -> End']
copynode -5.813017335080076:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'copy-operandr', 'root -> End']
copynode -5.867622938298155:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc2', 'copy-operandr', 'root -> End']
copynode -5.7011376995506:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1']
copynode -4.652456499999971:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -6.273585226677824:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr', 'root -> End']
copynode -6.155320611142088:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr', 'root -> End']
copynode -6.131976160977501:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ StatementExpression expression MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -6.447137203358579:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr', 'root -> End']
copynode -6.449216034554411:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr', 'root -> End']
copynode -6.472433712624479:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr', 'root -> End']
copynode -6.480667438649107:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr', 'root -> End']
copynode -6.478935685299803:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'copy-operandr', 'root -> End']
copynode -5.827893755835248:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1']
copynode -6.509806659363676:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr', 'root -> End']
copynode -6.5318858291138895:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc2', 'copy-operandr', 'root -> End']
copynode -6.478630222743959:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ selectors ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> loc1']
copynode -4.207976606034208:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression']
copynode -6.23195284960093:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'copy-operandr']
copynode -6.770764317654539:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr', 'root -> End']
copynode -6.88055972364964:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.625550594471861:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr', 'root -> End']
copynode -6.9476459955913015:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.9642401075107045:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -6.897257890843321:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr', 'root -> End']
copynode -6.92669817461865:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr', 'root -> End']
copynode -6.020154112775344:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> End']
copynode -5.118413350981427:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1']
copynode -6.981203642033506:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'copy-operandr', 'root -> End']
copynode -7.006470170163084:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr', 'root -> End']
copynode -7.042334284924436:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr', 'root -> End']
copynode -7.038866605900694:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc2', 'copy-operandr', 'root -> End']
copynode -7.089982118748594:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr', 'root -> End']
copynode -6.020154112775344:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> ReturnStatement_ter']
copynode -7.297104283672525:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'type -> =_ter']
copynode -6.388227619594545:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -5.498734917782713:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr', 'root -> StatementExpression']
copynode -6.411578417260898:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value', 'value -> false_ter']
copynode -7.289565053128172:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr', 'root -> End']
copynode -6.463092082936782:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> End']
copynode -5.7011376995506:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
copynode -5.118413350981427:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value MethodInvocation qualifier loc2 ^ ^ arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc2']
copynode -4.872247007035185:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression']
copynode -7.244232334560365:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -6.699775093991775:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr', 'root -> End']
copynode -6.388227619594545:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation arguments MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MethodInvocation']
copynode -6.020154112775344:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression']
copynode -6.23195284960093:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'copy-operandr']
copynode -6.411578417260898:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value', 'value -> true_ter']
copynode -6.463092082936782:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> ReturnStatement_ter']
copynode -7.091267589305062:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'copy-member', 'copy-operandr']
before@11 batch0 x: -7.688938740466256: root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'copy-member', 'copy-operandr']
after@11 batch0 x: -7.688938740466256: root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'copy-member', 'copy-operandr']
copynode -5.185601629680605:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference']
copynode -5.185601629680605:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation']
copynode -6.036467828220339:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown']
copynode -6.036467828220339:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'copy-member']
copynode -6.782461710638017:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ selectors MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> loc1', 'selectors -> MethodInvocation']
copynode -5.679031076666433:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -6.157569386428804:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
copynode -6.843508783553261:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'copy-operandr', 'root -> End']
copynode -6.842760589264799:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -7.222905391652603:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> ReturnStatement_ter', 'root -> End']
copynode -7.300453938907594:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.185601629680605:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments Literal ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> Literal']
copynode -7.29974461600068:  root add ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'type -> =_ter', 'root -> End']
copynode -6.157569386428804:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ arguments MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MethodInvocation']
copynode -7.365393758256687:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value', 'value -> false_ter', 'type -> =_ter']
copynode -6.510189596388955:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1']
copynode -7.335314598225523:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -7.54452536291501:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> End']
copynode -7.635131001909031:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value', 'value -> true_ter', 'type -> =_ter']
copynode -7.654039138753433:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> ReturnStatement_ter', 'root -> End']
copynode -7.517830636643339:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -6.9645276220398955:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -7.688938740466256:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'copy-member', 'copy-operandr', 'root -> End']
copynode -7.627108637068886:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'copy-operandr', 'root -> End']
copynode -7.068271420401288:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference']
copynode -5.679031076666433:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -7.573683657115907:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation arguments MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MethodInvocation', 'copy-MethodInvocation']
copynode -7.574126476247329:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression']
before@12 batch0 x: -7.970209354360122: root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression']
after@12 batch0 x: -7.970209354360122: root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -6.056088544792146:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.714565612739534:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'root -> End']
copynode -6.775502719348879:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'copy-member', 'root -> End']
copynode -6.972375728553743:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.818576928591938:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ selectors MethodInvocation member ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> loc1', 'selectors -> MethodInvocation', 'MethodInvocation -> member']
copynode -7.344031252330751:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments Literal value ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> Literal', 'Literal -> value']
copynode -7.367820822139038:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value', 'value -> false_ter', 'type -> =_ter', 'root -> End']
copynode -6.837750616308767:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr']
copynode -6.42661205715558:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation qualifier ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -6.42661205715558:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation', 'copy-MethodInvocation']
copynode -7.3592432517471025:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ arguments MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MethodInvocation', 'copy-MethodInvocation']
copynode -7.091582652472425:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -7.6374246540653985:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value', 'value -> true_ter', 'type -> =_ter', 'root -> End']
copynode -6.818576928591938:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ selectors MethodInvocation arguments ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> loc1', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -6.056088544792146:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MemberReference qualifier ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> qualifier member']
copynode -7.811060682113748:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation']
copynode -7.854799113672925:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -7.091582652472425:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -7.952294387287111:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation arguments MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MethodInvocation', 'copy-MethodInvocation', 'arguments -> End']
copynode -6.837750616308767:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr']
copynode -7.504550811194349:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
before@13 batch0 x: -8.159530457400251: root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression MethodInvocation ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
after@13 batch0 x: -8.159530457400251: root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression MethodInvocation ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -6.227670707172365:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -7.5510000366630265:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation', 'copy-MethodInvocation', 'arguments -> End']
copynode -7.623771425627638:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -7.604277246064157:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ arguments MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MethodInvocation', 'copy-MethodInvocation', 'arguments -> End']
copynode -7.42231405043276:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation']
copynode -7.917829491561861:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MemberReference qualifier unknown ^ ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'start -> unknown']
copynode -7.334811207270832:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ selectors MethodInvocation member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> loc1', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -7.498634495204897:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation qualifier loc1 ^ ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1']
copynode -6.99118044822535:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ arguments MemberReference member loc1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -8.05511713809392:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation arguments MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MethodInvocation', 'copy-MethodInvocation', 'arguments -> End', 'start -> unknown']
copynode -7.334811207270832:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ selectors MethodInvocation member getAnnotations_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> loc1', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'copy-member']
copynode -8.031797286414076:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -7.352597861914546:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments Literal value false_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> Literal', 'Literal -> value', 'value -> false_ter']
copynode -8.159530457400251:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -8.011357218201738:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -8.130186500784475:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation']
copynode -6.227670707172365:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member']
before@14 batch0 x: -8.639270581668825: root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member']
after@14 batch0 x: -8.639270581668825: root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.109191693729372:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> End']
copynode -7.8243841555085965:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -7.990182575202198:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ selectors MethodInvocation member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> loc1', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End']
copynode -8.17237190938613:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation arguments MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MethodInvocation', 'copy-MethodInvocation', 'arguments -> End', 'start -> unknown', 'root -> End']
copynode -8.20497119090578:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ selectors MethodInvocation member getAnnotations_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> loc1', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'copy-member', 'selectors -> End']
copynode -8.096486119917245:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ arguments MemberReference member loc1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'arguments -> End']
copynode -7.624052739498438:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -8.065020777648897:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown']
copynode -7.606836364037008:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation', 'copy-MethodInvocation', 'arguments -> End', 'copy-member']
copynode -8.464801340727718:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments Literal value false_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> Literal', 'Literal -> value', 'value -> false_ter', 'arguments -> End']
copynode -7.606836364037008:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation', 'copy-MethodInvocation', 'arguments -> End', 'start -> unknown']
copynode -8.536966088053305:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -8.639270581668825:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End']
copynode -7.624052739498438:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
copynode -8.528506547387224:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1']
copynode -7.624052739498438:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -8.065020777648897:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'copy-member']
before@15 batch0 x: -9.782428242629976: root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'copy-member']
after@15 batch0 x: -9.782428242629976: root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'copy-member']
copynode -7.14890009573719:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> End', 'copy-member']
copynode -8.397913106149645:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'arguments -> End']
copynode -8.446566090351553:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation', 'copy-MethodInvocation', 'arguments -> End', 'copy-member', 'root -> End']
copynode -8.260907149669947:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation']
copynode -8.54348813033721:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation', 'copy-MethodInvocation', 'arguments -> End', 'start -> unknown', 'root -> End']
copynode -8.148668345427723:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ selectors MethodInvocation member unknown ^ ^ ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> loc1', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End', 'copy-member']
copynode -8.500539425192983:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments Literal value false_ter ^ ^ ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> Literal', 'Literal -> value', 'value -> false_ter', 'arguments -> End', 'copy-member']
copynode -7.868795777496416:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -8.732746392852277:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End', 'copy-member']
copynode -7.868795777496416:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -8.228297170615406:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ selectors MethodInvocation member getAnnotations_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> loc1', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'copy-member', 'selectors -> End', 'start -> unknown']
copynode -8.228297170615406:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ selectors MethodInvocation member getAnnotations_ter ^ ^ ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> loc1', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'copy-member', 'selectors -> End', 'copy-member']
copynode -8.58252021932276:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -9.38244352376205:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member']
copynode -8.58252021932276:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -9.782428242629976:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'copy-member', 'arguments -> End']
before@16 batch0 x: -9.809716081610532: root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'copy-member', 'arguments -> End']
after@16 batch0 x: -9.809716081610532: root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'copy-member', 'arguments -> End']
copynode -7.271932084477157:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> End', 'copy-member', 'root -> End']
copynode -8.425535751870484:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'arguments -> End', 'copy-member']
copynode -8.629339840626926:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ selectors MethodInvocation member unknown ^ ^ ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> loc1', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End', 'copy-member', 'root -> End']
copynode -8.631612140117795:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments Literal value false_ter ^ ^ ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> Literal', 'Literal -> value', 'value -> false_ter', 'arguments -> End', 'copy-member', 'root -> End']
copynode -8.830702312654466:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End', 'copy-member', 'root -> End']
copynode -8.85412686727068:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ selectors MethodInvocation member getAnnotations_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> loc1', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'copy-member', 'selectors -> End', 'start -> unknown', 'root -> End']
copynode -8.504271841404261:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -8.662825072940905:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -9.199772175765247:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ selectors MethodInvocation member getAnnotations_ter ^ ^ ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> loc1', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'copy-member', 'selectors -> End', 'copy-member', 'root -> End']
copynode -8.838526273902971:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -9.393991919991095:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -9.809716081610532:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'copy-member', 'arguments -> End', 'copy-member']
copynode -8.838526273902971:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation']
copynode -9.525469275948126:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
before@17 batch0 x: -10.04590699338587: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
after@17 batch0 x: -10.04590699338587: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -8.547537384918542:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'arguments -> End', 'copy-member', 'root -> End']
copynode -8.995370085176546:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -9.359025443729479:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -9.723554077383596:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -9.948802015176625:  root modified ^ LocalVariableDeclaration type ReferenceType name Collection_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation qualifier loc1 ^ ^ member getAnnotations_ter ^ ^ ^ ^ member getAnnotations_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'copy-member', 'arguments -> End', 'copy-member', 'root -> End']
copynode -10.04590699338587:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -8.892966574785532:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1']
copynode -9.97915413492592:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member']
before@18 batch0 x: -10.763894225296099: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member']
after@18 batch0 x: -10.763894225296099: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -10.763894225296099:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier loc1 ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1']
copynode -10.450483149645152:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference']
copynode -9.022524888452608:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -9.022524888452608:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -9.022524888452608:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -9.022524888452608:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
before@19 batch0 x: -11.440300996240694: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
after@19 batch0 x: -11.440300996240694: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -11.18886286651832:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -11.16050219052704:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown']
copynode -11.350196177896578:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr']
copynode -11.41633897536667:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr']
copynode -11.440300996240694:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr']
copynode -11.439587886270601:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr']
before@20 batch0 x: -12.383780176576693: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr']
after@20 batch0 x: -12.383780176576693: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr']
copynode -11.354100352880778:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -12.22684776299866:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> End']
copynode -12.312586421903688:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr', 'root -> StatementExpression']
copynode -12.37212055438431:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr', 'root -> End']
copynode -12.383780176576693:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr', 'root -> End']
copynode -12.22684776299866:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression']
before@21 batch0 x: -13.395432825025637: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression']
after@21 batch0 x: -13.395432825025637: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression']
copynode -12.607219583151164:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> End']
copynode -13.26622330659302:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -13.395432825025637:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression']
before@22 batch0 x: -13.75835039728554: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression']
after@22 batch0 x: -13.75835039728554: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -13.57988947146805:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -13.75835039728554:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -12.861357933637919:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> End', 'copy-member']
before@23 batch0 x: -14.45644248163444: root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> End', 'copy-member']
after@23 batch0 x: -14.45644248163444: root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> End', 'copy-member']
copynode -14.089102561410982:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -14.213342184957583:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -14.45644248163444:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> End', 'copy-member', 'type -> =_ter']
before@24 batch0 x: -14.457409557624487: root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> End', 'copy-member', 'type -> =_ter']
after@24 batch0 x: -14.457409557624487: root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> End', 'copy-member', 'type -> =_ter']
copynode -14.457409557624487:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member combine_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> End', 'copy-member', 'type -> =_ter', 'root -> End']
copynode -14.089613026648294:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -14.213758431229508:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
before@25 batch0 x: -14.846025310311234: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
after@25 batch0 x: -14.846025310311234: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -14.751529401808511:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation']
copynode -14.846025310311234:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation']
before@26 batch0 x: -15.162821762118256: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation ^ ^ type ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation']
after@26 batch0 x: -15.162821762118256: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation ^ ^ type ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation']
copynode -15.0839948716457:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -15.162821762118256:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
before@27 batch0 x: -15.621840469393646: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
after@27 batch0 x: -15.621840469393646: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -15.519315398007166:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1']
copynode -15.621840469393646:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1']
before@28 batch0 x: -17.156508914980805: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1']
after@28 batch0 x: -17.156508914980805: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1']
copynode -17.122998392849695:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference']
copynode -17.156508914980805:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier loc1 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'copy-operandr', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference']
method
r_ter {'d_ter': 'XYDataset', 'r_ter': 'XYItemRenderer', 'c_ter': 'Collection', 'i_ter': 'Iterator', 'a_ter': 'XYAnnotation', 'it_ter': 'Iterator', 'iterator_ter': 'Iterator'}
7 XYItemRenderer
XYPlot Collection getPlot getAnnotations_ter
None Collection setPlot getAnnotations_ter
int Collection getPassCount getAnnotations_ter
Range Collection findDomainBounds getAnnotations_ter
Range Collection findRangeBounds getAnnotations_ter
None Collection addChangeListener getAnnotations_ter
None Collection removeChangeListener getAnnotations_ter
boolean Collection getItemVisible getAnnotations_ter
boolean Collection isSeriesVisible getAnnotations_ter
Boolean Collection getSeriesVisible getAnnotations_ter
None Collection setSeriesVisible getAnnotations_ter
None Collection setSeriesVisible getAnnotations_ter
boolean Collection getBaseSeriesVisible getAnnotations_ter
None Collection setBaseSeriesVisible getAnnotations_ter
None Collection setBaseSeriesVisible getAnnotations_ter
boolean Collection isSeriesVisibleInLegend getAnnotations_ter
Boolean Collection getSeriesVisibleInLegend getAnnotations_ter
None Collection setSeriesVisibleInLegend getAnnotations_ter
None Collection setSeriesVisibleInLegend getAnnotations_ter
boolean Collection getBaseSeriesVisibleInLegend getAnnotations_ter
None Collection setBaseSeriesVisibleInLegend getAnnotations_ter
None Collection setBaseSeriesVisibleInLegend getAnnotations_ter
Paint Collection getItemPaint getAnnotations_ter
Paint Collection getSeriesPaint getAnnotations_ter
None Collection setSeriesPaint getAnnotations_ter
None Collection setSeriesPaint getAnnotations_ter
Paint Collection getBasePaint getAnnotations_ter
None Collection setBasePaint getAnnotations_ter
None Collection setBasePaint getAnnotations_ter
Paint Collection getItemFillPaint getAnnotations_ter
Paint Collection getSeriesFillPaint getAnnotations_ter
None Collection setSeriesFillPaint getAnnotations_ter
None Collection setSeriesFillPaint getAnnotations_ter
Paint Collection getBaseFillPaint getAnnotations_ter
None Collection setBaseFillPaint getAnnotations_ter
None Collection setBaseFillPaint getAnnotations_ter
Paint Collection getItemOutlinePaint getAnnotations_ter
Paint Collection getSeriesOutlinePaint getAnnotations_ter
None Collection setSeriesOutlinePaint getAnnotations_ter
None Collection setSeriesOutlinePaint getAnnotations_ter
Paint Collection getBaseOutlinePaint getAnnotations_ter
None Collection setBaseOutlinePaint getAnnotations_ter
None Collection setBaseOutlinePaint getAnnotations_ter
Stroke Collection getItemStroke getAnnotations_ter
Stroke Collection getSeriesStroke getAnnotations_ter
None Collection setSeriesStroke getAnnotations_ter
None Collection setSeriesStroke getAnnotations_ter
Stroke Collection getBaseStroke getAnnotations_ter
None Collection setBaseStroke getAnnotations_ter
None Collection setBaseStroke getAnnotations_ter
Stroke Collection getItemOutlineStroke getAnnotations_ter
Stroke Collection getSeriesOutlineStroke getAnnotations_ter
None Collection setSeriesOutlineStroke getAnnotations_ter
None Collection setSeriesOutlineStroke getAnnotations_ter
Stroke Collection getBaseOutlineStroke getAnnotations_ter
None Collection setBaseOutlineStroke getAnnotations_ter
None Collection setBaseOutlineStroke getAnnotations_ter
Shape Collection getItemShape getAnnotations_ter
Shape Collection getSeriesShape getAnnotations_ter
None Collection setSeriesShape getAnnotations_ter
None Collection setSeriesShape getAnnotations_ter
Shape Collection getBaseShape getAnnotations_ter
None Collection setBaseShape getAnnotations_ter
None Collection setBaseShape getAnnotations_ter
LegendItem Collection getLegendItem getAnnotations_ter
XYSeriesLabelGenerator Collection getLegendItemLabelGenerator getAnnotations_ter
None Collection setLegendItemLabelGenerator getAnnotations_ter
XYSeriesLabelGenerator Collection getLegendItemToolTipGenerator getAnnotations_ter
None Collection setLegendItemToolTipGenerator getAnnotations_ter
XYSeriesLabelGenerator Collection getLegendItemURLGenerator getAnnotations_ter
None Collection setLegendItemURLGenerator getAnnotations_ter
XYToolTipGenerator Collection getToolTipGenerator getAnnotations_ter
XYToolTipGenerator Collection getSeriesToolTipGenerator getAnnotations_ter
None Collection setSeriesToolTipGenerator getAnnotations_ter
None Collection setSeriesToolTipGenerator getAnnotations_ter
XYToolTipGenerator Collection getBaseToolTipGenerator getAnnotations_ter
None Collection setBaseToolTipGenerator getAnnotations_ter
None Collection setBaseToolTipGenerator getAnnotations_ter
XYURLGenerator Collection getURLGenerator getAnnotations_ter
XYURLGenerator Collection getSeriesURLGenerator getAnnotations_ter
None Collection setSeriesURLGenerator getAnnotations_ter
None Collection setSeriesURLGenerator getAnnotations_ter
XYURLGenerator Collection getBaseURLGenerator getAnnotations_ter
None Collection setBaseURLGenerator getAnnotations_ter
None Collection setBaseURLGenerator getAnnotations_ter
boolean Collection isItemLabelVisible getAnnotations_ter
boolean Collection isSeriesItemLabelsVisible getAnnotations_ter
Boolean Collection getSeriesItemLabelsVisible getAnnotations_ter
None Collection setSeriesItemLabelsVisible getAnnotations_ter
None Collection setSeriesItemLabelsVisible getAnnotations_ter
None Collection setSeriesItemLabelsVisible getAnnotations_ter
boolean Collection getBaseItemLabelsVisible getAnnotations_ter
None Collection setBaseItemLabelsVisible getAnnotations_ter
None Collection setBaseItemLabelsVisible getAnnotations_ter
XYItemLabelGenerator Collection getItemLabelGenerator getAnnotations_ter
XYItemLabelGenerator Collection getSeriesItemLabelGenerator getAnnotations_ter
None Collection setSeriesItemLabelGenerator getAnnotations_ter
None Collection setSeriesItemLabelGenerator getAnnotations_ter
XYItemLabelGenerator Collection getBaseItemLabelGenerator getAnnotations_ter
None Collection setBaseItemLabelGenerator getAnnotations_ter
None Collection setBaseItemLabelGenerator getAnnotations_ter
Font Collection getItemLabelFont getAnnotations_ter
Font Collection getSeriesItemLabelFont getAnnotations_ter
None Collection setSeriesItemLabelFont getAnnotations_ter
None Collection setSeriesItemLabelFont getAnnotations_ter
Font Collection getBaseItemLabelFont getAnnotations_ter
None Collection setBaseItemLabelFont getAnnotations_ter
None Collection setBaseItemLabelFont getAnnotations_ter
Paint Collection getItemLabelPaint getAnnotations_ter
Paint Collection getSeriesItemLabelPaint getAnnotations_ter
None Collection setSeriesItemLabelPaint getAnnotations_ter
None Collection setSeriesItemLabelPaint getAnnotations_ter
Paint Collection getBaseItemLabelPaint getAnnotations_ter
None Collection setBaseItemLabelPaint getAnnotations_ter
None Collection setBaseItemLabelPaint getAnnotations_ter
ItemLabelPosition Collection getPositiveItemLabelPosition getAnnotations_ter
ItemLabelPosition Collection getSeriesPositiveItemLabelPosition getAnnotations_ter
None Collection setSeriesPositiveItemLabelPosition getAnnotations_ter
None Collection setSeriesPositiveItemLabelPosition getAnnotations_ter
ItemLabelPosition Collection getBasePositiveItemLabelPosition getAnnotations_ter
None Collection setBasePositiveItemLabelPosition getAnnotations_ter
None Collection setBasePositiveItemLabelPosition getAnnotations_ter
ItemLabelPosition Collection getNegativeItemLabelPosition getAnnotations_ter
ItemLabelPosition Collection getSeriesNegativeItemLabelPosition getAnnotations_ter
None Collection setSeriesNegativeItemLabelPosition getAnnotations_ter
None Collection setSeriesNegativeItemLabelPosition getAnnotations_ter
ItemLabelPosition Collection getBaseNegativeItemLabelPosition getAnnotations_ter
None Collection setBaseNegativeItemLabelPosition getAnnotations_ter
None Collection setBaseNegativeItemLabelPosition getAnnotations_ter
boolean Collection getItemCreateEntity getAnnotations_ter
Boolean Collection getSeriesCreateEntities getAnnotations_ter
None Collection setSeriesCreateEntities getAnnotations_ter
None Collection setSeriesCreateEntities getAnnotations_ter
boolean Collection getBaseCreateEntities getAnnotations_ter
None Collection setBaseCreateEntities getAnnotations_ter
None Collection setBaseCreateEntities getAnnotations_ter
Collection Collection getAnnotations getAnnotations_ter
None Collection addAnnotation getAnnotations_ter
None Collection addAnnotation getAnnotations_ter
boolean Collection removeAnnotation getAnnotations_ter
None Collection removeAnnotations getAnnotations_ter
None Collection drawAnnotations getAnnotations_ter
XYItemRendererState Collection initialise getAnnotations_ter
None Collection drawItem getAnnotations_ter
None Collection fillDomainGridBand getAnnotations_ter
None Collection fillRangeGridBand getAnnotations_ter
None Collection drawDomainLine getAnnotations_ter
None Collection drawRangeLine getAnnotations_ter
None Collection drawDomainMarker getAnnotations_ter
None Collection drawRangeMarker getAnnotations_ter
method
r_ter {'d_ter': 'XYDataset', 'r_ter': 'XYItemRenderer', 'c_ter': 'Collection', 'i_ter': 'Iterator', 'a_ter': 'XYAnnotation', 'it_ter': 'Iterator', 'iterator_ter': 'Iterator'}
7 XYItemRenderer
method
7 
String  getPlotType 
PlotOrientation  getOrientation 
None  setOrientation 
RectangleInsets  getAxisOffset 
None  setAxisOffset 
ValueAxis  getDomainAxis 
ValueAxis  getDomainAxis 
None  setDomainAxis 
None  setDomainAxis 
None  setDomainAxis 
None  setDomainAxes 
AxisLocation  getDomainAxisLocation 
None  setDomainAxisLocation 
None  setDomainAxisLocation 
RectangleEdge  getDomainAxisEdge 
int  getDomainAxisCount 
None  clearDomainAxes 
None  configureDomainAxes 
AxisLocation  getDomainAxisLocation 
None  setDomainAxisLocation 
None  setDomainAxisLocation 
RectangleEdge  getDomainAxisEdge 
ValueAxis  getRangeAxis 
None  setRangeAxis 
AxisLocation  getRangeAxisLocation 
None  setRangeAxisLocation 
None  setRangeAxisLocation 
RectangleEdge  getRangeAxisEdge 
ValueAxis  getRangeAxis 
None  setRangeAxis 
None  setRangeAxis 
None  setRangeAxes 
int  getRangeAxisCount 
None  clearRangeAxes 
None  configureRangeAxes 
AxisLocation  getRangeAxisLocation 
None  setRangeAxisLocation 
None  setRangeAxisLocation 
RectangleEdge  getRangeAxisEdge 
XYDataset  getDataset 
XYDataset  getDataset 
None  setDataset 
None  setDataset 
int  getDatasetCount 
int  indexOf 
None  mapDatasetToDomainAxis 
None  mapDatasetToDomainAxes 
None  mapDatasetToRangeAxis 
None  mapDatasetToRangeAxes 
None  checkAxisIndices 
int  getRendererCount 
XYItemRenderer  getRenderer 
XYItemRenderer  getRenderer 
None  setRenderer 
None  setRenderer 
None  setRenderer 
None  setRenderers 
DatasetRenderingOrder  getDatasetRenderingOrder 
None  setDatasetRenderingOrder 
SeriesRenderingOrder  getSeriesRenderingOrder 
None  setSeriesRenderingOrder 
int  getIndexOf 
XYItemRenderer  getRendererForDataset 
int  getWeight 
None  setWeight 
boolean  isDomainGridlinesVisible 
None  setDomainGridlinesVisible 
boolean  isDomainMinorGridlinesVisible 
None  setDomainMinorGridlinesVisible 
Stroke  getDomainGridlineStroke 
None  setDomainGridlineStroke 
Stroke  getDomainMinorGridlineStroke 
None  setDomainMinorGridlineStroke 
Paint  getDomainGridlinePaint 
None  setDomainGridlinePaint 
Paint  getDomainMinorGridlinePaint 
None  setDomainMinorGridlinePaint 
boolean  isRangeGridlinesVisible 
None  setRangeGridlinesVisible 
Stroke  getRangeGridlineStroke 
None  setRangeGridlineStroke 
Paint  getRangeGridlinePaint 
None  setRangeGridlinePaint 
boolean  isRangeMinorGridlinesVisible 
None  setRangeMinorGridlinesVisible 
Stroke  getRangeMinorGridlineStroke 
None  setRangeMinorGridlineStroke 
Paint  getRangeMinorGridlinePaint 
None  setRangeMinorGridlinePaint 
boolean  isDomainZeroBaselineVisible 
None  setDomainZeroBaselineVisible 
Stroke  getDomainZeroBaselineStroke 
None  setDomainZeroBaselineStroke 
Paint  getDomainZeroBaselinePaint 
None  setDomainZeroBaselinePaint 
boolean  isRangeZeroBaselineVisible 
None  setRangeZeroBaselineVisible 
Stroke  getRangeZeroBaselineStroke 
None  setRangeZeroBaselineStroke 
Paint  getRangeZeroBaselinePaint 
None  setRangeZeroBaselinePaint 
Paint  getDomainTickBandPaint 
None  setDomainTickBandPaint 
Paint  getRangeTickBandPaint 
None  setRangeTickBandPaint 
Point2D  getQuadrantOrigin 
None  setQuadrantOrigin 
Paint  getQuadrantPaint 
None  setQuadrantPaint 
None  addDomainMarker 
None  addDomainMarker 
None  clearDomainMarkers 
None  clearDomainMarkers 
None  addDomainMarker 
None  addDomainMarker 
boolean  removeDomainMarker 
boolean  removeDomainMarker 
boolean  removeDomainMarker 
boolean  removeDomainMarker 
None  addRangeMarker 
None  addRangeMarker 
None  clearRangeMarkers 
None  addRangeMarker 
None  addRangeMarker 
None  clearRangeMarkers 
boolean  removeRangeMarker 
boolean  removeRangeMarker 
boolean  removeRangeMarker 
boolean  removeRangeMarker 
None  addAnnotation 
None  addAnnotation 
boolean  removeAnnotation 
boolean  removeAnnotation 
List  getAnnotations 
None  clearAnnotations 
AxisSpace  calculateAxisSpace 
AxisSpace  calculateDomainAxisSpace 
AxisSpace  calculateRangeAxisSpace 
None  draw 
None  drawBackground 
None  drawQuadrants 
None  drawDomainTickBands 
None  drawRangeTickBands 
Map  drawAxes 
boolean  render 
ValueAxis  getDomainAxisForDataset 
ValueAxis  getRangeAxisForDataset 
None  drawDomainGridlines 
None  drawRangeGridlines 
None  drawZeroDomainBaseline 
None  drawZeroRangeBaseline 
None  drawAnnotations 
None  drawDomainMarkers 
None  drawRangeMarkers 
Collection  getDomainMarkers 
Collection  getRangeMarkers 
Collection  getDomainMarkers 
Collection  getRangeMarkers 
None  drawHorizontalLine 
None  drawDomainCrosshair 
None  drawVerticalLine 
None  drawRangeCrosshair 
None  handleClick 
List  getDatasetsMappedToDomainAxis 
List  getDatasetsMappedToRangeAxis 
int  getDomainAxisIndex 
int  getRangeAxisIndex 
Range  getDataRange 
None  datasetChanged 
None  rendererChanged 
boolean  isDomainCrosshairVisible 
None  setDomainCrosshairVisible 
boolean  isDomainCrosshairLockedOnData 
None  setDomainCrosshairLockedOnData 
double  getDomainCrosshairValue 
None  setDomainCrosshairValue 
None  setDomainCrosshairValue 
Stroke  getDomainCrosshairStroke 
None  setDomainCrosshairStroke 
Paint  getDomainCrosshairPaint 
None  setDomainCrosshairPaint 
boolean  isRangeCrosshairVisible 
None  setRangeCrosshairVisible 
boolean  isRangeCrosshairLockedOnData 
None  setRangeCrosshairLockedOnData 
double  getRangeCrosshairValue 
None  setRangeCrosshairValue 
None  setRangeCrosshairValue 
Stroke  getRangeCrosshairStroke 
None  setRangeCrosshairStroke 
Paint  getRangeCrosshairPaint 
None  setRangeCrosshairPaint 
AxisSpace  getFixedDomainAxisSpace 
None  setFixedDomainAxisSpace 
None  setFixedDomainAxisSpace 
AxisSpace  getFixedRangeAxisSpace 
None  setFixedRangeAxisSpace 
None  setFixedRangeAxisSpace 
boolean  isDomainPannable 
None  setDomainPannable 
boolean  isRangePannable 
None  setRangePannable 
None  panDomainAxes 
None  panRangeAxes 
None  zoomDomainAxes 
None  zoomDomainAxes 
None  zoomDomainAxes 
None  zoomRangeAxes 
None  zoomRangeAxes 
None  zoomRangeAxes 
boolean  isDomainZoomable 
boolean  isRangeZoomable 
int  getSeriesCount 
LegendItemCollection  getFixedLegendItems 
None  setFixedLegendItems 
LegendItemCollection  getLegendItems 
boolean  equals 
Object  clone 
None  writeObject 
None  readObject 
boolean  canSelectByPoint 
boolean  canSelectByRegion 
None  select 
None  select 
XYDatasetSelectionState  findSelectionStateForDataset 
GeneralPath  convertToDataSpace 
None  clearSelection 
method
d_ter {'d_ter': 'XYDataset', 'r_ter': 'XYItemRenderer', 'c_ter': 'Collection', 'i_ter': 'Iterator', 'a_ter': 'XYAnnotation', 'it_ter': 'Iterator', 'iterator_ter': 'Iterator'}
7 XYDataset
DomainOrder  getDomainOrder 
int  getItemCount 
Number  getX 
double  getXValue 
Number  getY 
double  getYValue 
method
r_ter {'d_ter': 'XYDataset', 'r_ter': 'XYItemRenderer', 'c_ter': 'Collection', 'i_ter': 'Iterator', 'a_ter': 'XYAnnotation', 'it_ter': 'Iterator', 'iterator_ter': 'Iterator'}
7 XYItemRenderer
XYPlot  getPlot 
None  setPlot 
int  getPassCount 
Range  findDomainBounds 
Range  findRangeBounds 
None  addChangeListener 
None  removeChangeListener 
boolean  getItemVisible 
boolean  isSeriesVisible 
Boolean  getSeriesVisible 
None  setSeriesVisible 
None  setSeriesVisible 
boolean  getBaseSeriesVisible 
None  setBaseSeriesVisible 
None  setBaseSeriesVisible 
boolean  isSeriesVisibleInLegend 
Boolean  getSeriesVisibleInLegend 
None  setSeriesVisibleInLegend 
None  setSeriesVisibleInLegend 
boolean  getBaseSeriesVisibleInLegend 
None  setBaseSeriesVisibleInLegend 
None  setBaseSeriesVisibleInLegend 
Paint  getItemPaint 
Paint  getSeriesPaint 
None  setSeriesPaint 
None  setSeriesPaint 
Paint  getBasePaint 
None  setBasePaint 
None  setBasePaint 
Paint  getItemFillPaint 
Paint  getSeriesFillPaint 
None  setSeriesFillPaint 
None  setSeriesFillPaint 
Paint  getBaseFillPaint 
None  setBaseFillPaint 
None  setBaseFillPaint 
Paint  getItemOutlinePaint 
Paint  getSeriesOutlinePaint 
None  setSeriesOutlinePaint 
None  setSeriesOutlinePaint 
Paint  getBaseOutlinePaint 
None  setBaseOutlinePaint 
None  setBaseOutlinePaint 
Stroke  getItemStroke 
Stroke  getSeriesStroke 
None  setSeriesStroke 
None  setSeriesStroke 
Stroke  getBaseStroke 
None  setBaseStroke 
None  setBaseStroke 
Stroke  getItemOutlineStroke 
Stroke  getSeriesOutlineStroke 
None  setSeriesOutlineStroke 
None  setSeriesOutlineStroke 
Stroke  getBaseOutlineStroke 
None  setBaseOutlineStroke 
None  setBaseOutlineStroke 
Shape  getItemShape 
Shape  getSeriesShape 
None  setSeriesShape 
None  setSeriesShape 
Shape  getBaseShape 
None  setBaseShape 
None  setBaseShape 
LegendItem  getLegendItem 
XYSeriesLabelGenerator  getLegendItemLabelGenerator 
None  setLegendItemLabelGenerator 
XYSeriesLabelGenerator  getLegendItemToolTipGenerator 
None  setLegendItemToolTipGenerator 
XYSeriesLabelGenerator  getLegendItemURLGenerator 
None  setLegendItemURLGenerator 
XYToolTipGenerator  getToolTipGenerator 
XYToolTipGenerator  getSeriesToolTipGenerator 
None  setSeriesToolTipGenerator 
None  setSeriesToolTipGenerator 
XYToolTipGenerator  getBaseToolTipGenerator 
None  setBaseToolTipGenerator 
None  setBaseToolTipGenerator 
XYURLGenerator  getURLGenerator 
XYURLGenerator  getSeriesURLGenerator 
None  setSeriesURLGenerator 
None  setSeriesURLGenerator 
XYURLGenerator  getBaseURLGenerator 
None  setBaseURLGenerator 
None  setBaseURLGenerator 
boolean  isItemLabelVisible 
boolean  isSeriesItemLabelsVisible 
Boolean  getSeriesItemLabelsVisible 
None  setSeriesItemLabelsVisible 
None  setSeriesItemLabelsVisible 
None  setSeriesItemLabelsVisible 
boolean  getBaseItemLabelsVisible 
None  setBaseItemLabelsVisible 
None  setBaseItemLabelsVisible 
XYItemLabelGenerator  getItemLabelGenerator 
XYItemLabelGenerator  getSeriesItemLabelGenerator 
None  setSeriesItemLabelGenerator 
None  setSeriesItemLabelGenerator 
XYItemLabelGenerator  getBaseItemLabelGenerator 
None  setBaseItemLabelGenerator 
None  setBaseItemLabelGenerator 
Font  getItemLabelFont 
Font  getSeriesItemLabelFont 
None  setSeriesItemLabelFont 
None  setSeriesItemLabelFont 
Font  getBaseItemLabelFont 
None  setBaseItemLabelFont 
None  setBaseItemLabelFont 
Paint  getItemLabelPaint 
Paint  getSeriesItemLabelPaint 
None  setSeriesItemLabelPaint 
None  setSeriesItemLabelPaint 
Paint  getBaseItemLabelPaint 
None  setBaseItemLabelPaint 
None  setBaseItemLabelPaint 
ItemLabelPosition  getPositiveItemLabelPosition 
ItemLabelPosition  getSeriesPositiveItemLabelPosition 
None  setSeriesPositiveItemLabelPosition 
None  setSeriesPositiveItemLabelPosition 
ItemLabelPosition  getBasePositiveItemLabelPosition 
None  setBasePositiveItemLabelPosition 
None  setBasePositiveItemLabelPosition 
ItemLabelPosition  getNegativeItemLabelPosition 
ItemLabelPosition  getSeriesNegativeItemLabelPosition 
None  setSeriesNegativeItemLabelPosition 
None  setSeriesNegativeItemLabelPosition 
ItemLabelPosition  getBaseNegativeItemLabelPosition 
None  setBaseNegativeItemLabelPosition 
None  setBaseNegativeItemLabelPosition 
boolean  getItemCreateEntity 
Boolean  getSeriesCreateEntities 
None  setSeriesCreateEntities 
None  setSeriesCreateEntities 
boolean  getBaseCreateEntities 
None  setBaseCreateEntities 
None  setBaseCreateEntities 
Collection  getAnnotations 
None  addAnnotation 
None  addAnnotation 
boolean  removeAnnotation 
None  removeAnnotations 
None  drawAnnotations 
XYItemRendererState  initialise 
None  drawItem 
None  fillDomainGridBand 
None  fillRangeGridBand 
None  drawDomainLine 
None  drawRangeLine 
None  drawDomainMarker 
None  drawRangeMarker 
method
r_ter {'d_ter': 'XYDataset', 'r_ter': 'XYItemRenderer', 'c_ter': 'Collection', 'i_ter': 'Iterator', 'a_ter': 'XYAnnotation', 'it_ter': 'Iterator', 'iterator_ter': 'Iterator'}
7 XYItemRenderer
method
r_ter {'d_ter': 'XYDataset', 'r_ter': 'XYItemRenderer', 'c_ter': 'Collection', 'i_ter': 'Iterator', 'a_ter': 'XYAnnotation', 'it_ter': 'Iterator', 'iterator_ter': 'Iterator'}
7 XYItemRenderer
method
7 
method
7 
method
r_ter {'d_ter': 'XYDataset', 'r_ter': 'XYItemRenderer', 'c_ter': 'Collection', 'i_ter': 'Iterator', 'a_ter': 'XYAnnotation', 'it_ter': 'Iterator', 'iterator_ter': 'Iterator'}
7 XYItemRenderer
method
7 
method
r_ter {'d_ter': 'XYDataset', 'r_ter': 'XYItemRenderer', 'c_ter': 'Collection', 'i_ter': 'Iterator', 'a_ter': 'XYAnnotation', 'it_ter': 'Iterator', 'iterator_ter': 'Iterator'}
7 XYItemRenderer
method
i_ter {'d_ter': 'XYDataset', 'r_ter': 'XYItemRenderer', 'c_ter': 'Collection', 'i_ter': 'Iterator', 'a_ter': 'XYAnnotation', 'it_ter': 'Iterator', 'iterator_ter': 'Iterator'}
7 Iterator
method
r_ter {'d_ter': 'XYDataset', 'r_ter': 'XYItemRenderer', 'c_ter': 'Collection', 'i_ter': 'Iterator', 'a_ter': 'XYAnnotation', 'it_ter': 'Iterator', 'iterator_ter': 'Iterator'}
7 XYItemRenderer
XYPlot  getPlot 
None  setPlot 
int  getPassCount 
Range  findDomainBounds 
Range  findRangeBounds 
None  addChangeListener 
None  removeChangeListener 
boolean  getItemVisible 
boolean  isSeriesVisible 
Boolean  getSeriesVisible 
None  setSeriesVisible 
None  setSeriesVisible 
boolean  getBaseSeriesVisible 
None  setBaseSeriesVisible 
None  setBaseSeriesVisible 
boolean  isSeriesVisibleInLegend 
Boolean  getSeriesVisibleInLegend 
None  setSeriesVisibleInLegend 
None  setSeriesVisibleInLegend 
boolean  getBaseSeriesVisibleInLegend 
None  setBaseSeriesVisibleInLegend 
None  setBaseSeriesVisibleInLegend 
Paint  getItemPaint 
Paint  getSeriesPaint 
None  setSeriesPaint 
None  setSeriesPaint 
Paint  getBasePaint 
None  setBasePaint 
None  setBasePaint 
Paint  getItemFillPaint 
Paint  getSeriesFillPaint 
None  setSeriesFillPaint 
None  setSeriesFillPaint 
Paint  getBaseFillPaint 
None  setBaseFillPaint 
None  setBaseFillPaint 
Paint  getItemOutlinePaint 
Paint  getSeriesOutlinePaint 
None  setSeriesOutlinePaint 
None  setSeriesOutlinePaint 
Paint  getBaseOutlinePaint 
None  setBaseOutlinePaint 
None  setBaseOutlinePaint 
Stroke  getItemStroke 
Stroke  getSeriesStroke 
None  setSeriesStroke 
None  setSeriesStroke 
Stroke  getBaseStroke 
None  setBaseStroke 
None  setBaseStroke 
Stroke  getItemOutlineStroke 
Stroke  getSeriesOutlineStroke 
None  setSeriesOutlineStroke 
None  setSeriesOutlineStroke 
Stroke  getBaseOutlineStroke 
None  setBaseOutlineStroke 
None  setBaseOutlineStroke 
Shape  getItemShape 
Shape  getSeriesShape 
None  setSeriesShape 
None  setSeriesShape 
Shape  getBaseShape 
None  setBaseShape 
None  setBaseShape 
LegendItem  getLegendItem 
XYSeriesLabelGenerator  getLegendItemLabelGenerator 
None  setLegendItemLabelGenerator 
XYSeriesLabelGenerator  getLegendItemToolTipGenerator 
None  setLegendItemToolTipGenerator 
XYSeriesLabelGenerator  getLegendItemURLGenerator 
None  setLegendItemURLGenerator 
XYToolTipGenerator  getToolTipGenerator 
XYToolTipGenerator  getSeriesToolTipGenerator 
None  setSeriesToolTipGenerator 
None  setSeriesToolTipGenerator 
XYToolTipGenerator  getBaseToolTipGenerator 
None  setBaseToolTipGenerator 
None  setBaseToolTipGenerator 
XYURLGenerator  getURLGenerator 
XYURLGenerator  getSeriesURLGenerator 
None  setSeriesURLGenerator 
None  setSeriesURLGenerator 
XYURLGenerator  getBaseURLGenerator 
None  setBaseURLGenerator 
None  setBaseURLGenerator 
boolean  isItemLabelVisible 
boolean  isSeriesItemLabelsVisible 
Boolean  getSeriesItemLabelsVisible 
None  setSeriesItemLabelsVisible 
None  setSeriesItemLabelsVisible 
None  setSeriesItemLabelsVisible 
boolean  getBaseItemLabelsVisible 
None  setBaseItemLabelsVisible 
None  setBaseItemLabelsVisible 
XYItemLabelGenerator  getItemLabelGenerator 
XYItemLabelGenerator  getSeriesItemLabelGenerator 
None  setSeriesItemLabelGenerator 
None  setSeriesItemLabelGenerator 
XYItemLabelGenerator  getBaseItemLabelGenerator 
None  setBaseItemLabelGenerator 
None  setBaseItemLabelGenerator 
Font  getItemLabelFont 
Font  getSeriesItemLabelFont 
None  setSeriesItemLabelFont 
None  setSeriesItemLabelFont 
Font  getBaseItemLabelFont 
None  setBaseItemLabelFont 
None  setBaseItemLabelFont 
Paint  getItemLabelPaint 
Paint  getSeriesItemLabelPaint 
None  setSeriesItemLabelPaint 
None  setSeriesItemLabelPaint 
Paint  getBaseItemLabelPaint 
None  setBaseItemLabelPaint 
None  setBaseItemLabelPaint 
ItemLabelPosition  getPositiveItemLabelPosition 
ItemLabelPosition  getSeriesPositiveItemLabelPosition 
None  setSeriesPositiveItemLabelPosition 
None  setSeriesPositiveItemLabelPosition 
ItemLabelPosition  getBasePositiveItemLabelPosition 
None  setBasePositiveItemLabelPosition 
None  setBasePositiveItemLabelPosition 
ItemLabelPosition  getNegativeItemLabelPosition 
ItemLabelPosition  getSeriesNegativeItemLabelPosition 
None  setSeriesNegativeItemLabelPosition 
None  setSeriesNegativeItemLabelPosition 
ItemLabelPosition  getBaseNegativeItemLabelPosition 
None  setBaseNegativeItemLabelPosition 
None  setBaseNegativeItemLabelPosition 
boolean  getItemCreateEntity 
Boolean  getSeriesCreateEntities 
None  setSeriesCreateEntities 
None  setSeriesCreateEntities 
boolean  getBaseCreateEntities 
None  setBaseCreateEntities 
None  setBaseCreateEntities 
Collection  getAnnotations 
None  addAnnotation 
None  addAnnotation 
boolean  removeAnnotation 
None  removeAnnotations 
None  drawAnnotations 
XYItemRendererState  initialise 
None  drawItem 
None  fillDomainGridBand 
None  fillRangeGridBand 
None  drawDomainLine 
None  drawRangeLine 
None  drawDomainMarker 
None  drawRangeMarker 
method
7 
method
except
stderr: Check out program version: Chart-4b........................................ OK
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=1G; support was removed in 8.0
Running ant (export.dir.src.classes)....................................... OK

  0%|          | 0/1 [00:00<?, ?it/s]/root/projects/Recoder-bwk/run.py:527: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  tmpdepth = np.array(tmpdepth)
/root/envs/recoder/lib/python3.7/site-packages/torch/nn/functional.py:1340: UserWarning: nn.functional.tanh is deprecated. Use torch.tanh instead.
  warnings.warn("nn.functional.tanh is deprecated. Use torch.tanh instead.")
100%|██████████| 1/1 [00:32<00:00, 32.54s/it]100%|██████████| 1/1 [00:32<00:00, 32.54s/it]
