stdout: LocalVariableDeclaration type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name hasSideEffects_ter ^ ^ initializer Literal value true_ter ^ ^ ^ ^ ^ ^ ^ 
boolean hasSideEffects = true;

LocalVariableDeclaration type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name hasSideEffects_ter ^ ^ initializer Literal value false_ter ^ ^ ^ ^ ^ ^ ^ 
boolean hasSideEffects = false;

LocalVariableDeclaration type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name hasSideEffects_ter ^ ^ ^ ^ ^ 
boolean hasSideEffects = ;


StatementExpression expression MethodInvocation qualifier block_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
block.detachChildren();

StatementExpression expression MethodInvocation qualifier block_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
block.setQuotedString();


IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member block_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((block != null)){

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.hasOneChild());

StatementExpression expression Assignment expressionl MemberReference member cArg_ter ^ ^ ^ ^ value MethodInvocation qualifier cArg_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
cArg = cArg.getNext();

ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if (true) { return CanInlineResult.NO; }

LocalVariableDeclaration type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name hasSideEffects_ter ^ ^ initializer Literal prefix_operators -_ter ^ ^ value false_ter ^ ^ ^ ^ ^ ^ ^ 
boolean hasSideEffects = -false;

StatementExpression expression Assignment expressionl MemberReference member fnParam_ter ^ ^ ^ ^ value MethodInvocation qualifier fnParam_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
fnParam = fnParam.getNext();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name hasSideEffects_ter ^ ^ initializer Literal value false_ter ^ ^ ^ ^ ^ ^ ^ 
int hasSideEffects = false;

LocalVariableDeclaration type BasicType name long_ter ^ ^ ^ ^ declarators VariableDeclarator name hasSideEffects_ter ^ ^ initializer Literal value false_ter ^ ^ ^ ^ ^ ^ ^ 
long hasSideEffects = false;

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);

ReturnStatement_ter ^ 
if (true) { return;
 }

LocalVariableDeclaration type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name hasSideEffects_ter ^ ^ initializer Literal prefix_operators -_ter ^ ^ value true_ter ^ ^ ^ ^ ^ ^ ^ 
boolean hasSideEffects = -true;

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation prefix_operators !_ter ^ ^ qualifier NodeUtil_ter ^ ^ arguments MemberReference member callNode_ter ^ ^ ^ ^ member isFunctionObjectApply_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member cArg_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((cArg == null)){

ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if (true) { return false; }

StatementExpression expression Assignment expressionl MemberReference member block_ter ^ ^ ^ ^ value MethodInvocation qualifier block_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
block = block.detachChildren();

StatementExpression expression Assignment expressionl MemberReference member block_ter ^ ^ ^ ^ value MethodInvocation qualifier block_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
block = block.setQuotedString();

ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if (true) { return true; }

LocalVariableDeclaration type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name hasSideEffects_ter ^ ^ initializer Literal prefix_operators -_ter ^ ^ value 1_ter ^ ^ ^ ^ ^ ^ ^ 
boolean hasSideEffects = -1;

LocalVariableDeclaration type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name stmt_ter ^ ^ ^ ^ ^ 
boolean stmt = ;


IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member cArg_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((cArg != null)){

LocalVariableDeclaration type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name hasSideEffects_ter ^ ^ initializer Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
boolean hasSideEffects = "null";

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.hasChildren()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isFromExterns()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.hasOneChild()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.hasMoreThanOneChild()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isQualifiedName()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isUnscopedQualifiedName()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isVarArgs()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isOptionalArg()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isSyntheticBlock()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.wasEmptyNode()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isOnlyModifiesThisCall()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isOnlyModifiesArgumentsCall()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isNoSideEffectsCall()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isLocalResultCall()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.mayMutateArguments()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.mayMutateGlobalStateOrThrow()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isQuotedString()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isAdd()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isAnd()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isArrayLit()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isAssign()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isAssignAdd()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isBlock()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isBreak()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isCall()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isCase()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isCast()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isCatch()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isComma()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isContinue()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isDebugger()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isDec()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isDefaultCase()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isDelProp()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isDo()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isEmpty()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isExprResult()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isFalse()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isFor()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isFunction()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isGetterDef()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isGetElem()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isGetProp()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isHook()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isIf()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isIn()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isInc()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isInstanceOf()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isLabel()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isLabelName()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isName()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isNE()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isNew()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isNot()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isNull()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isNumber()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isObjectLit()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isOr()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isParamList()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isRegExp()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isReturn()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isScript()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isSetterDef()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isString()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isStringKey()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isSwitch()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isThis()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isThrow()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isTrue()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isTry()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isTypeOf()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isVar()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isVoid()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isWhile()){
return CanInlineResult.NO;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if(block.isWith()){
return CanInlineResult.NO;}
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member YES_ter ^ ^ ^ ^ ^ 
if (true) { return CanInlineResult.YES; }

LocalVariableDeclaration type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name hasSideEffects_ter ^ ^ initializer Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
boolean hasSideEffects = null;

BreakStatement_ter ^ 
break;

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.hasChildren()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isFromExterns()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.hasOneChild()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.hasMoreThanOneChild()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isQualifiedName()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isUnscopedQualifiedName()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isVarArgs()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isOptionalArg()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isSyntheticBlock()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.wasEmptyNode()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isOnlyModifiesThisCall()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isOnlyModifiesArgumentsCall()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isNoSideEffectsCall()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isLocalResultCall()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.mayMutateArguments()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.mayMutateGlobalStateOrThrow()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isQuotedString()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isAdd()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isAnd()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isArrayLit()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isAssign()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isAssignAdd()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isBlock()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isBreak()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isCall()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isCase()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isCast()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isCatch()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isComma()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isContinue()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isDebugger()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isDec()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isDefaultCase()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isDelProp()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isDo()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isEmpty()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isExprResult()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isFalse()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isFor()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isFunction()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isGetterDef()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isGetElem()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isGetProp()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isHook()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isIf()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isIn()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isInc()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isInstanceOf()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isLabel()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isLabelName()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isName()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isNE()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isNew()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isNot()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isNull()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isNumber()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isObjectLit()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isOr()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isParamList()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isRegExp()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isReturn()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isScript()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isSetterDef()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isString()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isStringKey()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isSwitch()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isThis()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isThrow()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isTrue()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isTry()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isTypeOf()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isVar()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isVoid()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isWhile()){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(block.isWith()){
return false;}
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member block_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if((block == null)){
return CanInlineResult.NO;}
LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name stmt_ter ^ ^ initializer MethodInvocation qualifier block_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node stmt = block.getFirstChild();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member block_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if((block == null)){
return false;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.hasChildren()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isFromExterns()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.hasOneChild()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.hasMoreThanOneChild()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isQualifiedName()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isUnscopedQualifiedName()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isVarArgs()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isOptionalArg()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isSyntheticBlock()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.wasEmptyNode()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isOnlyModifiesThisCall()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isOnlyModifiesArgumentsCall()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isNoSideEffectsCall()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isLocalResultCall()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.mayMutateArguments()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.mayMutateGlobalStateOrThrow()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isQuotedString()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isAdd()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isAnd()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isArrayLit()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isAssign()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isAssignAdd()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isBlock()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isBreak()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isCall()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isCase()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isCast()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isCatch()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isComma()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isContinue()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isDebugger()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isDec()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isDefaultCase()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isDelProp()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isDo()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isEmpty()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isExprResult()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isFalse()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isFor()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isFunction()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isGetterDef()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isGetElem()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isGetProp()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isHook()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isIf()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isIn()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isInc()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isInstanceOf()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isLabel()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isLabelName()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isName()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isNE()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isNew()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isNot()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isNull()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isNumber()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isObjectLit()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isOr()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isParamList()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isRegExp()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isReturn()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isScript()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isSetterDef()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isString()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isStringKey()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isSwitch()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isThis()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isThrow()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isTrue()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isTry()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isTypeOf()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isVar()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isVoid()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isWhile()){
return true;}
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if(block.isWith()){
return true;}
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member block_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if((block != null)){
return CanInlineResult.NO;}
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member block_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if((block != null)){
return false;}
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member block_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if((block == null)){
return true;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ arguments MemberReference member fnNode_ter ^ ^ ^ ^ member isDirectCallNodeReplacementPossible_ter ^ ^ ^ ^ ^ 
if(!isDirectCallNodeReplacementPossible(fnNode)){

condition MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ 
if(block.hasChildren()){
condition MethodInvocation qualifier block_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ 
if(block.isFromExterns()){
condition MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ 
if(block.hasOneChild()){
condition MethodInvocation qualifier block_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ 
if(block.hasMoreThanOneChild()){
condition MethodInvocation qualifier block_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ 
if(block.isQualifiedName()){
condition MethodInvocation qualifier block_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ 
if(block.isUnscopedQualifiedName()){
condition MethodInvocation qualifier block_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ 
if(block.isVarArgs()){
condition MethodInvocation qualifier block_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ 
if(block.isOptionalArg()){
condition MethodInvocation qualifier block_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ 
if(block.isSyntheticBlock()){
condition MethodInvocation qualifier block_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ 
if(block.wasEmptyNode()){
condition MethodInvocation qualifier block_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ 
if(block.isOnlyModifiesThisCall()){
condition MethodInvocation qualifier block_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ 
if(block.isOnlyModifiesArgumentsCall()){
condition MethodInvocation qualifier block_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ 
if(block.isNoSideEffectsCall()){
condition MethodInvocation qualifier block_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ 
if(block.isLocalResultCall()){
condition MethodInvocation qualifier block_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ 
if(block.mayMutateArguments()){
condition MethodInvocation qualifier block_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ 
if(block.mayMutateGlobalStateOrThrow()){
condition MethodInvocation qualifier block_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ 
if(block.isQuotedString()){
condition MethodInvocation qualifier block_ter ^ ^ member isAdd_ter ^ ^ ^ ^ 
if(block.isAdd()){
condition MethodInvocation qualifier block_ter ^ ^ member isAnd_ter ^ ^ ^ ^ 
if(block.isAnd()){
condition MethodInvocation qualifier block_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ 
if(block.isArrayLit()){
condition MethodInvocation qualifier block_ter ^ ^ member isAssign_ter ^ ^ ^ ^ 
if(block.isAssign()){
condition MethodInvocation qualifier block_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ 
if(block.isAssignAdd()){
condition MethodInvocation qualifier block_ter ^ ^ member isBlock_ter ^ ^ ^ ^ 
if(block.isBlock()){
condition MethodInvocation qualifier block_ter ^ ^ member isBreak_ter ^ ^ ^ ^ 
if(block.isBreak()){
condition MethodInvocation qualifier block_ter ^ ^ member isCall_ter ^ ^ ^ ^ 
if(block.isCall()){
condition MethodInvocation qualifier block_ter ^ ^ member isCase_ter ^ ^ ^ ^ 
if(block.isCase()){
condition MethodInvocation qualifier block_ter ^ ^ member isCast_ter ^ ^ ^ ^ 
if(block.isCast()){
condition MethodInvocation qualifier block_ter ^ ^ member isCatch_ter ^ ^ ^ ^ 
if(block.isCatch()){
condition MethodInvocation qualifier block_ter ^ ^ member isComma_ter ^ ^ ^ ^ 
if(block.isComma()){
condition MethodInvocation qualifier block_ter ^ ^ member isContinue_ter ^ ^ ^ ^ 
if(block.isContinue()){
condition MethodInvocation qualifier block_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ 
if(block.isDebugger()){
condition MethodInvocation qualifier block_ter ^ ^ member isDec_ter ^ ^ ^ ^ 
if(block.isDec()){
condition MethodInvocation qualifier block_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ 
if(block.isDefaultCase()){
condition MethodInvocation qualifier block_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ 
if(block.isDelProp()){
condition MethodInvocation qualifier block_ter ^ ^ member isDo_ter ^ ^ ^ ^ 
if(block.isDo()){
condition MethodInvocation qualifier block_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ 
if(block.isEmpty()){
condition MethodInvocation qualifier block_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ 
if(block.isExprResult()){
condition MethodInvocation qualifier block_ter ^ ^ member isFalse_ter ^ ^ ^ ^ 
if(block.isFalse()){
condition MethodInvocation qualifier block_ter ^ ^ member isFor_ter ^ ^ ^ ^ 
if(block.isFor()){
condition MethodInvocation qualifier block_ter ^ ^ member isFunction_ter ^ ^ ^ ^ 
if(block.isFunction()){
condition MethodInvocation qualifier block_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ 
if(block.isGetterDef()){
condition MethodInvocation qualifier block_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ 
if(block.isGetElem()){
condition MethodInvocation qualifier block_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ 
if(block.isGetProp()){
condition MethodInvocation qualifier block_ter ^ ^ member isHook_ter ^ ^ ^ ^ 
if(block.isHook()){
condition MethodInvocation qualifier block_ter ^ ^ member isIf_ter ^ ^ ^ ^ 
if(block.isIf()){
condition MethodInvocation qualifier block_ter ^ ^ member isIn_ter ^ ^ ^ ^ 
if(block.isIn()){
condition MethodInvocation qualifier block_ter ^ ^ member isInc_ter ^ ^ ^ ^ 
if(block.isInc()){
condition MethodInvocation qualifier block_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ 
if(block.isInstanceOf()){
condition MethodInvocation qualifier block_ter ^ ^ member isLabel_ter ^ ^ ^ ^ 
if(block.isLabel()){
condition MethodInvocation qualifier block_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ 
if(block.isLabelName()){
condition MethodInvocation qualifier block_ter ^ ^ member isName_ter ^ ^ ^ ^ 
if(block.isName()){
condition MethodInvocation qualifier block_ter ^ ^ member isNE_ter ^ ^ ^ ^ 
if(block.isNE()){
condition MethodInvocation qualifier block_ter ^ ^ member isNew_ter ^ ^ ^ ^ 
if(block.isNew()){
condition MethodInvocation qualifier block_ter ^ ^ member isNot_ter ^ ^ ^ ^ 
if(block.isNot()){
condition MethodInvocation qualifier block_ter ^ ^ member isNull_ter ^ ^ ^ ^ 
if(block.isNull()){
condition MethodInvocation qualifier block_ter ^ ^ member isNumber_ter ^ ^ ^ ^ 
if(block.isNumber()){
condition MethodInvocation qualifier block_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ 
if(block.isObjectLit()){
condition MethodInvocation qualifier block_ter ^ ^ member isOr_ter ^ ^ ^ ^ 
if(block.isOr()){
condition MethodInvocation qualifier block_ter ^ ^ member isParamList_ter ^ ^ ^ ^ 
if(block.isParamList()){
condition MethodInvocation qualifier block_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ 
if(block.isRegExp()){
condition MethodInvocation qualifier block_ter ^ ^ member isReturn_ter ^ ^ ^ ^ 
if(block.isReturn()){
condition MethodInvocation qualifier block_ter ^ ^ member isScript_ter ^ ^ ^ ^ 
if(block.isScript()){
condition MethodInvocation qualifier block_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ 
if(block.isSetterDef()){
condition MethodInvocation qualifier block_ter ^ ^ member isString_ter ^ ^ ^ ^ 
if(block.isString()){
condition MethodInvocation qualifier block_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ 
if(block.isStringKey()){
condition MethodInvocation qualifier block_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ 
if(block.isSwitch()){
condition MethodInvocation qualifier block_ter ^ ^ member isThis_ter ^ ^ ^ ^ 
if(block.isThis()){
condition MethodInvocation qualifier block_ter ^ ^ member isThrow_ter ^ ^ ^ ^ 
if(block.isThrow()){
condition MethodInvocation qualifier block_ter ^ ^ member isTrue_ter ^ ^ ^ ^ 
if(block.isTrue()){
condition MethodInvocation qualifier block_ter ^ ^ member isTry_ter ^ ^ ^ ^ 
if(block.isTry()){
condition MethodInvocation qualifier block_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ 
if(block.isTypeOf()){
condition MethodInvocation qualifier block_ter ^ ^ member isVar_ter ^ ^ ^ ^ 
if(block.isVar()){
condition MethodInvocation qualifier block_ter ^ ^ member isVoid_ter ^ ^ ^ ^ 
if(block.isVoid()){
condition MethodInvocation qualifier block_ter ^ ^ member isWhile_ter ^ ^ ^ ^ 
if(block.isWhile()){
condition MethodInvocation qualifier block_ter ^ ^ member isWith_ter ^ ^ ^ ^ 
if(block.isWith()){
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(!block.hasChildren()){

condition MethodInvocation qualifier hasSideEffects_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ 
if(hasSideEffects.hasChildren()){
IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
if(block.isFromExterns()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
if(block.hasOneChild()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
if(block.hasMoreThanOneChild()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(block.isQualifiedName()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
if(block.isUnscopedQualifiedName()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
if(block.isVarArgs()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
if(block.isOptionalArg()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
if(block.isSyntheticBlock()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
if(block.wasEmptyNode()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
if(block.isOnlyModifiesThisCall()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ ^ 
if(block.isOnlyModifiesArgumentsCall()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
if(block.isNoSideEffectsCall()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
if(block.isLocalResultCall()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ ^ 
if(block.mayMutateArguments()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ ^ 
if(block.mayMutateGlobalStateOrThrow()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
if(block.isQuotedString()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
if(block.isAdd()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
if(block.isAnd()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
if(block.isArrayLit()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
if(block.isAssign()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
if(block.isAssignAdd()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
if(block.isBlock()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
if(block.isBreak()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
if(block.isCall()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
if(block.isCase()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ 
if(block.isCast()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
if(block.isCatch()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
if(block.isComma()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
if(block.isContinue()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
if(block.isDebugger()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
if(block.isDec()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
if(block.isDefaultCase()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
if(block.isDelProp()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
if(block.isDo()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(block.isEmpty()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
if(block.isExprResult()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
if(block.isFalse()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
if(block.isFor()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
if(block.isFunction()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
if(block.isGetterDef()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
if(block.isGetElem()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(block.isGetProp()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
if(block.isHook()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
if(block.isIf()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
if(block.isIn()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
if(block.isInc()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
if(block.isInstanceOf()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
if(block.isLabel()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
if(block.isLabelName()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
if(block.isName()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
if(block.isNE()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
if(block.isNew()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
if(block.isNot()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
if(block.isNull()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(block.isNumber()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
if(block.isObjectLit()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
if(block.isOr()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
if(block.isParamList()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
if(block.isRegExp()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
if(block.isReturn()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
if(block.isScript()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
if(block.isSetterDef()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(block.isString()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
if(block.isStringKey()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
if(block.isSwitch()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
if(block.isThis()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
if(block.isThrow()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
if(block.isTrue()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
if(block.isTry()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
if(block.isTypeOf()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(block.isVar()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
if(block.isVoid()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
if(block.isWhile()){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
if(block.isWith()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isOnlyModifiesArgumentsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.mayMutateArguments())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.mayMutateGlobalStateOrThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isCast())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && block.isWith())){

condition MethodInvocation qualifier block_ter ^ ^ member getNext_ter ^ ^ ^ ^ 
if(block.getNext()){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isOnlyModifiesArgumentsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.mayMutateArguments())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.mayMutateGlobalStateOrThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isCast())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !block.isWith())){

condition MethodInvocation qualifier block_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ 
if(block.getFirstChild()){
condition MethodInvocation qualifier block_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ 
if(block.getLastChild()){
condition MethodInvocation qualifier par0 ^ ^ member hasChildren_ter ^ ^ ^ ^ 
if(.hasChildren()){

condition MethodInvocation qualifier stmt_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ 
if(stmt.hasChildren()){
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
if(!block.isFromExterns()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
if(!block.hasOneChild()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
if(!block.hasMoreThanOneChild()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(!block.isQualifiedName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
if(!block.isUnscopedQualifiedName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
if(!block.isVarArgs()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
if(!block.isOptionalArg()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
if(!block.isSyntheticBlock()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
if(!block.wasEmptyNode()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
if(!block.isOnlyModifiesThisCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ ^ 
if(!block.isOnlyModifiesArgumentsCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
if(!block.isNoSideEffectsCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
if(!block.isLocalResultCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ ^ 
if(!block.mayMutateArguments()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ ^ 
if(!block.mayMutateGlobalStateOrThrow()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
if(!block.isQuotedString()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
if(!block.isAdd()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
if(!block.isAnd()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
if(!block.isArrayLit()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
if(!block.isAssign()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
if(!block.isAssignAdd()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
if(!block.isBlock()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
if(!block.isBreak()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
if(!block.isCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
if(!block.isCase()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ 
if(!block.isCast()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
if(!block.isCatch()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
if(!block.isComma()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
if(!block.isContinue()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
if(!block.isDebugger()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
if(!block.isDec()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
if(!block.isDefaultCase()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
if(!block.isDelProp()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
if(!block.isDo()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(!block.isEmpty()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
if(!block.isExprResult()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
if(!block.isFalse()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
if(!block.isFor()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
if(!block.isFunction()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
if(!block.isGetterDef()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
if(!block.isGetElem()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(!block.isGetProp()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
if(!block.isHook()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
if(!block.isIf()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
if(!block.isIn()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
if(!block.isInc()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
if(!block.isInstanceOf()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
if(!block.isLabel()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
if(!block.isLabelName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
if(!block.isName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
if(!block.isNE()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
if(!block.isNew()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
if(!block.isNot()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
if(!block.isNull()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(!block.isNumber()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
if(!block.isObjectLit()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
if(!block.isOr()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
if(!block.isParamList()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
if(!block.isRegExp()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
if(!block.isReturn()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
if(!block.isScript()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
if(!block.isSetterDef()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(!block.isString()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
if(!block.isStringKey()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
if(!block.isSwitch()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
if(!block.isThis()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
if(!block.isThrow()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
if(!block.isTrue()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
if(!block.isTry()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
if(!block.isTypeOf()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(!block.isVar()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
if(!block.isVoid()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
if(!block.isWhile()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
if(!block.isWith()){

condition MethodInvocation qualifier callNode_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ 
if(callNode.hasChildren()){
IfStatement condition MemberReference prefix_operators !_ter ^ ^ member block_ter ^ ^ ^ ^ ^ 
if(!block){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier cArg_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && !cArg.isThis())){

condition MethodInvocation qualifier NodeUtil_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ 
if(NodeUtil.hasChildren()){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.hasChildren())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isFromExterns())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.hasOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isVarArgs())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isOptionalArg())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isSyntheticBlock())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.wasEmptyNode())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isOnlyModifiesArgumentsCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isLocalResultCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.mayMutateArguments())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.mayMutateGlobalStateOrThrow())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isQuotedString())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isAdd())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isAnd())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isArrayLit())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isAssign())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isAssignAdd())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isBlock())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isBreak())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isCase())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isCast())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isCatch())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isComma())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isContinue())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isDebugger())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isDec())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isDefaultCase())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isDelProp())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isDo())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isEmpty())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isExprResult())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isFalse())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isFor())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isFunction())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isGetterDef())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isGetElem())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isGetProp())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isHook())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isIf())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isIn())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isInc())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isInstanceOf())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isLabel())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isLabelName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isNE())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isNew())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isNot())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isNull())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isNumber())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isObjectLit())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isOr())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isParamList())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isRegExp())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isReturn())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isScript())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isSetterDef())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isString())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isStringKey())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isSwitch())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isThis())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isThrow())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isTrue())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isTry())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isTypeOf())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isVar())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isVoid())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isWhile())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || block.isWith())){

IfStatement condition MemberReference member block_ter ^ ^ ^ ^ ^ 
if(block){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member hasSideEffects_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((hasSideEffects != null)){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ arguments MemberReference member callNode_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(!block.hasChildren(callNode)){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.hasChildren())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isFromExterns())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.hasOneChild())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.hasMoreThanOneChild())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isQualifiedName())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isUnscopedQualifiedName())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isVarArgs())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isOptionalArg())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isSyntheticBlock())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.wasEmptyNode())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isOnlyModifiesThisCall())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isOnlyModifiesArgumentsCall())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isNoSideEffectsCall())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isLocalResultCall())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.mayMutateArguments())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.mayMutateGlobalStateOrThrow())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isQuotedString())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isAdd_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isAdd())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isAnd_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isAnd())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isArrayLit())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isAssign_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isAssign())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isAssignAdd())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isBlock_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isBlock())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isBreak_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isBreak())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isCall_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isCall())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isCase_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isCase())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isCast_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isCast())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isCatch_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isCatch())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isComma_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isComma())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isContinue_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isContinue())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isDebugger())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isDec_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isDec())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isDefaultCase())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isDelProp())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isDo_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isDo())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isEmpty())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isExprResult())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isFalse_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isFalse())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isFor_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isFor())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isFunction_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isFunction())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isGetterDef())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isGetElem())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isGetProp())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isHook_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isHook())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isIf_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isIf())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isIn_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isIn())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isInc_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isInc())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isInstanceOf())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isLabel_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isLabel())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isLabelName())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isName_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isName())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isNE_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isNE())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isNew_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isNew())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isNot_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isNot())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isNull_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isNull())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isNumber_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isNumber())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isObjectLit())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isOr_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isOr())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isParamList_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isParamList())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isRegExp())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isReturn_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isReturn())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isScript_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isScript())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isSetterDef())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isString_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isString())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isStringKey())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isSwitch())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isThis_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isThis())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isThrow_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isThrow())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isTrue_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isTrue())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isTry_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isTry())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isTypeOf())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isVar_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isVar())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isVoid_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isVoid())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isWhile_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isWhile())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isWith_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(block.isWith())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MemberReference member callNode_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(callNode)){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.hasChildren())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isFromExterns())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.hasOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isVarArgs())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isOptionalArg())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isSyntheticBlock())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.wasEmptyNode())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isOnlyModifiesArgumentsCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isLocalResultCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.mayMutateArguments())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.mayMutateGlobalStateOrThrow())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isQuotedString())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isAdd())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isAnd())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isArrayLit())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isAssign())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isAssignAdd())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isBlock())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isBreak())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isCase())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isCast())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isCatch())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isComma())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isContinue())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isDebugger())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isDec())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isDefaultCase())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isDelProp())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isDo())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isEmpty())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isExprResult())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isFalse())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isFor())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isFunction())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isGetterDef())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isGetElem())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isGetProp())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isHook())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isIf())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isIn())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isInc())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isInstanceOf())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isLabel())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isLabelName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isNE())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isNew())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isNot())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isNull())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isNumber())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isObjectLit())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isOr())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isParamList())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isRegExp())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isReturn())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isScript())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isSetterDef())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isString())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isStringKey())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isSwitch())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isThis())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isThrow())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isTrue())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isTry())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isTypeOf())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isVar())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isVoid())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isWhile())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() || !block.isWith())){

StatementExpression expression Assignment expressionl MemberReference member cArg_ter ^ ^ ^ ^ value MethodInvocation qualifier cArg_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
cArg = cArg.getNext();

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member cArg_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if(((cArg == null) && block.hasChildren())){

IfStatement condition MethodInvocation member hasChildren_ter ^ ^ ^ ^ ^ 
if(hasChildren()){



StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);

StatementExpression expression Assignment expressionl MemberReference member fnParam_ter ^ ^ ^ ^ value MethodInvocation qualifier fnParam_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
fnParam = fnParam.getNext();

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ arguments MemberReference member fnNode_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(!block.hasChildren(fnNode)){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MemberReference member hasSideEffects_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(hasSideEffects)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member block_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if(((block != null) && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member fnParam_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((block.hasChildren() && (fnParam != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isFromExterns() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasOneChild() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.hasMoreThanOneChild() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isQualifiedName() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isUnscopedQualifiedName() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isVarArgs() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isOptionalArg() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isSyntheticBlock() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.wasEmptyNode() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isOnlyModifiesThisCall() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isOnlyModifiesArgumentsCall() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isNoSideEffectsCall() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isLocalResultCall() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.mayMutateArguments() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.mayMutateGlobalStateOrThrow() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isQuotedString() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isAdd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isAdd() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isAnd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isAnd() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isArrayLit() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isAssign_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isAssign() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isAssignAdd() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isBlock_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isBlock() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isBreak_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isBreak() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isCall() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isCase_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isCase() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isCast_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isCast() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isCatch_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isCatch() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isComma_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isComma() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isContinue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isContinue() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isDebugger() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isDec_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isDec() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isDefaultCase() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isDelProp() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isDo_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isDo() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isEmpty() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isExprResult() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isFalse_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isFalse() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isFor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isFor() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isFunction_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isFunction() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isGetterDef() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isGetElem() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isGetProp() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isHook_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isHook() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isIf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isIf() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isIn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isIn() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isInc_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isInc() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isInstanceOf() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isLabel_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isLabel() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isLabelName() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isName() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isNE_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isNE() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isNew_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isNew() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isNot_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isNot() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isNull_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isNull() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isNumber_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isNumber() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isObjectLit() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isOr_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isOr() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isParamList_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isParamList() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isRegExp() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isReturn() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isScript_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isScript() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isSetterDef() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isString() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isStringKey() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isSwitch() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isThis_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isThis() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isThrow_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isThrow() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isTrue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isTrue() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isTry_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isTry() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isTypeOf() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isVar() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isVoid_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isVoid() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isWhile_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isWhile() && block.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier block_ter ^ ^ member isWith_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((block.isWith() && block.hasChildren())){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(!block.hasChildren().isName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(!block.hasChildren(block.hasOneChild())){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ arguments MemberReference member fnNode_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren(fnNode)){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier block_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(!block.hasChildren(stmt.getFirstChild(), compiler)){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ selectors MethodInvocation member hasChildren_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren().hasChildren()){

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.hasChildren());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isFromExterns());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.hasOneChild());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.hasMoreThanOneChild());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isQualifiedName());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isUnscopedQualifiedName());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isVarArgs());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isOptionalArg());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isSyntheticBlock());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.wasEmptyNode());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isOnlyModifiesThisCall());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isOnlyModifiesArgumentsCall());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isNoSideEffectsCall());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isLocalResultCall());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.mayMutateArguments());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.mayMutateGlobalStateOrThrow());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isQuotedString());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isAdd_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isAdd());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isAnd_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isAnd());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isArrayLit());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isAssign_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isAssign());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isAssignAdd());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isBlock_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isBlock());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isBreak_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isBreak());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isCall_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isCall());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isCase_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isCase());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isCast_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isCast());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isCatch_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isCatch());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isComma_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isComma());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isContinue_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isContinue());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isDebugger());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isDec_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isDec());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isDefaultCase());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isDelProp());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isDo_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isDo());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isEmpty());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isExprResult());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isFalse_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isFalse());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isFor_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isFor());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isFunction_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isFunction());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isGetterDef());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isGetElem());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isGetProp());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isHook_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isHook());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isIf_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isIf());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isIn_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isIn());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isInc_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isInc());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isInstanceOf());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isLabel_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isLabel());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isLabelName());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isName_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isName());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isNE_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isNE());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isNew_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isNew());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isNot_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isNot());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isNull_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isNull());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isNumber_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isNumber());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isObjectLit());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isOr_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isOr());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isParamList_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isParamList());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isRegExp());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isReturn_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isReturn());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isScript_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isScript());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isSetterDef());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isString_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isString());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isStringKey());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isSwitch());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isThis_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isThis());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isThrow_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isThrow());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isTrue_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isTrue());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isTry_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isTry());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isTypeOf());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isVar_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isVar());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isVoid_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isVoid());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isWhile_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isWhile());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member isWith_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.isWith());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member canInlineReferenceDirectly_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.canInlineReferenceDirectly());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MemberReference member block_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block);

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member isDirectCallNodeReplacementPossible_ter ^ ^ ^ ^ ^ 
Preconditions.isDirectCallNodeReplacementPossible(block.hasOneChild());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member getNext_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.getNext());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.getFirstChild());

StatementExpression expression MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
block.checkState(block.hasOneChild());

StatementExpression expression MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
NodeUtil.checkState(block.hasOneChild());

IfStatement condition MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
if(Preconditions.checkState(block.hasOneChild())){


StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier cArg_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(cArg.hasOneChild());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier hasSideEffects_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(hasSideEffects.hasOneChild());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier callNode_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(callNode.hasOneChild());

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member isFunctionObjectCall_ter ^ ^ ^ ^ ^ 
Preconditions.isFunctionObjectCall(block.hasOneChild());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier par0 ^ ^ member hasOneChild_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(.hasOneChild());


StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState();

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation prefix_operators !_ter ^ ^ qualifier NodeUtil_ter ^ ^ arguments MemberReference member callNode_ter ^ ^ ^ ^ member isFunctionObjectApply_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier NodeUtil_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(NodeUtil.hasOneChild());

StatementExpression expression Assignment expressionl MemberReference member cArg_ter ^ ^ ^ ^ value MethodInvocation qualifier cArg_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
cArg = cArg.getNext();

StatementExpression expression Assignment expressionl MemberReference member cArg_ter ^ ^ ^ ^ value MethodInvocation qualifier cArg_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
cArg = cArg.getNext();

StatementExpression expression MethodInvocation arguments MemberReference member block_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
checkState(block);


StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.hasOneChild(), false);

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ ^ 
Preconditions.mayHaveSideEffects(block.hasOneChild());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member canInlineReferenceDirectly_ter ^ ^ ^ ^ ^ 
Preconditions.canInlineReferenceDirectly(block.hasOneChild());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(stmt.getFirstChild());

StatementExpression expression Assignment expressionl MemberReference member fnParam_ter ^ ^ ^ ^ value MethodInvocation qualifier fnParam_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
fnParam = fnParam.getNext();

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ ^ 
Preconditions.debug(block.hasOneChild());

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
checkState(block.hasOneChild());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.hasOneChild(), true);

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments Literal value false_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(false);

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MemberReference member callNode_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(callNode);

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation prefix_operators !_ter ^ ^ qualifier NodeUtil_ter ^ ^ arguments MemberReference member callNode_ter ^ ^ ^ ^ member isFunctionObjectApply_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));

StatementExpression expression Assignment expressionl MemberReference member fnParam_ter ^ ^ ^ ^ value MethodInvocation qualifier fnParam_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
fnParam = fnParam.getNext();

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments Literal value true_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(true);

StatementExpression expression MethodInvocation member checkState_ter ^ ^ ^ ^ ^ 
checkState();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member cArg_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((cArg == null)){

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MemberReference member hasSideEffects_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(hasSideEffects);

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren()){

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ MemberReference member block_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.hasOneChild(), block);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name stmt_ter ^ ^ initializer MethodInvocation qualifier block_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node stmt = block.getFirstChild();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name stmt_ter ^ ^ initializer MethodInvocation qualifier block_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node stmt = block.getLastChild();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name stmt_ter ^ ^ initializer MethodInvocation qualifier block_ter ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node stmt = block.getNext();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name stmt_ter ^ ^ initializer MethodInvocation qualifier block_ter ^ ^ member getLastSibling_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node stmt = block.getLastSibling();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name stmt_ter ^ ^ initializer MethodInvocation qualifier block_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node stmt = block.getParent();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name stmt_ter ^ ^ initializer MethodInvocation qualifier block_ter ^ ^ member detachFromParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node stmt = block.detachFromParent();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name stmt_ter ^ ^ initializer MethodInvocation qualifier block_ter ^ ^ member removeFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node stmt = block.removeFirstChild();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name stmt_ter ^ ^ initializer MethodInvocation qualifier block_ter ^ ^ member removeChildren_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node stmt = block.removeChildren();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name stmt_ter ^ ^ initializer MethodInvocation qualifier block_ter ^ ^ member cloneNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node stmt = block.cloneNode();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name stmt_ter ^ ^ initializer MethodInvocation qualifier block_ter ^ ^ member cloneTree_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node stmt = block.cloneTree();

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.hasOneChild());

ReturnStatement_ter ^ 
if (true) { return;
 }

ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if (true) { return CanInlineResult.NO; }

StatementExpression expression Assignment expressionl MemberReference member cArg_ter ^ ^ ^ ^ value MethodInvocation qualifier cArg_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
cArg = cArg.getNext();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name stmt_ter ^ ^ initializer MethodInvocation qualifier block_ter ^ ^ member canInlineReferenceDirectly_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node stmt = block.canInlineReferenceDirectly();

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);

StatementExpression expression Assignment expressionl MemberReference member fnParam_ter ^ ^ ^ ^ value MethodInvocation qualifier fnParam_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
fnParam = fnParam.getNext();

BreakStatement_ter ^ 
break;

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name stmt_ter ^ ^ initializer MethodInvocation qualifier block_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node stmt = block.isThis();

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation prefix_operators !_ter ^ ^ qualifier NodeUtil_ter ^ ^ arguments MemberReference member callNode_ter ^ ^ ^ ^ member isFunctionObjectApply_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name stmt_ter ^ ^ initializer MethodInvocation qualifier cArg_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node stmt = cArg.getFirstChild();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name stmt_ter ^ ^ initializer MethodInvocation qualifier block_ter ^ ^ member getName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node stmt = block.getName();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name stmt_ter ^ ^ initializer MethodInvocation qualifier block_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node stmt = block.isName();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name stmt_ter ^ ^ initializer MethodInvocation qualifier hasSideEffects_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node stmt = hasSideEffects.getFirstChild();

ContinueStatement_ter ^ 
continue;

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name stmt_ter ^ ^ initializer MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node stmt = block.hasOneChild();

ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if (true) { return false; }

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name stmt_ter ^ ^ initializer MethodInvocation qualifier callNode_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node stmt = callNode.getFirstChild();

ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member YES_ter ^ ^ ^ ^ ^ 
if (true) { return CanInlineResult.YES; }

ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if (true) { return true; }

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name stmt_ter ^ ^ initializer MethodInvocation qualifier par0 ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node stmt = .getFirstChild();


LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name stmt_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node stmt = NodeUtil.getFirstChild();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member cArg_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((cArg == null)){

StatementExpression expression MethodInvocation qualifier block_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
block.detachChildren();

StatementExpression expression MethodInvocation qualifier block_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
block.setQuotedString();


IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member block_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((block != null)){

IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member block_ter ^ ^ ^ MethodInvocation qualifier fnParam_ter ^ ^ member getString_ter ^ ^ ^ ^ member getNameReferenceCount_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
if((NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1)){

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name stmt_ter ^ ^ initializer Cast type ReferenceType name Node_ter ^ ^ ^ ^ expression MethodInvocation qualifier block_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
Node stmt = (Node)block.getFirstChild();

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ arguments MemberReference member fnNode_ter ^ ^ ^ ^ member isDirectCallNodeReplacementPossible_ter ^ ^ ^ ^ ^ 
if(!isDirectCallNodeReplacementPossible(fnNode)){

IfStatement condition MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member callNode_ter ^ ^ ^ ^ member isFunctionObjectCall_ter ^ ^ ^ ^ ^ 
if(NodeUtil.isFunctionObjectCall(callNode)){

IfStatement condition MethodInvocation qualifier block_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(block.hasChildren()){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member cArg_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((cArg != null)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member fnParam_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((fnParam != null)){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier callNode_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ 
if(!callNode.getFirstChild().isName()){

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name cArg_ter ^ ^ initializer MethodInvocation qualifier callNode_ter ^ ^ selectors MethodInvocation member getNext_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node cArg = callNode.getFirstChild().getNext();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fnParam_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ selectors MethodInvocation member getFirstChild_ter ^ ^ ^ ^ arguments MemberReference member fnNode_ter ^ ^ ^ ^ member getFunctionParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();

condition MethodInvocation qualifier stmt_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ 
if(stmt.hasChildren()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ 
if(stmt.isFromExterns()){
condition MethodInvocation qualifier stmt_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ 
if(stmt.hasOneChild()){
condition MethodInvocation qualifier stmt_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ 
if(stmt.hasMoreThanOneChild()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ 
if(stmt.isQualifiedName()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ 
if(stmt.isUnscopedQualifiedName()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ 
if(stmt.isVarArgs()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ 
if(stmt.isOptionalArg()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ 
if(stmt.isSyntheticBlock()){
condition MethodInvocation qualifier stmt_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ 
if(stmt.wasEmptyNode()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ 
if(stmt.isOnlyModifiesThisCall()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ 
if(stmt.isOnlyModifiesArgumentsCall()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ 
if(stmt.isNoSideEffectsCall()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ 
if(stmt.isLocalResultCall()){
condition MethodInvocation qualifier stmt_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ 
if(stmt.mayMutateArguments()){
condition MethodInvocation qualifier stmt_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ 
if(stmt.mayMutateGlobalStateOrThrow()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ 
if(stmt.isQuotedString()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isAdd_ter ^ ^ ^ ^ 
if(stmt.isAdd()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isAnd_ter ^ ^ ^ ^ 
if(stmt.isAnd()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ 
if(stmt.isArrayLit()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isAssign_ter ^ ^ ^ ^ 
if(stmt.isAssign()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ 
if(stmt.isAssignAdd()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isBlock_ter ^ ^ ^ ^ 
if(stmt.isBlock()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isBreak_ter ^ ^ ^ ^ 
if(stmt.isBreak()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isCall_ter ^ ^ ^ ^ 
if(stmt.isCall()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isCase_ter ^ ^ ^ ^ 
if(stmt.isCase()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isCast_ter ^ ^ ^ ^ 
if(stmt.isCast()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isCatch_ter ^ ^ ^ ^ 
if(stmt.isCatch()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isComma_ter ^ ^ ^ ^ 
if(stmt.isComma()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isContinue_ter ^ ^ ^ ^ 
if(stmt.isContinue()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ 
if(stmt.isDebugger()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isDec_ter ^ ^ ^ ^ 
if(stmt.isDec()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ 
if(stmt.isDefaultCase()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ 
if(stmt.isDelProp()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isDo_ter ^ ^ ^ ^ 
if(stmt.isDo()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ 
if(stmt.isEmpty()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ 
if(stmt.isExprResult()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isFalse_ter ^ ^ ^ ^ 
if(stmt.isFalse()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isFor_ter ^ ^ ^ ^ 
if(stmt.isFor()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isFunction_ter ^ ^ ^ ^ 
if(stmt.isFunction()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ 
if(stmt.isGetterDef()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ 
if(stmt.isGetElem()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ 
if(stmt.isGetProp()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isHook_ter ^ ^ ^ ^ 
if(stmt.isHook()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isIf_ter ^ ^ ^ ^ 
if(stmt.isIf()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isIn_ter ^ ^ ^ ^ 
if(stmt.isIn()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isInc_ter ^ ^ ^ ^ 
if(stmt.isInc()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ 
if(stmt.isInstanceOf()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isLabel_ter ^ ^ ^ ^ 
if(stmt.isLabel()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ 
if(stmt.isLabelName()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isName_ter ^ ^ ^ ^ 
if(stmt.isName()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isNE_ter ^ ^ ^ ^ 
if(stmt.isNE()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isNew_ter ^ ^ ^ ^ 
if(stmt.isNew()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isNot_ter ^ ^ ^ ^ 
if(stmt.isNot()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isNull_ter ^ ^ ^ ^ 
if(stmt.isNull()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isNumber_ter ^ ^ ^ ^ 
if(stmt.isNumber()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ 
if(stmt.isObjectLit()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isOr_ter ^ ^ ^ ^ 
if(stmt.isOr()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isParamList_ter ^ ^ ^ ^ 
if(stmt.isParamList()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ 
if(stmt.isRegExp()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ 
if(stmt.isReturn()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isScript_ter ^ ^ ^ ^ 
if(stmt.isScript()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ 
if(stmt.isSetterDef()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isString_ter ^ ^ ^ ^ 
if(stmt.isString()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ 
if(stmt.isStringKey()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ 
if(stmt.isSwitch()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isThis_ter ^ ^ ^ ^ 
if(stmt.isThis()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isThrow_ter ^ ^ ^ ^ 
if(stmt.isThrow()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isTrue_ter ^ ^ ^ ^ 
if(stmt.isTrue()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isTry_ter ^ ^ ^ ^ 
if(stmt.isTry()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ 
if(stmt.isTypeOf()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isVar_ter ^ ^ ^ ^ 
if(stmt.isVar()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isVoid_ter ^ ^ ^ ^ 
if(stmt.isVoid()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isWhile_ter ^ ^ ^ ^ 
if(stmt.isWhile()){
condition MethodInvocation qualifier stmt_ter ^ ^ member isWith_ter ^ ^ ^ ^ 
if(stmt.isWith()){
IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
if(stmt.isReturn()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
if(!stmt.isReturn()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(stmt.hasChildren()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
if(stmt.isFromExterns()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
if(stmt.hasOneChild()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
if(stmt.hasMoreThanOneChild()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(stmt.isQualifiedName()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
if(stmt.isUnscopedQualifiedName()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
if(stmt.isVarArgs()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
if(stmt.isOptionalArg()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
if(stmt.isSyntheticBlock()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
if(stmt.wasEmptyNode()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
if(stmt.isOnlyModifiesThisCall()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ ^ 
if(stmt.isOnlyModifiesArgumentsCall()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
if(stmt.isNoSideEffectsCall()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
if(stmt.isLocalResultCall()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ ^ 
if(stmt.mayMutateArguments()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ ^ 
if(stmt.mayMutateGlobalStateOrThrow()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
if(stmt.isQuotedString()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
if(stmt.isAdd()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
if(stmt.isAnd()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
if(stmt.isArrayLit()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
if(stmt.isAssign()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
if(stmt.isAssignAdd()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
if(stmt.isBlock()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
if(stmt.isBreak()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
if(stmt.isCall()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
if(stmt.isCase()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ 
if(stmt.isCast()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
if(stmt.isCatch()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
if(stmt.isComma()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
if(stmt.isContinue()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
if(stmt.isDebugger()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
if(stmt.isDec()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
if(stmt.isDefaultCase()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
if(stmt.isDelProp()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
if(stmt.isDo()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(stmt.isEmpty()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
if(stmt.isExprResult()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
if(stmt.isFalse()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
if(stmt.isFor()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
if(stmt.isFunction()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
if(stmt.isGetterDef()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
if(stmt.isGetElem()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(stmt.isGetProp()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
if(stmt.isHook()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
if(stmt.isIf()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
if(stmt.isIn()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
if(stmt.isInc()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
if(stmt.isInstanceOf()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
if(stmt.isLabel()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
if(stmt.isLabelName()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
if(stmt.isName()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
if(stmt.isNE()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
if(stmt.isNew()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
if(stmt.isNot()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
if(stmt.isNull()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(stmt.isNumber()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
if(stmt.isObjectLit()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
if(stmt.isOr()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
if(stmt.isParamList()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
if(stmt.isRegExp()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
if(stmt.isScript()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
if(stmt.isSetterDef()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(stmt.isString()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
if(stmt.isStringKey()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
if(stmt.isSwitch()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
if(stmt.isThis()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
if(stmt.isThrow()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
if(stmt.isTrue()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
if(stmt.isTry()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
if(stmt.isTypeOf()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(stmt.isVar()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
if(stmt.isVoid()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
if(stmt.isWhile()){

IfStatement condition MethodInvocation qualifier stmt_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
if(stmt.isWith()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isOnlyModifiesArgumentsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.mayMutateArguments())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.mayMutateGlobalStateOrThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isCast())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && stmt.isWith())){

condition MethodInvocation qualifier stmt_ter ^ ^ member getName_ter ^ ^ ^ ^ 
if(stmt.getName()){
condition MethodInvocation qualifier par1 ^ ^ member isReturn_ter ^ ^ ^ ^ 
if(.isReturn()){

condition MethodInvocation qualifier cArg_ter ^ ^ member isReturn_ter ^ ^ ^ ^ 
if(cArg.isReturn()){
condition MethodInvocation qualifier hasSideEffects_ter ^ ^ member isReturn_ter ^ ^ ^ ^ 
if(hasSideEffects.isReturn()){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isOnlyModifiesArgumentsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.mayMutateArguments())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.mayMutateGlobalStateOrThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isCast())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !stmt.isWith())){

condition MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ 
if(stmt.getFirstChild()){
condition MethodInvocation qualifier stmt_ter ^ ^ member getNext_ter ^ ^ ^ ^ 
if(stmt.getNext()){


condition MethodInvocation qualifier stmt_ter ^ ^ member canInlineReferenceDirectly_ter ^ ^ ^ ^ 
if(stmt.canInlineReferenceDirectly()){
condition MethodInvocation qualifier block_ter ^ ^ member isReturn_ter ^ ^ ^ ^ 
if(block.isReturn()){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.hasChildren())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isFromExterns())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.hasOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isVarArgs())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isOptionalArg())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isSyntheticBlock())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.wasEmptyNode())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isOnlyModifiesArgumentsCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isLocalResultCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.mayMutateArguments())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.mayMutateGlobalStateOrThrow())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isQuotedString())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isAdd())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isAnd())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isArrayLit())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isAssign())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isAssignAdd())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isBlock())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isBreak())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isCase())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isCast())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isCatch())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isComma())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isContinue())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isDebugger())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isDec())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isDefaultCase())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isDelProp())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isDo())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isEmpty())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isExprResult())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isFalse())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isFor())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isFunction())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isGetterDef())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isGetElem())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isGetProp())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isHook())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isIf())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isIn())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isInc())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isInstanceOf())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isLabel())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isLabelName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isNE())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isNew())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isNot())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isNull())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isNumber())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isObjectLit())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isOr())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isParamList())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isRegExp())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isReturn())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isScript())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isSetterDef())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isString())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isStringKey())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isSwitch())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isThis())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isThrow())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isTrue())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isTry())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isTypeOf())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isVar())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isVoid())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isWhile())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || stmt.isWith())){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member stmt_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt != null)){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(!stmt.hasChildren()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
if(!stmt.isFromExterns()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
if(!stmt.hasOneChild()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
if(!stmt.hasMoreThanOneChild()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(!stmt.isQualifiedName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
if(!stmt.isUnscopedQualifiedName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
if(!stmt.isVarArgs()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
if(!stmt.isOptionalArg()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
if(!stmt.isSyntheticBlock()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
if(!stmt.wasEmptyNode()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
if(!stmt.isOnlyModifiesThisCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ ^ 
if(!stmt.isOnlyModifiesArgumentsCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
if(!stmt.isNoSideEffectsCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
if(!stmt.isLocalResultCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ ^ 
if(!stmt.mayMutateArguments()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ ^ 
if(!stmt.mayMutateGlobalStateOrThrow()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
if(!stmt.isQuotedString()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
if(!stmt.isAdd()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
if(!stmt.isAnd()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
if(!stmt.isArrayLit()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
if(!stmt.isAssign()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
if(!stmt.isAssignAdd()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
if(!stmt.isBlock()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
if(!stmt.isBreak()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
if(!stmt.isCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
if(!stmt.isCase()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ 
if(!stmt.isCast()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
if(!stmt.isCatch()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
if(!stmt.isComma()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
if(!stmt.isContinue()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
if(!stmt.isDebugger()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
if(!stmt.isDec()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
if(!stmt.isDefaultCase()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
if(!stmt.isDelProp()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
if(!stmt.isDo()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(!stmt.isEmpty()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
if(!stmt.isExprResult()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
if(!stmt.isFalse()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
if(!stmt.isFor()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
if(!stmt.isFunction()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
if(!stmt.isGetterDef()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
if(!stmt.isGetElem()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(!stmt.isGetProp()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
if(!stmt.isHook()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
if(!stmt.isIf()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
if(!stmt.isIn()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
if(!stmt.isInc()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
if(!stmt.isInstanceOf()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
if(!stmt.isLabel()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
if(!stmt.isLabelName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
if(!stmt.isName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
if(!stmt.isNE()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
if(!stmt.isNew()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
if(!stmt.isNot()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
if(!stmt.isNull()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(!stmt.isNumber()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
if(!stmt.isObjectLit()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
if(!stmt.isOr()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
if(!stmt.isParamList()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
if(!stmt.isRegExp()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
if(!stmt.isScript()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
if(!stmt.isSetterDef()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(!stmt.isString()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
if(!stmt.isStringKey()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
if(!stmt.isSwitch()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
if(!stmt.isThis()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
if(!stmt.isThrow()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
if(!stmt.isTrue()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
if(!stmt.isTry()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
if(!stmt.isTypeOf()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(!stmt.isVar()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
if(!stmt.isVoid()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
if(!stmt.isWhile()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
if(!stmt.isWith()){

condition MethodInvocation qualifier par0 ^ ^ member isReturn_ter ^ ^ ^ ^ 
if(.isReturn()){

condition MethodInvocation qualifier callNode_ter ^ ^ member isReturn_ter ^ ^ ^ ^ 
if(callNode.isReturn()){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier cArg_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && !cArg.isThis())){

condition MethodInvocation qualifier NodeUtil_ter ^ ^ member isReturn_ter ^ ^ ^ ^ 
if(NodeUtil.isReturn()){
StatementExpression expression MethodInvocation qualifier stmt_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
stmt.detachChildren();

StatementExpression expression MethodInvocation qualifier stmt_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
stmt.setQuotedString();

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.hasChildren())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isFromExterns())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.hasOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isVarArgs())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isOptionalArg())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isSyntheticBlock())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.wasEmptyNode())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isOnlyModifiesArgumentsCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isLocalResultCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.mayMutateArguments())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.mayMutateGlobalStateOrThrow())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isQuotedString())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isAdd())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isAnd())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isArrayLit())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isAssign())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isAssignAdd())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isBlock())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isBreak())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isCase())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isCast())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isCatch())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isComma())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isContinue())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isDebugger())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isDec())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isDefaultCase())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isDelProp())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isDo())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isEmpty())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isExprResult())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isFalse())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isFor())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isFunction())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isGetterDef())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isGetElem())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isGetProp())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isHook())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isIf())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isIn())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isInc())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isInstanceOf())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isLabel())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isLabelName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isNE())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isNew())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isNot())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isNull())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isNumber())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isObjectLit())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isOr())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isParamList())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isRegExp())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isReturn())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isScript())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isSetterDef())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isString())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isStringKey())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isSwitch())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isThis())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isThrow())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isTrue())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isTry())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isTypeOf())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isVar())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isVoid())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isWhile())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !stmt.isWith())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member stmt_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt && stmt.isReturn())){

IfStatement condition MemberReference prefix_operators !_ter ^ ^ member stmt_ter ^ ^ ^ ^ ^ 
if(!stmt){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member cArg_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((cArg == null) && stmt.isReturn())){

IfStatement condition MemberReference member stmt_ter ^ ^ ^ ^ ^ 
if(stmt){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.hasChildren() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isFromExterns() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.hasOneChild() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.hasMoreThanOneChild() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isQualifiedName() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isUnscopedQualifiedName() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isVarArgs() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isOptionalArg() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isSyntheticBlock() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.wasEmptyNode() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isOnlyModifiesThisCall() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isOnlyModifiesArgumentsCall() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isNoSideEffectsCall() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isLocalResultCall() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.mayMutateArguments() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.mayMutateGlobalStateOrThrow() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isQuotedString() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isAdd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isAdd() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isAnd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isAnd() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isArrayLit() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isAssign_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isAssign() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isAssignAdd() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isBlock_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isBlock() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isBreak_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isBreak() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isCall() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isCase_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isCase() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isCast_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isCast() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isCatch_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isCatch() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isComma_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isComma() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isContinue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isContinue() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isDebugger() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isDec_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isDec() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isDefaultCase() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isDelProp() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isDo_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isDo() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isEmpty() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isExprResult() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isFalse_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isFalse() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isFor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isFor() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isFunction_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isFunction() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isGetterDef() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isGetElem() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isGetProp() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isHook_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isHook() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isIf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isIf() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isIn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isIn() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isInc_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isInc() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isInstanceOf() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isLabel_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isLabel() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isLabelName() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isName() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isNE_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isNE() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isNew_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isNew() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isNot_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isNot() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isNull_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isNull() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isNumber_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isNumber() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isObjectLit() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isOr_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isOr() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isParamList_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isParamList() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isRegExp() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isScript_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isScript() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isSetterDef() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isString() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isStringKey() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isSwitch() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isThis_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isThis() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isThrow_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isThrow() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isTrue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isTrue() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isTry_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isTry() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isTypeOf() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isVar() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isVoid_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isVoid() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isWhile_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isWhile() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isWith_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isWith() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayEffectMutableState_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((NodeUtil.mayEffectMutableState(cArg, compiler) && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member stmt_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((stmt != null) && stmt.isReturn())){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member cArg_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((cArg == null)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member fnParam_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && (fnParam != null))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier cArg_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() || !cArg.isThis())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member stmt_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt || stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ ^ ^ ^ 
if((stmt.isReturn() && NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler))){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member cArg_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((cArg != null)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member cArg_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((cArg != null) && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.hasChildren() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isFromExterns() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.hasOneChild() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.hasMoreThanOneChild() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isQualifiedName() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isUnscopedQualifiedName() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isVarArgs() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isOptionalArg() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isSyntheticBlock() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.wasEmptyNode() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isOnlyModifiesThisCall() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isOnlyModifiesArgumentsCall() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isNoSideEffectsCall() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isLocalResultCall() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.mayMutateArguments() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.mayMutateGlobalStateOrThrow() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isQuotedString() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isAdd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isAdd() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isAnd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isAnd() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isArrayLit() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isAssign_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isAssign() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isAssignAdd() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isBlock_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isBlock() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isBreak_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isBreak() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isCall() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isCase_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isCase() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isCast_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isCast() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isCatch_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isCatch() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isComma_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isComma() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isContinue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isContinue() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isDebugger() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isDec_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isDec() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isDefaultCase() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isDelProp() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isDo_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isDo() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isEmpty() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isExprResult() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isFalse_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isFalse() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isFor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isFor() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isFunction_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isFunction() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isGetterDef() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isGetElem() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isGetProp() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isHook_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isHook() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isIf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isIf() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isIn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isIn() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isInc_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isInc() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isInstanceOf() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isLabel_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isLabel() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isLabelName() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isName() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNE_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isNE() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNew_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isNew() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNot_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isNot() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNull_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isNull() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isNumber_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isNumber() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isObjectLit() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isOr_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isOr() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isParamList_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isParamList() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isRegExp() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isReturn() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isScript_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isScript() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isSetterDef() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isString() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isStringKey() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isSwitch() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isThis_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isThis() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isThrow_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isThrow() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isTrue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isTrue() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isTry_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isTry() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isTypeOf() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isVar() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isVoid_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isVoid() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isWhile_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isWhile() && stmt.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier stmt_ter ^ ^ member isWith_ter ^ ^ ^ ^ operandr MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((!stmt.isWith() && stmt.isReturn())){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier NodeUtil_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
if(!NodeUtil.isReturn()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier cArg_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
if(!cArg.isThis()){

IfStatement condition MethodInvocation qualifier NodeUtil_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
if(NodeUtil.isReturn()){

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getLastChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getLastChild(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getNext_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getNext(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getLastSibling_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getLastSibling(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getParent_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getParent(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member detachFromParent_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.detachFromParent(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member removeFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.removeFirstChild(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member removeChildren_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.removeChildren(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member cloneNode_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.cloneNode(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member cloneTree_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.cloneTree(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member stmt_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), stmt);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member cArg_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), cArg);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member isFunctionObjectCall_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.isFunctionObjectCall(stmt.getFirstChild(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getName_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getName(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member isDirectCallNodeReplacementPossible_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.isDirectCallNodeReplacementPossible(stmt.getFirstChild(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier cArg_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(cArg.getFirstChild(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member isThis_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.isThis(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member hasSideEffects_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), hasSideEffects);


StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(block.getFirstChild(), compiler);

StatementExpression expression MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ ^ 
NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);

StatementExpression expression Assignment expressionl MemberReference member cArg_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
cArg = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getString_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getString(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier hasSideEffects_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(hasSideEffects.getFirstChild(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.checkState(stmt.getFirstChild(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member canInlineReferenceDirectly_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.canInlineReferenceDirectly(), compiler);

StatementExpression expression Assignment expressionl MemberReference member fnParam_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
fnParam = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member isFunctionObjectApply_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.isFunctionObjectApply(stmt.getFirstChild(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member canInlineReferenceDirectly_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.canInlineReferenceDirectly(stmt.getFirstChild(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member isReturn_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.isReturn(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member callNode_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), callNode);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), fnNode);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member block_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), block);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayEffectMutableState_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayEffectMutableState(stmt.getFirstChild(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(compiler, stmt.getFirstChild());

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member getFunctionParameters_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.getFunctionParameters(stmt.getFirstChild(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MemberReference member hasSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = hasSideEffects;

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier callNode_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = callNode.mayHaveSideEffects(stmt.getFirstChild(), compiler);

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation prefix_operators !_ter ^ ^ qualifier NodeUtil_ter ^ ^ arguments MemberReference member callNode_ter ^ ^ ^ ^ member isFunctionObjectApply_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier fnNode_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = fnNode.mayHaveSideEffects(stmt.getFirstChild(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier block_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = block.mayHaveSideEffects(stmt.getFirstChild(), compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ MemberReference member stmt_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(compiler, stmt);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier fnParam_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(fnParam.getFirstChild(), compiler);

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.hasOneChild());

StatementExpression expression Assignment expressionl MemberReference member stmt_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
stmt = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);

StatementExpression expression Assignment expressionl MemberReference member cArg_ter ^ ^ ^ ^ value MethodInvocation qualifier cArg_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
cArg = cArg.getNext();

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier NodeUtil_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(NodeUtil.getFirstChild(), compiler);

StatementExpression expression Assignment expressionl MemberReference member cArg_ter ^ ^ ^ ^ value MemberReference member hasSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
cArg = hasSideEffects;

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier par0 ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(.getFirstChild(), compiler);


StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild());

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier callNode_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(callNode.getFirstChild(), compiler);

StatementExpression expression Assignment expressionl MemberReference member fnParam_ter ^ ^ ^ ^ value MemberReference member hasSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
fnParam = hasSideEffects;

StatementExpression expression Assignment expressionl MemberReference member fnParam_ter ^ ^ ^ ^ value MethodInvocation qualifier fnParam_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
fnParam = fnParam.getNext();

StatementExpression expression Assignment expressionl MemberReference member cArg_ter ^ ^ ^ ^ value MethodInvocation qualifier cArg_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
cArg = cArg.getNext();

StatementExpression expression Assignment expressionl MemberReference member fnParam_ter ^ ^ ^ ^ value MethodInvocation qualifier fnParam_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
fnParam = fnParam.getNext();

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(compiler);

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ MemberReference member hasSideEffects_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(compiler, hasSideEffects);

IfStatement condition MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ 
if(NodeUtil.canBeSideEffected(cArg)){

IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member block_ter ^ ^ ^ MethodInvocation qualifier fnParam_ter ^ ^ member getString_ter ^ ^ ^ ^ member getNameReferenceCount_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
if((NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member cArg_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((cArg == null)){

condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member hasSideEffects_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ 
if((hasSideEffects && NodeUtil.canBeSideEffected(cArg))){
condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member hasSideEffects_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ 
if((hasSideEffects && NodeUtil.getNext(cArg))){
condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member hasSideEffects_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((hasSideEffects && NodeUtil.getFirstChild(cArg))){
condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member hasSideEffects_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ 
if((hasSideEffects && NodeUtil.isThis(cArg))){
condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member hasSideEffects_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member getString_ter ^ ^ ^ ^ ^ ^ 
if((hasSideEffects && NodeUtil.getString(cArg))){
IfStatement condition MemberReference member cArg_ter ^ ^ ^ ^ ^ 
if(cArg){

condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member cArg_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ 
if((cArg && NodeUtil.canBeSideEffected(cArg))){
condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member hasSideEffects_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ 
if((hasSideEffects || NodeUtil.canBeSideEffected(cArg))){
condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member hasSideEffects_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member isFunctionObjectApply_ter ^ ^ ^ ^ ^ ^ 
if((hasSideEffects && NodeUtil.isFunctionObjectApply(cArg))){
condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member hasSideEffects_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canInlineReferenceDirectly_ter ^ ^ ^ ^ ^ ^ 
if((hasSideEffects && NodeUtil.canInlineReferenceDirectly(cArg))){
condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member hasSideEffects_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ 
if((hasSideEffects && NodeUtil.isReturn(cArg))){
condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member hasSideEffects_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member stmt_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ 
if((hasSideEffects && NodeUtil.canBeSideEffected(stmt))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MemberReference member hasSideEffects_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ ^ 
if(((hasSideEffects && NodeUtil.canBeSideEffected(cArg)) && NodeUtil.canBeSideEffected(cArg))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member cArg_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ ^ 
if((cArg && NodeUtil.canBeSideEffected(cArg))){

condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member hasSideEffects_ter ^ ^ ^ ^ operandr MethodInvocation qualifier block_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ 
if((hasSideEffects && block.canBeSideEffected(cArg))){


StatementExpression expression MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ 
NodeUtil.canBeSideEffected(cArg);


condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member hasSideEffects_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ 
if((hasSideEffects && NodeUtil.canBeSideEffected(compiler))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member hasSideEffects_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ ^ 
if((hasSideEffects && !NodeUtil.canBeSideEffected(cArg))){

condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member stmt_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ 
if((stmt && NodeUtil.canBeSideEffected(cArg))){
condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member hasSideEffects_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member fnNode_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ 
if((hasSideEffects && NodeUtil.canBeSideEffected(fnNode))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member hasSideEffects_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ ^ 
if((hasSideEffects && NodeUtil.canBeSideEffected(cArg))){

condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member hasSideEffects_ter ^ ^ ^ ^ operandr MethodInvocation qualifier callNode_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ 
if((hasSideEffects && callNode.canBeSideEffected(cArg))){
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier cArg_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
if(!cArg.isThis()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member cArg_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MemberReference member hasSideEffects_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((cArg && (hasSideEffects && NodeUtil.canBeSideEffected(cArg)))){

IfStatement condition MemberReference prefix_operators !_ter ^ ^ member cArg_ter ^ ^ ^ ^ ^ 
if(!cArg){

condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member compiler_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ 
if((compiler && NodeUtil.canBeSideEffected(cArg))){
condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member fnNode_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ 
if((fnNode && NodeUtil.canBeSideEffected(cArg))){
condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member hasSideEffects_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member hasSideEffects_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ 
if((hasSideEffects && NodeUtil.canBeSideEffected(hasSideEffects))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ ^ 
if((NodeUtil.canBeSideEffected(cArg) && NodeUtil.canBeSideEffected(cArg))){

condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member hasSideEffects_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member callNode_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ 
if((hasSideEffects && NodeUtil.canBeSideEffected(callNode))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MemberReference member hasSideEffects_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier cArg_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if(((hasSideEffects && NodeUtil.canBeSideEffected(cArg)) && !cArg.isThis())){

condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member callNode_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ 
if((callNode && NodeUtil.canBeSideEffected(cArg))){
condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member hasSideEffects_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member block_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ 
if((hasSideEffects && NodeUtil.canBeSideEffected(block))){
StatementExpression expression Assignment expressionl MemberReference member cArg_ter ^ ^ ^ ^ value MethodInvocation qualifier cArg_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
cArg = cArg.getNext();

StatementExpression expression Assignment expressionl MemberReference member fnParam_ter ^ ^ ^ ^ value MethodInvocation qualifier fnParam_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
fnParam = fnParam.getNext();

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ ^ 
if((!NodeUtil.canBeSideEffected(cArg) && NodeUtil.canBeSideEffected(cArg))){

condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member block_ter ^ ^ ^ ^ operandr MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member cArg_ter ^ ^ ^ ^ member canBeSideEffected_ter ^ ^ ^ ^ ^ ^ 
if((block && NodeUtil.canBeSideEffected(cArg))){
IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(cArg.hasChildren()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
if(cArg.isFromExterns()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
if(cArg.hasOneChild()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
if(cArg.hasMoreThanOneChild()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(cArg.isQualifiedName()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
if(cArg.isUnscopedQualifiedName()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
if(cArg.isVarArgs()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
if(cArg.isOptionalArg()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
if(cArg.isSyntheticBlock()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
if(cArg.wasEmptyNode()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
if(cArg.isOnlyModifiesThisCall()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ ^ 
if(cArg.isOnlyModifiesArgumentsCall()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
if(cArg.isNoSideEffectsCall()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
if(cArg.isLocalResultCall()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ ^ 
if(cArg.mayMutateArguments()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ ^ 
if(cArg.mayMutateGlobalStateOrThrow()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
if(cArg.isQuotedString()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
if(cArg.isAdd()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
if(cArg.isAnd()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
if(cArg.isArrayLit()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
if(cArg.isAssign()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
if(cArg.isAssignAdd()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
if(cArg.isBlock()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
if(cArg.isBreak()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
if(cArg.isCall()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
if(cArg.isCase()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ 
if(cArg.isCast()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
if(cArg.isCatch()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
if(cArg.isComma()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
if(cArg.isContinue()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
if(cArg.isDebugger()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
if(cArg.isDec()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
if(cArg.isDefaultCase()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
if(cArg.isDelProp()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
if(cArg.isDo()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(cArg.isEmpty()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
if(cArg.isExprResult()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
if(cArg.isFalse()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
if(cArg.isFor()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
if(cArg.isFunction()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
if(cArg.isGetterDef()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
if(cArg.isGetElem()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(cArg.isGetProp()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
if(cArg.isHook()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
if(cArg.isIf()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
if(cArg.isIn()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
if(cArg.isInc()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
if(cArg.isInstanceOf()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
if(cArg.isLabel()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
if(cArg.isLabelName()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
if(cArg.isName()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
if(cArg.isNE()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
if(cArg.isNew()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
if(cArg.isNot()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
if(cArg.isNull()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(cArg.isNumber()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
if(cArg.isObjectLit()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
if(cArg.isOr()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
if(cArg.isParamList()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
if(cArg.isRegExp()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
if(cArg.isReturn()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
if(cArg.isScript()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
if(cArg.isSetterDef()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(cArg.isString()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
if(cArg.isStringKey()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
if(cArg.isSwitch()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
if(cArg.isThis()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
if(cArg.isThrow()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
if(cArg.isTrue()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
if(cArg.isTry()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
if(cArg.isTypeOf()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(cArg.isVar()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
if(cArg.isVoid()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
if(cArg.isWhile()){

IfStatement condition MethodInvocation qualifier cArg_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
if(cArg.isWith()){


ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
return CanInlineResult.NO;
StatementExpression expression Assignment expressionl MemberReference member cArg_ter ^ ^ ^ ^ value MethodInvocation qualifier cArg_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
cArg = cArg.getNext();

ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member NO_ter ^ ^ ^ ^ ^ 
if (true) { return CanInlineResult.NO; }

StatementExpression expression Assignment expressionl MemberReference member fnParam_ter ^ ^ ^ ^ value MethodInvocation qualifier fnParam_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
fnParam = fnParam.getNext();

BreakStatement_ter ^ 
break;

ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
return false;
StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation prefix_operators !_ter ^ ^ qualifier NodeUtil_ter ^ ^ arguments MemberReference member callNode_ter ^ ^ ^ ^ member isFunctionObjectApply_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);

ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member YES_ter ^ ^ ^ ^ ^ 
return CanInlineResult.YES;
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
return true;
ContinueStatement_ter ^ 
continue;

ReturnStatement expression MemberReference qualifier CanInlineResult_ter ^ ^ member YES_ter ^ ^ ^ ^ ^ 
if (true) { return CanInlineResult.YES; }

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.hasOneChild());

ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if (true) { return false; }

ReturnStatement expression MemberReference member cArg_ter ^ ^ ^ ^ ^ 
return cArg;
StatementExpression expression MethodInvocation qualifier cArg_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
cArg.detachChildren();

StatementExpression expression MethodInvocation qualifier cArg_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
cArg.setQuotedString();

ReturnStatement expression MemberReference member compiler_ter ^ ^ ^ ^ ^ 
return compiler;
ContinueStatement_ter ^ 
continue;

ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if (true) { return true; }

ReturnStatement expression MemberReference member stmt_ter ^ ^ ^ ^ ^ 
return stmt;
ReturnStatement expression MemberReference member hasSideEffects_ter ^ ^ ^ ^ ^ 
return hasSideEffects;
ReturnStatement_ter ^ 
return;

StatementExpression expression Assignment expressionl MemberReference member cArg_ter ^ ^ ^ ^ value MethodInvocation qualifier cArg_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
cArg = cArg.getNext();

BreakStatement_ter ^ 
break;

ReturnStatement expression MemberReference member block_ter ^ ^ ^ ^ ^ 
return block;
StatementExpression expression Assignment expressionl MemberReference member fnParam_ter ^ ^ ^ ^ value MethodInvocation qualifier fnParam_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
fnParam = fnParam.getNext();

StatementExpression expression Assignment expressionl MemberReference member hasSideEffects_ter ^ ^ ^ ^ value MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier stmt_ter ^ ^ member getFirstChild_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation prefix_operators !_ter ^ ^ qualifier NodeUtil_ter ^ ^ arguments MemberReference member callNode_ter ^ ^ ^ ^ member isFunctionObjectApply_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));


StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier block_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(block.hasOneChild());

stderr: 