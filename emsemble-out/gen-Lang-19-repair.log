stdout: condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index >= (seqEnd - 1))) && (input.charAt((index + 1)) == "null"))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index <= (seqEnd - 1))) && (input.charAt((index + 1)) == "null"))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((input.charAt(index) == "null") && (index < (seqEnd - 1)))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) >= "null") && (index < (seqEnd - 1))) && (input.charAt((index + 1)) == "null"))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index > (seqEnd - 1))) && (input.charAt((index + 1)) == "null"))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index < (seqEnd - 0))) && (input.charAt((index + 1)) == "null"))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <=_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) <= "null") && (index < (seqEnd - 1))) && (input.charAt((index + 1)) == "null"))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index < (seqEnd - 1))) && (input.charAt((index + 1)) == "null"))){
condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index < (seqEnd - 1))) || (input.charAt((index + 1)) == "null"))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((input.charAt(index) == "null") && (index < (seqEnd - 1))) && (input.charAt((index + 1)) == "null")) && (input.charAt((index + 1)) == "null"))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index < (seqEnd >= 1))) && (input.charAt((index + 1)) == "null"))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index == (seqEnd - 1))) && (input.charAt((index + 1)) == "null"))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index < (seqEnd <= 1))) && (input.charAt((index + 1)) == "null"))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index < (seqEnd - 2))) && (input.charAt((index + 1)) == "null"))){
IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((index < (seqEnd - 1))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) > "null") && (index < (seqEnd - 1))) && (input.charAt((index + 1)) == "null"))){
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
if((input.charAt(index) == "null")){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) < "null") && (index < (seqEnd - 1))) && (input.charAt((index + 1)) == "null"))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index < (seqEnd - "null"))) && (input.charAt((index + 1)) == "null"))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index - (seqEnd - 1))) && (input.charAt((index + 1)) == "null"))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index != (seqEnd - 1))) && (input.charAt((index + 1)) == "null"))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((input.charAt(index) == "null") && (index < (seqEnd - 1))) && (input.charAt((index + 1)) == "null")) && (index < (seqEnd - 1)))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal prefix_operators -_ter ^ ^ value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index < (seqEnd - -1))) && (input.charAt((index + 1)) == "null"))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((input.charAt(index) == "null") && (input.charAt((index + 1)) == "null"))){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
if((input.charAt((index + 1)) == "null")){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index < (seqEnd > 1))) && (input.charAt((index + 1)) == "null"))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((((input.charAt(index) == "null") && (index < (seqEnd - 1))) && (input.charAt((index + 1)) == "null")) && (input.charAt((index + 1)) == "null")) && (input.charAt((index + 1)) == "null"))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index < (seqEnd - 1))) && (input.charAt((index + 1)) - "null"))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) != "null") && (index < (seqEnd - 1))) && (input.charAt((index + 1)) == "null"))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((((input.charAt(index) == "null") && (index < (seqEnd - 1))) && (input.charAt((index + 1)) == "null")) && (index < (seqEnd - 1))) && (input.charAt((index + 1)) == "null"))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (input.charAt((index + 1)) == "null")) && (input.charAt((index + 1)) == "null"))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index < (seqEnd < 1))) && (input.charAt((index + 1)) == "null"))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index < (seqEnd - 1))) && (input.charAt((seqEnd + 1)) == "null"))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index < (seqEnd == 1))) && (input.charAt((index + 1)) == "null"))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index < (seqEnd - 1))) && (index < (seqEnd - 1)))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member translate_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index < (seqEnd - 1))) && (input.translate((index + 1)) == "null"))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >>_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index >> (seqEnd - 1))) && (input.charAt((index + 1)) == "null"))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >>_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index < (seqEnd - 1))) && (input.charAt((index + 1)) >> "null"))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index + (seqEnd - 1))) && (input.charAt((index + 1)) == "null"))){
IfStatement condition BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
if((seqEnd - 1)){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index < (seqEnd != 1))) && (input.charAt((index + 1)) == "null"))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >>>_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index >>> (seqEnd - 1))) && (input.charAt((index + 1)) == "null"))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) + "null") && (index < (seqEnd - 1))) && (input.charAt((index + 1)) == "null"))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >>>_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index < (seqEnd - 1))) && (input.charAt((index + 1)) >>> "null"))){
IfStatement condition MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ ^ 
if(input.charAt(index)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((((input.charAt(index) == "null") && (index < (seqEnd - 1))) && (input.charAt((index + 1)) == "null")) && (input.charAt((index + 1)) == "null")) && (input.charAt((index + 1)) == "null")) && (input.charAt((index + 1)) == "null"))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator >>_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index < (seqEnd >> 1))) && (input.charAt((index + 1)) == "null"))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((((input.charAt(index) == "null") && (index < (seqEnd - 1))) && (input.charAt((index + 1)) == "null")) && (index < (seqEnd - 1))) && (input.charAt((index + 1)) == "null")) && (input.charAt((index + 1)) == "null"))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((input.charAt(index) == "null") && (input.charAt((index + 1)) == "null")) && (input.charAt((index + 1)) == "null")) && (input.charAt((index + 1)) == "null"))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal prefix_operators -_ter ^ ^ value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index < (seqEnd - -2))) && (input.charAt((index + 1)) == "null"))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index < (seqEnd + 1))) && (input.charAt((index + 1)) == "null"))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr BinaryOperation operator >>>_ter ^ ^ operandl MemberReference member seqEnd_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((((input.charAt(index) == "null") && (index < (seqEnd >>> 1))) && (input.charAt((index + 1)) == "null"))){
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if (true) { return 0; }


StatementExpression expression Assignment expressionl MemberReference member isHex_ter ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
isHex = true;

StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member end_ter ^ ^ ^ ^ ^ 
end++;

StatementExpression expression MethodInvocation qualifier System.err_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ ^ member subSequence_ter ^ ^ ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member end_ter ^ ^ ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ member println_ter ^ ^ ^ ^ ^ 
System.err.println((((((("null" + input.subSequence(start, end)) + "null") + start) + "null") + end) + "null"));

StatementExpression expression Assignment expressionl MemberReference member entityValue_ter ^ ^ ^ ^ value MethodInvocation qualifier Integer_ter ^ ^ arguments MethodInvocation qualifier input_ter ^ ^ selectors MethodInvocation member toString_ter ^ ^ ^ ^ arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ ^ member subSequence_ter ^ ^ ^ Literal value 16_ter ^ ^ ^ ^ member parseInt_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);

StatementExpression expression MethodInvocation qualifier out_ter ^ ^ arguments MemberReference selectors ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ ^ member chrs_ter ^ ^ ^ ^ member write_ter ^ ^ ^ ^ ^ 
out.write(chrs[0]);

BreakStatement_ter ^ 
break;

StatementExpression expression MethodInvocation qualifier out_ter ^ ^ arguments MemberReference selectors ArraySelector index Literal value 1_ter ^ ^ ^ ^ ^ ^ member chrs_ter ^ ^ ^ ^ member write_ter ^ ^ ^ ^ ^ 
out.write(chrs[1]);

StatementExpression expression Assignment expressionl MemberReference member entityValue_ter ^ ^ ^ ^ value MethodInvocation qualifier Integer_ter ^ ^ arguments MethodInvocation qualifier input_ter ^ ^ selectors MethodInvocation member toString_ter ^ ^ ^ ^ arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ ^ member subSequence_ter ^ ^ ^ Literal value 10_ter ^ ^ ^ ^ member parseInt_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);

StatementExpression expression MethodInvocation qualifier out_ter ^ ^ arguments MemberReference member entityValue_ter ^ ^ ^ ^ member write_ter ^ ^ ^ ^ ^ 
out.write(entityValue);

StatementExpression expression Assignment expressionl MemberReference member isHex_ter ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
isHex = true;

ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
if (true) { return (((2 + (end - start)) + (isHex)?1:0) + 1); }

StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member end_ter ^ ^ ^ ^ ^ 
end++;

StatementExpression expression MethodInvocation qualifier System.err_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ ^ member subSequence_ter ^ ^ ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member end_ter ^ ^ ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ member println_ter ^ ^ ^ ^ ^ 
System.err.println((((((("null" + input.subSequence(start, end)) + "null") + start) + "null") + end) + "null"));

StatementExpression expression Assignment expressionl MemberReference member entityValue_ter ^ ^ ^ ^ value MethodInvocation qualifier Integer_ter ^ ^ arguments MethodInvocation qualifier input_ter ^ ^ selectors MethodInvocation member toString_ter ^ ^ ^ ^ arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ ^ member subSequence_ter ^ ^ ^ Literal value 16_ter ^ ^ ^ ^ member parseInt_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);

StatementExpression expression MethodInvocation qualifier out_ter ^ ^ arguments MemberReference selectors ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ ^ member chrs_ter ^ ^ ^ ^ member write_ter ^ ^ ^ ^ ^ 
out.write(chrs[0]);

StatementExpression expression Assignment expressionl MemberReference member entityValue_ter ^ ^ ^ ^ value MethodInvocation qualifier Integer_ter ^ ^ arguments MethodInvocation qualifier input_ter ^ ^ selectors MethodInvocation member toString_ter ^ ^ ^ ^ arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ ^ member subSequence_ter ^ ^ ^ Literal value 10_ter ^ ^ ^ ^ member parseInt_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);

StatementExpression expression Assignment expressionl MemberReference member isHex_ter ^ ^ ^ ^ value MemberReference member start_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
isHex = start;

StatementExpression expression MethodInvocation qualifier out_ter ^ ^ arguments MemberReference selectors ArraySelector index Literal value 1_ter ^ ^ ^ ^ ^ ^ member chrs_ter ^ ^ ^ ^ member write_ter ^ ^ ^ ^ ^ 
out.write(chrs[1]);

StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member start_ter ^ ^ ^ ^ ^ 
start++;

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isHex_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((isHex != null)){

StatementExpression expression MethodInvocation qualifier out_ter ^ ^ arguments MemberReference member entityValue_ter ^ ^ ^ ^ member write_ter ^ ^ ^ ^ ^ 
out.write(entityValue);

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member firstChar_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member firstChar_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((firstChar == "null") || (firstChar == "null"))){

IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member entityValue_ter ^ ^ ^ ^ operandr Literal value 0xFFFF_ter ^ ^ ^ ^ ^ ^ ^ 
if((entityValue > 0xFFFF)){

IfStatement condition MemberReference member isHex_ter ^ ^ ^ ^ ^ 
if(isHex){

StatementExpression expression Assignment expressionl MemberReference member entityValue_ter ^ ^ ^ ^ value MemberReference member start_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
entityValue = start;

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member firstChar_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((firstChar != null)){

ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
return 0;
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member start_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((start != null)){

ReturnStatement_ter ^ 
return;

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member firstChar_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
if((firstChar == "null")){

StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member start_ter ^ ^ ^ ^ ^ 
start++;

ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if (true) { return false; }

ContinueStatement_ter ^ 
continue;

IfStatement condition MemberReference member start_ter ^ ^ ^ ^ ^ 
if(start){


IfStatement condition BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ ^ member subSequence_ter ^ ^ ^ ^ ^ ^ ^ 
if(("null" + input.subSequence(start, end))){

IfStatement condition BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ ^ member subSequence_ter ^ ^ ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ 
if(((("null" + input.subSequence(start, end)) + "null") + start)){

StatementExpression expression Assignment expressionl MemberReference member start_ter ^ ^ ^ ^ value MemberReference member start_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
start = start;

StatementExpression expression MemberReference member firstChar_ter ^ ^ ^ ^ ^ 
firstChar;

ReturnStatement_ter ^ 
if (true) { return;
 }

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member end_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
if((input.charAt(end) != "null")){


IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((index != null)){

StatementExpression expression MemberReference member isHex_ter ^ ^ ^ ^ ^ 
isHex;

StatementExpression expression Assignment expressionl MemberReference member isHex_ter ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
isHex = false;

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member start_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((start != null)){


IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((end != null)){

ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
return 0;
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((2 + (end - start)) + (isHex)?1:0);
StatementExpression expression MethodInvocation qualifier out_ter ^ ^ arguments MemberReference member entityValue_ter ^ ^ ^ ^ member write_ter ^ ^ ^ ^ ^ 
out.write(entityValue);

ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member entityValue_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((2 + (end - start)) + (entityValue)?1:0) + 1);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal value 0_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((2 + (end - start)) + (isHex)?0:0) + 1);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (2 + (end - start));
StatementExpression expression MethodInvocation qualifier out_ter ^ ^ arguments MemberReference selectors ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ ^ member chrs_ter ^ ^ ^ ^ member write_ter ^ ^ ^ ^ ^ 
out.write(chrs[0]);

ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if (true) { return 0; }

StatementExpression expression MethodInvocation qualifier out_ter ^ ^ arguments MemberReference selectors ArraySelector index Literal value 1_ter ^ ^ ^ ^ ^ ^ member chrs_ter ^ ^ ^ ^ member write_ter ^ ^ ^ ^ ^ 
out.write(chrs[1]);

StatementExpression expression MethodInvocation qualifier System.err_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ ^ member subSequence_ter ^ ^ ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member end_ter ^ ^ ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ member println_ter ^ ^ ^ ^ ^ 
System.err.println((((((("null" + input.subSequence(start, end)) + "null") + start) + "null") + end) + "null"));

StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member start_ter ^ ^ ^ ^ ^ 
start++;

StatementExpression expression Assignment expressionl MemberReference member isHex_ter ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
isHex = true;

BreakStatement_ter ^ 
break;

StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member end_ter ^ ^ ^ ^ ^ 
end++;

ReturnStatement expression BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ 
return (end - start);
StatementExpression expression Assignment expressionl MemberReference member entityValue_ter ^ ^ ^ ^ value MethodInvocation qualifier Integer_ter ^ ^ arguments MethodInvocation qualifier input_ter ^ ^ selectors MethodInvocation member toString_ter ^ ^ ^ ^ arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ ^ member subSequence_ter ^ ^ ^ Literal value 16_ter ^ ^ ^ ^ member parseInt_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);

StatementExpression expression Assignment expressionl MemberReference member entityValue_ter ^ ^ ^ ^ value MethodInvocation qualifier Integer_ter ^ ^ arguments MethodInvocation qualifier input_ter ^ ^ selectors MethodInvocation member toString_ter ^ ^ ^ ^ arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ ^ member subSequence_ter ^ ^ ^ Literal value 10_ter ^ ^ ^ ^ member parseInt_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);

ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member end_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((2 + (end - start)) + (end)?1:0) + 1);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((2 + (end - start)) + (isHex)?1:0) + 1);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member entityValue_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((2 + (entityValue - start)) + (isHex)?1:0) + 1);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member firstChar_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((2 + (end - start)) + (firstChar)?1:0) + 1);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member entityValue_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((2 + (end - entityValue)) + (isHex)?1:0) + 1);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member start_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((2 + (end - start)) + (start)?1:0) + 1);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal value 2_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((2 + (end - start)) + (isHex)?2:0) + 1);
IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member entityValue_ter ^ ^ ^ ^ operandr Literal value 0xFFFF_ter ^ ^ ^ ^ ^ ^ ^ 
if((entityValue > 0xFFFF)){

ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal prefix_operators -_ter ^ ^ value 1_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((-1 + (end - start)) + (isHex)?1:0) + 1);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((((2 + (end - start)) + (isHex)?1:0) + 1) + (isHex)?1:0);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member chrs_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((2 + (end - start)) + (chrs)?1:0) + 1);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 10_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((10 + (end - start)) + (isHex)?1:0) + 1);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member end_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((2 + (end - end)) + (isHex)?1:0) + 1);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 1_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((1 + (end - start)) + (isHex)?1:0) + 1);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 16_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((16 + (end - start)) + (isHex)?1:0) + 1);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal value 10_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((2 + (end - start)) + (isHex)?10:0) + 1);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal prefix_operators -_ter ^ ^ value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((2 + (end - start)) + (isHex)?-1:0) + 1);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal value 16_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((2 + (end - start)) + (isHex)?16:0) + 1);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member isHex_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((2 + (isHex - start)) + (isHex)?1:0) + 1);
ReturnStatement expression BinaryOperation operator ==_ter ^ ^ operandl MemberReference member firstChar_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
return (firstChar == "null");
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ ^ member subSequence_ter ^ ^ ^ ^ ^ ^ ^ 
return ("null" + input.subSequence(start, end));
ContinueStatement_ter ^ 
continue;

ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((2 + (end == start)) + (isHex)?1:0) + 1);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member isHex_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((2 + (end - isHex)) + (isHex)?1:0) + 1);
IfStatement condition MemberReference member isHex_ter ^ ^ ^ ^ ^ 
if(isHex){

ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ ^ member subSequence_ter ^ ^ ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ 
return ((("null" + input.subSequence(start, end)) + "null") + start);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member firstChar_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((2 + (firstChar - start)) + (isHex)?1:0) + 1);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr MethodInvocation qualifier input_ter ^ ^ arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ ^ member subSequence_ter ^ ^ ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member end_ter ^ ^ ^ ^ ^ ^ ^ 
return ((((("null" + input.subSequence(start, end)) + "null") + start) + "null") + end);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member start_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((2 + (start - start)) + (isHex)?1:0) + 1);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member firstChar_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((2 + (end - firstChar)) + (isHex)?1:0) + 1);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member end_ter ^ ^ ^ ^ operandr MemberReference member start_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isHex_ter ^ ^ ^ ^ if_true Literal value 1_ter ^ ^ ^ ^ if_false Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
return (((2 + (end >= start)) + (isHex)?1:0) + 1);
stderr: 