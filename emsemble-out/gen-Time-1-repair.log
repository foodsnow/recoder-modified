stdout: LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ arguments MemberReference member compare_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = lastUnitField.compareTo(compare);

LocalVariableDeclaration type BasicType name long_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ arguments MemberReference member loopUnitField_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ ^ ^ 
long compare = lastUnitField.compareTo(loopUnitField);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = lastUnitField.compareTo();

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ arguments MemberReference member loopUnitField_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ ^ ^ 
final int compare = lastUnitField.compareTo(loopUnitField);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation arguments MemberReference member loopUnitField_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = compareTo(loopUnitField);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ arguments MemberReference member types_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = lastUnitField.compareTo(types);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier loopType_ter ^ ^ arguments MemberReference member loopUnitField_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = loopType.compareTo(loopUnitField);

StatementExpression expression MethodInvocation qualifier lastUnitField_ter ^ ^ arguments MemberReference member loopUnitField_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ 
lastUnitField.compareTo(loopUnitField);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ arguments MemberReference member i_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = lastUnitField.compareTo(i);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ arguments MemberReference member loopUnitField_ter ^ ^ ^ ^ member getField_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = lastUnitField.getField(loopUnitField);

ReturnStatement_ter ^ 
if (true) { return;
 }

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation member compareTo_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = compareTo();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ arguments MemberReference member loopUnitField_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = lastUnitField.compareTo(loopUnitField);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ arguments MemberReference member iChronology_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = lastUnitField.compareTo(iChronology);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ arguments MemberReference member loopUnitField_ter ^ ^ ^ ^ member Partial_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = lastUnitField.Partial(loopUnitField);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ arguments MemberReference member loopUnitField_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = lastUnitField.compareTo(loopUnitField, false);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer Cast type BasicType name int_ter ^ ^ ^ ^ expression MethodInvocation qualifier lastUnitField_ter ^ ^ arguments MemberReference member loopUnitField_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int compare = (int)lastUnitField.compareTo(loopUnitField);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ arguments MemberReference member loopUnitField_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = lastUnitField.compareTo(loopUnitField, true);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ arguments Literal value false_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = lastUnitField.compareTo(false);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ member compareTo_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = lastUnitField.compareTo();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = lastUnitField.compareTo(0);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ arguments Literal value true_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = lastUnitField.compareTo(true);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ arguments MemberReference member loopUnitField_ter ^ ^ ^ ^ member getRangeDurationType_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = lastUnitField.getRangeDurationType(loopUnitField);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ arguments MemberReference member loopUnitField_ter ^ ^ ^ ^ member getName_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = lastUnitField.getName(loopUnitField);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ arguments MemberReference member loopUnitField_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = lastUnitField.compareTo(loopUnitField, 0);


StatementExpression expression Assignment expressionl MemberReference member compare_ter ^ ^ ^ ^ value MethodInvocation qualifier lastUnitField_ter ^ ^ arguments MemberReference member loopUnitField_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
compare = lastUnitField.compareTo(loopUnitField);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ arguments MemberReference member loopUnitField_ter ^ ^ ^ Literal value 1_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = lastUnitField.compareTo(loopUnitField, 1);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MemberReference member loopUnitField_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = loopUnitField;

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = lastUnitField.compareTo(1);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ arguments MemberReference member loopRangeField_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = lastUnitField.compareTo(loopRangeField);

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loopUnitField_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
if((loopUnitField != 0)){

StatementExpression expression Assignment expressionl MemberReference member loopUnitField_ter ^ ^ ^ ^ value MethodInvocation qualifier lastUnitField_ter ^ ^ arguments MemberReference member loopUnitField_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
loopUnitField = lastUnitField.compareTo(loopUnitField);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ arguments MemberReference member loopUnitField_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = lastUnitField.compareTo(loopUnitField, null);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name compare_ter ^ ^ initializer MethodInvocation qualifier lastUnitField_ter ^ ^ arguments Literal value null_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ ^ ^ 
int compare = lastUnitField.compareTo(null);

condition MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ 
if(durationField.isSupported()){
condition MethodInvocation qualifier durationField_ter ^ ^ member isPrecise_ter ^ ^ ^ ^ 
if(durationField.isPrecise()){
condition MethodInvocation qualifier durationField_ter ^ ^ member compareTo_ter ^ ^ ^ ^ 
if(durationField.compareTo()){
IfStatement condition MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ ^ 
if(durationField.isSupported()){

IfStatement condition MethodInvocation qualifier durationField_ter ^ ^ member isPrecise_ter ^ ^ ^ ^ ^ 
if(durationField.isPrecise()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ ^ 
if(!durationField.isSupported()){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ operandr MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ ^ ^ ^ 
if((durationField.isSupported() || durationField.isSupported())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ operandr MethodInvocation qualifier durationField_ter ^ ^ member isPrecise_ter ^ ^ ^ ^ ^ ^ ^ 
if((durationField.isSupported() || durationField.isPrecise())){

IfStatement condition MemberReference member durationField_ter ^ ^ ^ ^ ^ 
if(durationField){

IfStatement condition MethodInvocation qualifier durationField_ter ^ ^ selectors MethodInvocation member isSupported_ter ^ ^ ^ ^ member isSupported_ter ^ ^ ^ ^ ^ 
if(durationField.isSupported().isSupported()){

IfStatement condition MethodInvocation qualifier durationField_ter ^ ^ selectors MethodInvocation member isPrecise_ter ^ ^ ^ ^ member isSupported_ter ^ ^ ^ ^ ^ 
if(durationField.isSupported().isPrecise()){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member durationField_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ ^ ^ ^ 
if(((durationField == null) || durationField.isSupported())){

IfStatement condition MemberReference prefix_operators !_ter ^ ^ member durationField_ter ^ ^ ^ ^ ^ 
if(!durationField){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ operandr MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ ^ ^ ^ 
if((durationField.isSupported() && durationField.isSupported())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ operandr MethodInvocation qualifier durationField_ter ^ ^ member isPrecise_ter ^ ^ ^ ^ ^ ^ ^ 
if((durationField.isSupported() && durationField.isPrecise())){

IfStatement condition MethodInvocation member isSupported_ter ^ ^ ^ ^ ^ 
if(isSupported()){

IfStatement condition MethodInvocation member isPrecise_ter ^ ^ ^ ^ ^ 
if(isPrecise()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member durationField_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ ^ ^ ^ 
if(((durationField == null) && durationField.isSupported())){

IfStatement condition MethodInvocation qualifier durationField_ter ^ ^ selectors MethodInvocation member isSupported_ter ^ ^ ^ ^ member isPrecise_ter ^ ^ ^ ^ ^ 
if(durationField.isPrecise().isSupported()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier durationField_ter ^ ^ member isPrecise_ter ^ ^ ^ ^ ^ 
if(!durationField.isPrecise()){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ ^ ^ ^ 
if((durationField.isSupported() || !durationField.isSupported())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier durationField_ter ^ ^ member isPrecise_ter ^ ^ ^ ^ ^ ^ ^ 
if((durationField.isSupported() || !durationField.isPrecise())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member durationField_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ ^ ^ ^ 
if(((durationField != null) && durationField.isSupported())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member durationField_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ ^ ^ ^ 
if(((durationField != null) || durationField.isSupported())){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member durationField_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((durationField == null)){

IfStatement condition MethodInvocation qualifier durationField_ter ^ ^ arguments MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ member isSupported_ter ^ ^ ^ ^ ^ 
if(durationField.isSupported(durationField.isSupported())){

IfStatement condition MethodInvocation qualifier durationField_ter ^ ^ arguments MethodInvocation qualifier durationField_ter ^ ^ member isPrecise_ter ^ ^ ^ ^ member isSupported_ter ^ ^ ^ ^ ^ 
if(durationField.isSupported(durationField.isPrecise())){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member durationField_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 1_ter ^ ^ ^ ^ ^ 
if((durationField == null)){
return 1;}
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ ^ ^ ^ 
if((durationField.isSupported() && !durationField.isSupported())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier durationField_ter ^ ^ member isPrecise_ter ^ ^ ^ ^ ^ ^ ^ 
if((durationField.isSupported() && !durationField.isPrecise())){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isSupported_ter ^ ^ ^ ^ ^ 
if(!isSupported()){

IfStatement condition MethodInvocation qualifier durationField_ter ^ ^ arguments MemberReference member durationField_ter ^ ^ ^ ^ member isSupported_ter ^ ^ ^ ^ ^ 
if(durationField.isSupported(durationField)){

IfStatement condition MethodInvocation arguments MemberReference member durationField_ter ^ ^ ^ ^ member isSupported_ter ^ ^ ^ ^ ^ 
if(isSupported(durationField)){

IfStatement condition MethodInvocation arguments MemberReference member durationField_ter ^ ^ ^ ^ member isPrecise_ter ^ ^ ^ ^ ^ 
if(isPrecise(durationField)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member durationField_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if((durationField == null)){
return 0;}
StatementExpression expression Assignment expressionl MemberReference member durationField_ter ^ ^ ^ ^ value MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
durationField = durationField.isSupported();


IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ operandr MethodInvocation member isSupported_ter ^ ^ ^ ^ ^ ^ ^ 
if((durationField.isSupported() || isSupported())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ operandr MethodInvocation member isPrecise_ter ^ ^ ^ ^ ^ ^ ^ 
if((durationField.isSupported() || isPrecise())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isSupported_ter ^ ^ ^ ^ ^ ^ ^ 
if((durationField.isSupported() || !isSupported())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isPrecise_ter ^ ^ ^ ^ ^ ^ ^ 
if((durationField.isSupported() || !isPrecise())){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member durationField_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((durationField != null)){

IfStatement condition MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 1_ter ^ ^ ^ ^ ^ 
if(durationField.isSupported()){
return 1;}
IfStatement condition MethodInvocation qualifier durationField_ter ^ ^ member isPrecise_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 1_ter ^ ^ ^ ^ ^ 
if(durationField.isPrecise()){
return 1;}
IfStatement condition MethodInvocation qualifier durationField_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ ^ member isSupported_ter ^ ^ ^ ^ ^ 
if(durationField.isSupported("null")){

condition MethodInvocation qualifier durationField_ter ^ ^ member add_ter ^ ^ ^ ^ 
if(durationField.add()){
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member durationField_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((durationField != null)){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isPrecise_ter ^ ^ ^ ^ ^ 
if(!isPrecise()){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member durationField_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ ^ ^ ^ 
if(((durationField == 0) || durationField.isSupported())){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
if((durationField.isSupported() == 0)){

IfStatement condition MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(durationField.isSupported()){
return 0;}
IfStatement condition MethodInvocation qualifier durationField_ter ^ ^ member isPrecise_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(durationField.isPrecise()){
return 0;}
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member durationField_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((durationField.isSupported() || (durationField == null))){

IfStatement condition MethodInvocation qualifier durationField_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(durationField.isEmpty()){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member durationField_ter ^ ^ ^ ^ operandr MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ ^ ^ ^ 
if((durationField || durationField.isSupported())){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier durationField_ter ^ ^ selectors MethodInvocation member isSupported_ter ^ ^ ^ ^ member isSupported_ter ^ ^ ^ ^ ^ 
if(!durationField.isSupported().isSupported()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier durationField_ter ^ ^ selectors MethodInvocation member isPrecise_ter ^ ^ ^ ^ member isSupported_ter ^ ^ ^ ^ ^ 
if(!durationField.isSupported().isPrecise()){

IfStatement condition MethodInvocation qualifier durationField_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member isSupported_ter ^ ^ ^ ^ ^ 
if(durationField.isSupported(0)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member durationField_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier durationField_ter ^ ^ member isSupported_ter ^ ^ ^ ^ ^ ^ ^ 
if(((durationField == 0) && durationField.isSupported())){

stderr: 