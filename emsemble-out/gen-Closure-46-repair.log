stdout: condition MethodInvocation qualifier that_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ 
if(that.hasDisplayName()){
condition MethodInvocation qualifier that_ter ^ ^ member isNoType_ter ^ ^ ^ ^ 
if(that.isNoType()){
condition MethodInvocation qualifier that_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ 
if(that.isNoResolvedType()){
condition MethodInvocation qualifier that_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ 
if(that.isNoObjectType()){
condition MethodInvocation qualifier that_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ 
if(that.isEmptyType()){
condition MethodInvocation qualifier that_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ 
if(that.isNumberObjectType()){
condition MethodInvocation qualifier that_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ 
if(that.isNumberValueType()){
condition MethodInvocation qualifier that_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ 
if(that.isFunctionPrototypeType()){
condition MethodInvocation qualifier that_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ 
if(that.isStringObjectType()){
condition MethodInvocation qualifier that_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ 
if(that.isTheObjectType()){
condition MethodInvocation qualifier that_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ 
if(that.isStringValueType()){
condition MethodInvocation qualifier that_ter ^ ^ member isString_ter ^ ^ ^ ^ 
if(that.isString()){
condition MethodInvocation qualifier that_ter ^ ^ member isNumber_ter ^ ^ ^ ^ 
if(that.isNumber()){
condition MethodInvocation qualifier that_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ 
if(that.isArrayType()){
condition MethodInvocation qualifier that_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ 
if(that.isBooleanObjectType()){
condition MethodInvocation qualifier that_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ 
if(that.isBooleanValueType()){
condition MethodInvocation qualifier that_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ 
if(that.isRegexpType()){
condition MethodInvocation qualifier that_ter ^ ^ member isDateType_ter ^ ^ ^ ^ 
if(that.isDateType()){
condition MethodInvocation qualifier that_ter ^ ^ member isNullType_ter ^ ^ ^ ^ 
if(that.isNullType()){
condition MethodInvocation qualifier that_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ 
if(that.isVoidType()){
condition MethodInvocation qualifier that_ter ^ ^ member isAllType_ter ^ ^ ^ ^ 
if(that.isAllType()){
condition MethodInvocation qualifier that_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ 
if(that.isUnknownType()){
condition MethodInvocation qualifier that_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ 
if(that.isCheckedUnknownType()){
condition MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ 
if(that.isUnionType()){
condition MethodInvocation qualifier that_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ 
if(that.isGlobalThisType()){
condition MethodInvocation qualifier that_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ 
if(that.isFunctionType()){
condition MethodInvocation qualifier that_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ 
if(that.isEnumElementType()){
condition MethodInvocation qualifier that_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ 
if(that.isEnumType()){
condition MethodInvocation qualifier that_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ 
if(that.isNamedType()){
condition MethodInvocation qualifier that_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ 
if(that.isRecordType()){
condition MethodInvocation qualifier that_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ 
if(that.isTemplateType()){
condition MethodInvocation qualifier that_ter ^ ^ member isObject_ter ^ ^ ^ ^ 
if(that.isObject()){
condition MethodInvocation qualifier that_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ 
if(that.isConstructor()){
condition MethodInvocation qualifier that_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ 
if(that.isNominalType()){
condition MethodInvocation qualifier that_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ 
if(that.isNominalConstructor()){
condition MethodInvocation qualifier that_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ 
if(that.isInstanceType()){
condition MethodInvocation qualifier that_ter ^ ^ member isInterface_ter ^ ^ ^ ^ 
if(that.isInterface()){
condition MethodInvocation qualifier that_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ 
if(that.isOrdinaryFunction()){
condition MethodInvocation qualifier that_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ 
if(that.matchesInt32Context()){
condition MethodInvocation qualifier that_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ 
if(that.matchesUint32Context()){
condition MethodInvocation qualifier that_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ 
if(that.matchesNumberContext()){
condition MethodInvocation qualifier that_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ 
if(that.matchesStringContext()){
condition MethodInvocation qualifier that_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ 
if(that.matchesObjectContext()){
condition MethodInvocation qualifier that_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ 
if(that.canBeCalled()){
condition MethodInvocation qualifier that_ter ^ ^ member isNullable_ter ^ ^ ^ ^ 
if(that.isNullable()){
condition MethodInvocation qualifier that_ter ^ ^ member isResolved_ter ^ ^ ^ ^ 
if(that.isResolved()){
condition MethodInvocation qualifier that_ter ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ 
if(that.getLeastSupertype()){
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(!that.isUnionType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ 
if(that.hasDisplayName()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ 
if(that.isNoType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ 
if(that.isNoResolvedType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ 
if(that.isNoObjectType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ 
if(that.isEmptyType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ 
if(that.isNumberObjectType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ 
if(that.isNumberValueType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
if(that.isFunctionPrototypeType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ 
if(that.isStringObjectType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ 
if(that.isTheObjectType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ 
if(that.isStringValueType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(that.isString()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(that.isNumber()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ 
if(that.isArrayType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ 
if(that.isBooleanObjectType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ 
if(that.isBooleanValueType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ 
if(that.isRegexpType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ 
if(that.isDateType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ 
if(that.isNullType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ 
if(that.isVoidType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ 
if(that.isAllType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ 
if(that.isUnknownType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ 
if(that.isCheckedUnknownType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ 
if(that.isGlobalThisType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ 
if(that.isFunctionType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ 
if(that.isEnumElementType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ 
if(that.isEnumType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ 
if(that.isNamedType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ 
if(that.isRecordType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ 
if(that.isTemplateType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ 
if(that.isObject()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ 
if(that.isConstructor()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ 
if(that.isNominalType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ 
if(that.isNominalConstructor()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ 
if(that.isInstanceType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ 
if(that.isInterface()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ 
if(that.isOrdinaryFunction()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ 
if(that.matchesInt32Context()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ 
if(that.matchesUint32Context()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ 
if(that.matchesNumberContext()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ 
if(that.matchesStringContext()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ 
if(that.matchesObjectContext()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ 
if(that.canBeCalled()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ 
if(that.isNullable()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ 
if(that.isResolved()){

StatementExpression expression MethodInvocation member clearResolved_ter ^ ^ ^ ^ ^ 
clearResolved();

IfStatement condition MethodInvocation member isUnionType_ter ^ ^ ^ ^ ^ 
if(isUnionType()){

IfStatement condition MethodInvocation member hasDisplayName_ter ^ ^ ^ ^ ^ 
if(hasDisplayName()){

IfStatement condition MethodInvocation member isNoType_ter ^ ^ ^ ^ ^ 
if(isNoType()){

IfStatement condition MethodInvocation member isNoResolvedType_ter ^ ^ ^ ^ ^ 
if(isNoResolvedType()){

IfStatement condition MethodInvocation member isNoObjectType_ter ^ ^ ^ ^ ^ 
if(isNoObjectType()){

IfStatement condition MethodInvocation member isEmptyType_ter ^ ^ ^ ^ ^ 
if(isEmptyType()){

IfStatement condition MethodInvocation member isNumberObjectType_ter ^ ^ ^ ^ ^ 
if(isNumberObjectType()){

IfStatement condition MethodInvocation member isNumberValueType_ter ^ ^ ^ ^ ^ 
if(isNumberValueType()){

IfStatement condition MethodInvocation member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
if(isFunctionPrototypeType()){

IfStatement condition MethodInvocation member isStringObjectType_ter ^ ^ ^ ^ ^ 
if(isStringObjectType()){

IfStatement condition MethodInvocation member isTheObjectType_ter ^ ^ ^ ^ ^ 
if(isTheObjectType()){

IfStatement condition MethodInvocation member isStringValueType_ter ^ ^ ^ ^ ^ 
if(isStringValueType()){

IfStatement condition MethodInvocation member isString_ter ^ ^ ^ ^ ^ 
if(isString()){

IfStatement condition MethodInvocation member isNumber_ter ^ ^ ^ ^ ^ 
if(isNumber()){

IfStatement condition MethodInvocation member isArrayType_ter ^ ^ ^ ^ ^ 
if(isArrayType()){

IfStatement condition MethodInvocation member isBooleanObjectType_ter ^ ^ ^ ^ ^ 
if(isBooleanObjectType()){

IfStatement condition MethodInvocation member isBooleanValueType_ter ^ ^ ^ ^ ^ 
if(isBooleanValueType()){

IfStatement condition MethodInvocation member isRegexpType_ter ^ ^ ^ ^ ^ 
if(isRegexpType()){

IfStatement condition MethodInvocation member isDateType_ter ^ ^ ^ ^ ^ 
if(isDateType()){

IfStatement condition MethodInvocation member isNullType_ter ^ ^ ^ ^ ^ 
if(isNullType()){

IfStatement condition MethodInvocation member isVoidType_ter ^ ^ ^ ^ ^ 
if(isVoidType()){

IfStatement condition MethodInvocation member isAllType_ter ^ ^ ^ ^ ^ 
if(isAllType()){

IfStatement condition MethodInvocation member isUnknownType_ter ^ ^ ^ ^ ^ 
if(isUnknownType()){

IfStatement condition MethodInvocation member isCheckedUnknownType_ter ^ ^ ^ ^ ^ 
if(isCheckedUnknownType()){

IfStatement condition MethodInvocation member isGlobalThisType_ter ^ ^ ^ ^ ^ 
if(isGlobalThisType()){

IfStatement condition MethodInvocation member isFunctionType_ter ^ ^ ^ ^ ^ 
if(isFunctionType()){

IfStatement condition MethodInvocation member isEnumElementType_ter ^ ^ ^ ^ ^ 
if(isEnumElementType()){

IfStatement condition MethodInvocation member isEnumType_ter ^ ^ ^ ^ ^ 
if(isEnumType()){

IfStatement condition MethodInvocation member isNamedType_ter ^ ^ ^ ^ ^ 
if(isNamedType()){

IfStatement condition MethodInvocation member isRecordType_ter ^ ^ ^ ^ ^ 
if(isRecordType()){

IfStatement condition MethodInvocation member isTemplateType_ter ^ ^ ^ ^ ^ 
if(isTemplateType()){

IfStatement condition MethodInvocation member isObject_ter ^ ^ ^ ^ ^ 
if(isObject()){

IfStatement condition MethodInvocation member isConstructor_ter ^ ^ ^ ^ ^ 
if(isConstructor()){

IfStatement condition MethodInvocation member isNominalType_ter ^ ^ ^ ^ ^ 
if(isNominalType()){

IfStatement condition MethodInvocation member isNominalConstructor_ter ^ ^ ^ ^ ^ 
if(isNominalConstructor()){

IfStatement condition MethodInvocation member isInstanceType_ter ^ ^ ^ ^ ^ 
if(isInstanceType()){

IfStatement condition MethodInvocation member isInterface_ter ^ ^ ^ ^ ^ 
if(isInterface()){

IfStatement condition MethodInvocation member isOrdinaryFunction_ter ^ ^ ^ ^ ^ 
if(isOrdinaryFunction()){

IfStatement condition MethodInvocation member matchesInt32Context_ter ^ ^ ^ ^ ^ 
if(matchesInt32Context()){

IfStatement condition MethodInvocation member matchesUint32Context_ter ^ ^ ^ ^ ^ 
if(matchesUint32Context()){

IfStatement condition MethodInvocation member matchesNumberContext_ter ^ ^ ^ ^ ^ 
if(matchesNumberContext()){

IfStatement condition MethodInvocation member matchesStringContext_ter ^ ^ ^ ^ ^ 
if(matchesStringContext()){

IfStatement condition MethodInvocation member matchesObjectContext_ter ^ ^ ^ ^ ^ 
if(matchesObjectContext()){

IfStatement condition MethodInvocation member canBeCalled_ter ^ ^ ^ ^ ^ 
if(canBeCalled()){

IfStatement condition MethodInvocation member isNullable_ter ^ ^ ^ ^ ^ 
if(isNullable()){

IfStatement condition MethodInvocation member isResolved_ter ^ ^ ^ ^ ^ 
if(isResolved()){

StatementExpression expression MethodInvocation qualifier that_ter ^ ^ member clearResolved_ter ^ ^ ^ ^ ^ 
that.clearResolved();

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member that_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((that == null) && that.isUnionType())){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(!isUnionType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ arguments This_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(!that.isUnionType(this)){

IfStatement condition MemberReference member that_ter ^ ^ ^ ^ ^ 
if(that){

IfStatement condition MemberReference prefix_operators !_ter ^ ^ member that_ter ^ ^ ^ ^ ^ 
if(!that){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && that.isResolved())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member that_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((that != null) && that.isUnionType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.hasDisplayName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isNoType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isNoResolvedType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isNoObjectType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isEmptyType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isNumberObjectType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isNumberValueType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isStringObjectType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isTheObjectType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isStringValueType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isString())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isNumber())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isArrayType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isBooleanObjectType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isBooleanValueType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isRegexpType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isDateType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isNullType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isVoidType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isAllType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isUnknownType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isUnionType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isGlobalThisType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isFunctionType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isEnumElementType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isEnumType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isNamedType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isRecordType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isTemplateType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isObject())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isConstructor())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isNominalType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isNominalConstructor())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isInstanceType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isInterface())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.matchesInt32Context())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.matchesUint32Context())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.matchesNumberContext())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.matchesStringContext())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.matchesObjectContext())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.canBeCalled())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isNullable())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || that.isResolved())){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member that_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if((that == null)){
return null;}
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member that_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((that == null) || that.isUnionType())){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ 
if(!that.hasDisplayName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ 
if(!that.isNoType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ 
if(!that.isNoResolvedType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ 
if(!that.isNoObjectType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ 
if(!that.isEmptyType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ 
if(!that.isNumberObjectType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ 
if(!that.isNumberValueType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
if(!that.isFunctionPrototypeType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ 
if(!that.isStringObjectType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ 
if(!that.isTheObjectType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ 
if(!that.isStringValueType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(!that.isString()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(!that.isNumber()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ 
if(!that.isArrayType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ 
if(!that.isBooleanObjectType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ 
if(!that.isBooleanValueType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ 
if(!that.isRegexpType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ 
if(!that.isDateType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ 
if(!that.isNullType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ 
if(!that.isVoidType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ 
if(!that.isAllType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ 
if(!that.isUnknownType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ 
if(!that.isCheckedUnknownType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ 
if(!that.isGlobalThisType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ 
if(!that.isFunctionType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ 
if(!that.isEnumElementType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ 
if(!that.isEnumType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ 
if(!that.isNamedType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ 
if(!that.isRecordType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ 
if(!that.isTemplateType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ 
if(!that.isObject()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ 
if(!that.isConstructor()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ 
if(!that.isNominalType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ 
if(!that.isNominalConstructor()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ 
if(!that.isInstanceType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ 
if(!that.isInterface()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ 
if(!that.isOrdinaryFunction()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ 
if(!that.matchesInt32Context()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ 
if(!that.matchesUint32Context()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ 
if(!that.matchesNumberContext()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ 
if(!that.matchesStringContext()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ 
if(!that.matchesObjectContext()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ 
if(!that.canBeCalled()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ 
if(!that.isNullable()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ 
if(!that.isResolved()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !that.isResolved())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member hasDisplayName_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().hasDisplayName()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isNoType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isNoType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isNoResolvedType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isNoResolvedType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isNoObjectType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isNoObjectType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isEmptyType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isEmptyType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isNumberObjectType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isNumberObjectType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isNumberValueType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isNumberValueType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isFunctionPrototypeType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isFunctionPrototypeType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isStringObjectType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isStringObjectType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isTheObjectType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isTheObjectType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isStringValueType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isStringValueType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isString_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isString()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isNumber_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isNumber()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isArrayType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isArrayType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isBooleanObjectType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isBooleanObjectType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isBooleanValueType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isBooleanValueType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isRegexpType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isRegexpType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isDateType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isDateType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isNullType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isNullType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isVoidType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isVoidType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isAllType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isAllType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isUnknownType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isUnknownType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isCheckedUnknownType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isCheckedUnknownType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isUnionType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isUnionType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isGlobalThisType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isGlobalThisType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isFunctionType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isFunctionType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isEnumElementType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isEnumElementType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isEnumType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isEnumType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isNamedType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isNamedType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isRecordType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isRecordType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isTemplateType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isTemplateType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isObject_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isObject()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isConstructor_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isConstructor()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isNominalType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isNominalType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isNominalConstructor_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isNominalConstructor()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isInstanceType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isInstanceType()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isInterface_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isInterface()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isOrdinaryFunction_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isOrdinaryFunction()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member matchesInt32Context_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().matchesInt32Context()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member matchesUint32Context_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().matchesUint32Context()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member matchesNumberContext_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().matchesNumberContext()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member matchesStringContext_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().matchesStringContext()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member matchesObjectContext_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().matchesObjectContext()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member canBeCalled_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().canBeCalled()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isNullable_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isNullable()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member isResolved_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType().isResolved()){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments This_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(this)){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.hasDisplayName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isNoType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isNoResolvedType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isNoObjectType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isEmptyType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isNumberObjectType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isNumberValueType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isStringObjectType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isTheObjectType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isStringValueType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isString())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isNumber())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isArrayType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isBooleanObjectType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isBooleanValueType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isRegexpType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isDateType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isNullType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isVoidType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isAllType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isUnknownType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isUnionType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isGlobalThisType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isFunctionType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isEnumElementType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isEnumType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isNamedType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isRecordType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isTemplateType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isObject())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isConstructor())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isNominalType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isNominalConstructor())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isInstanceType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isInterface())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.matchesInt32Context())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.matchesUint32Context())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.matchesNumberContext())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.matchesStringContext())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.matchesObjectContext())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.canBeCalled())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isNullable())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !that.isResolved())){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ selectors MethodInvocation arguments This_ter ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(!that.isUnionType().getLeastSupertype(this)){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ 
if(!hasDisplayName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ 
if(!isNoType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ 
if(!isNoResolvedType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ 
if(!isNoObjectType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ 
if(!isEmptyType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ 
if(!isNumberObjectType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ 
if(!isNumberValueType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
if(!isFunctionPrototypeType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ 
if(!isStringObjectType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ 
if(!isTheObjectType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ 
if(!isStringValueType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(!isString()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(!isNumber()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ 
if(!isArrayType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ 
if(!isBooleanObjectType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ 
if(!isBooleanValueType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ 
if(!isRegexpType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ 
if(!isDateType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ 
if(!isNullType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ 
if(!isVoidType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ 
if(!isAllType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ 
if(!isUnknownType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ 
if(!isCheckedUnknownType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ 
if(!isGlobalThisType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ 
if(!isFunctionType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ 
if(!isEnumElementType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ 
if(!isEnumType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ 
if(!isNamedType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ 
if(!isRecordType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ 
if(!isTemplateType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ 
if(!isObject()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ 
if(!isConstructor()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ 
if(!isNominalType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ 
if(!isNominalConstructor()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ 
if(!isInstanceType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ 
if(!isInterface()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ 
if(!isOrdinaryFunction()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ 
if(!matchesInt32Context()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ 
if(!matchesUint32Context()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ 
if(!matchesNumberContext()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ 
if(!matchesStringContext()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ 
if(!matchesObjectContext()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ 
if(!canBeCalled()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ 
if(!isNullable()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ 
if(!isResolved()){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member that_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((that != null)){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member that_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((that != null) || that.isUnionType())){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member that_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((that != null)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member that_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((that == null)){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.hasDisplayName()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isNoType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isNoResolvedType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isNoObjectType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isEmptyType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isNumberObjectType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isNumberValueType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isFunctionPrototypeType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isStringObjectType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isTheObjectType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isStringValueType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isString()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isNumber()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isArrayType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isBooleanObjectType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isBooleanValueType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isRegexpType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isDateType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isNullType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isVoidType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isAllType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isUnknownType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isCheckedUnknownType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isUnionType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isGlobalThisType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isFunctionType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isEnumElementType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isEnumType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isNamedType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isRecordType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isTemplateType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isObject()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isConstructor()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isNominalType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isNominalConstructor()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isInstanceType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isInterface()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isOrdinaryFunction()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.matchesInt32Context()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.matchesUint32Context()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.matchesNumberContext()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.matchesStringContext()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.matchesObjectContext()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.canBeCalled()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isNullable()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isResolved()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MemberReference member that_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that)){

condition MethodInvocation qualifier that_ter ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ 
if(that.toMaybeUnionType()){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && !isResolved())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !hasDisplayName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isNoType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isNoResolvedType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isNoObjectType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isEmptyType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isNumberObjectType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isNumberValueType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isStringObjectType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isTheObjectType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isStringValueType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isString())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isNumber())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isArrayType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isBooleanObjectType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isBooleanValueType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isRegexpType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isDateType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isNullType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isVoidType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isAllType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isUnknownType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isCheckedUnknownType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isUnionType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isGlobalThisType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isFunctionType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isEnumElementType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isEnumType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isNamedType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isRecordType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isTemplateType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isObject())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isConstructor())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isNominalType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isNominalConstructor())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isInstanceType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isInterface())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isOrdinaryFunction())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !matchesInt32Context())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !matchesUint32Context())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !matchesNumberContext())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !matchesStringContext())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !matchesObjectContext())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !canBeCalled())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isNullable())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || !isResolved())){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ arguments This_ter ^ MemberReference member that_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(!that.isUnionType(this, that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ 
if(hasDisplayName(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isNoType_ter ^ ^ ^ ^ ^ 
if(isNoType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ 
if(isNoResolvedType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ 
if(isNoObjectType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ 
if(isEmptyType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ 
if(isNumberObjectType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ 
if(isNumberValueType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
if(isFunctionPrototypeType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ 
if(isStringObjectType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ 
if(isTheObjectType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ 
if(isStringValueType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(isString(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(isNumber(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ 
if(isArrayType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ 
if(isBooleanObjectType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ 
if(isBooleanValueType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ 
if(isRegexpType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isDateType_ter ^ ^ ^ ^ ^ 
if(isDateType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isNullType_ter ^ ^ ^ ^ ^ 
if(isNullType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ 
if(isVoidType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isAllType_ter ^ ^ ^ ^ ^ 
if(isAllType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ 
if(isUnknownType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ 
if(isCheckedUnknownType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(isUnionType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ 
if(isGlobalThisType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ 
if(isFunctionType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ 
if(isEnumElementType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ 
if(isEnumType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ 
if(isNamedType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ 
if(isRecordType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ 
if(isTemplateType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isObject_ter ^ ^ ^ ^ ^ 
if(isObject(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ 
if(isConstructor(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ 
if(isNominalType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ 
if(isNominalConstructor(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ 
if(isInstanceType(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isInterface_ter ^ ^ ^ ^ ^ 
if(isInterface(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ 
if(isOrdinaryFunction(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ 
if(matchesInt32Context(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ 
if(matchesUint32Context(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ 
if(matchesNumberContext(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ 
if(matchesStringContext(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ 
if(matchesObjectContext(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ 
if(canBeCalled(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isNullable_ter ^ ^ ^ ^ ^ 
if(isNullable(that)){

IfStatement condition MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member isResolved_ter ^ ^ ^ ^ ^ 
if(isResolved(that)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member that_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((that == null)){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments This_ter ^ MemberReference member that_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(this, that)){

StatementExpression expression Assignment expressionl MemberReference member that_ter ^ ^ ^ ^ value MethodInvocation qualifier that_ter ^ ^ member clearResolved_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
that = that.clearResolved();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() == null)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() && isResolved())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.hasDisplayName())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isNoType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isNoType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isNoResolvedType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isNoObjectType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isEmptyType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isNumberObjectType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isNumberValueType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isFunctionPrototypeType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isStringObjectType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isTheObjectType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isStringValueType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isString_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isString())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isNumber_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isNumber())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isArrayType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isBooleanObjectType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isBooleanValueType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isRegexpType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isDateType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isDateType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isNullType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isNullType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isVoidType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isAllType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isAllType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isUnknownType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isCheckedUnknownType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isUnionType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isGlobalThisType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isFunctionType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isEnumElementType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isEnumType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isNamedType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isRecordType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isTemplateType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isObject_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isObject())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isConstructor())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isNominalType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isNominalConstructor())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isInstanceType())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isInterface_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isInterface())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isOrdinaryFunction())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.matchesInt32Context())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.matchesUint32Context())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.matchesNumberContext())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.matchesStringContext())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.matchesObjectContext())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.canBeCalled())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isNullable_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isNullable())){

IfStatement condition MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member isResolved_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(that.isUnionType(that.isResolved())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || hasDisplayName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isNoType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isNoResolvedType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isNoObjectType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isEmptyType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isNumberObjectType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isNumberValueType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isStringObjectType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isTheObjectType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isStringValueType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isString())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isNumber())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isArrayType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isBooleanObjectType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isBooleanValueType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isRegexpType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isDateType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isNullType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isVoidType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isAllType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isUnknownType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isCheckedUnknownType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isUnionType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isGlobalThisType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isFunctionType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isEnumElementType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isEnumType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isNamedType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isRecordType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isTemplateType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isObject())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isConstructor())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isNominalType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isNominalConstructor())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isInstanceType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isInterface())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isOrdinaryFunction())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || matchesInt32Context())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || matchesUint32Context())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || matchesNumberContext())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || matchesStringContext())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || matchesObjectContext())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || canBeCalled())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isNullable())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || isResolved())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member that_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((that.isUnionType() || (that == null))){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.hasDisplayName()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isNoType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isNoResolvedType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isNoObjectType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isEmptyType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isNumberObjectType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isNumberValueType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isFunctionPrototypeType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isStringObjectType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isTheObjectType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isStringValueType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isString()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isNumber()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isArrayType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isBooleanObjectType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isBooleanValueType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isRegexpType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isDateType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isNullType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isVoidType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isAllType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isUnknownType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isCheckedUnknownType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isUnionType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isGlobalThisType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isFunctionType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isEnumElementType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isEnumType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isNamedType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isRecordType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isTemplateType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isObject()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isConstructor()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isNominalType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isNominalConstructor()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isInstanceType()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isInterface()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isOrdinaryFunction()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.matchesInt32Context()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.matchesUint32Context()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.matchesNumberContext()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.matchesStringContext()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.matchesObjectContext()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.canBeCalled()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isNullable()){
return null;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(!that.isResolved()){
return null;}
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member that_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if((that != null)){
return null;}
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation arguments This_ter ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return that.toMaybeUnionType().getLeastSupertype(this);
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation arguments This_ter ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return that.getLeastSupertype().getLeastSupertype(this);
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ arguments This_ter ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return that.getLeastSupertype(this);
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return that.toMaybeUnionType();
ReturnStatement expression MemberReference member that_ter ^ ^ ^ ^ ^ 
return that;
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return that.getLeastSupertype();
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ arguments This_ter ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return that.toMaybeUnionType(this);
StatementExpression expression MethodInvocation qualifier that_ter ^ ^ member clearResolved_ter ^ ^ ^ ^ ^ 
that.clearResolved();

ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ arguments MemberReference member that_ter ^ ^ ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return that.getLeastSupertype(that);
ReturnStatement expression Cast type ReferenceType name JSType_ter ^ ^ ^ ^ expression MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation arguments This_ter ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (JSType)that.toMaybeUnionType().getLeastSupertype(this);
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation arguments MemberReference member resolveResult_ter ^ ^ ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return that.toMaybeUnionType().getLeastSupertype(resolveResult);
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member getLeastSupertype_ter ^ ^ ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return that.toMaybeUnionType().getLeastSupertype();
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation arguments This_ter ^ ^ member add_ter ^ ^ ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return that.toMaybeUnionType().add(this);
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation arguments This_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return that.toMaybeUnionType().isUnionType(this);
StatementExpression expression MethodInvocation member clearResolved_ter ^ ^ ^ ^ ^ 
clearResolved();

ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation arguments This_ter ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ arguments This_ter ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return that.toMaybeUnionType(this).getLeastSupertype(this);
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
return that.isUnionType();
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation arguments This_ter ^ ^ member debug_ter ^ ^ ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return that.toMaybeUnionType().debug(this);
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return that.toMaybeUnionType().getLeastSupertype(that);
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ arguments This_ter ^ MemberReference member that_ter ^ ^ ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return that.getLeastSupertype(this, that);
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ arguments MemberReference member resolveResult_ter ^ ^ ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return that.getLeastSupertype(resolveResult);
ReturnStatement expression MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return !that.toMaybeUnionType();
ReturnStatement expression MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return getLeastSupertype(that);
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation arguments This_ter ^ ^ member get_ter ^ ^ ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return that.toMaybeUnionType().get(this);
ReturnStatement expression MethodInvocation arguments This_ter ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return getLeastSupertype(this);
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation arguments This_ter ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
return that.add().getLeastSupertype(this);
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
return null;
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation arguments This_ter ^ MemberReference member that_ter ^ ^ ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return that.toMaybeUnionType().getLeastSupertype(this, that);
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ arguments MethodInvocation qualifier that_ter ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return that.getLeastSupertype(that.toMaybeUnionType());
ReturnStatement expression MethodInvocation prefix_operators !_ter ^ ^ qualifier that_ter ^ ^ selectors MethodInvocation arguments This_ter ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return !that.toMaybeUnionType().getLeastSupertype(this);
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation arguments This_ter ^ ^ member getName_ter ^ ^ ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return that.toMaybeUnionType().getName(this);
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation arguments This_ter ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ arguments This_ter ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return that.getLeastSupertype(this).getLeastSupertype(this);
ReturnStatement expression This selectors MemberReference member that_ter ^ ^ ^ ^ ^ ^ ^ 
return this.that;
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation arguments This_ter ^ MemberReference member resolveResult_ter ^ ^ ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return that.toMaybeUnionType().getLeastSupertype(this, resolveResult);
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member that_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if((that == null)){
return null;}
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ arguments This_ter ^ MemberReference member that_ter ^ ^ ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return that.toMaybeUnionType(this, that);
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation arguments This_ter ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ ^ 
return that.debug().getLeastSupertype(this);
ReturnStatement expression MethodInvocation member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return toMaybeUnionType();
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation arguments This_ter ^ ^ member e_ter ^ ^ ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return that.toMaybeUnionType().e(this);
ReturnStatement expression MethodInvocation arguments This_ter ^ MemberReference member that_ter ^ ^ ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return getLeastSupertype(this, that);
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation arguments This_ter ^ ^ member lastIndexOf_ter ^ ^ ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return that.toMaybeUnionType().lastIndexOf(this);
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation member toMaybeUnionType_ter ^ ^ ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return that.toMaybeUnionType().toMaybeUnionType();
ReturnStatement expression MethodInvocation arguments This_ter ^ MemberReference member that_ter ^ ^ ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return getLeastSupertype(this, that);
ReturnStatement expression MemberReference member that_ter ^ ^ ^ ^ ^ 
return that;
ReturnStatement expression MemberReference member that_ter ^ ^ ^ ^ ^ 
if (true) { return that; }

StatementExpression expression MethodInvocation qualifier that_ter ^ ^ member clearResolved_ter ^ ^ ^ ^ ^ 
that.clearResolved();

ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if (true) { return null; }

StatementExpression expression MethodInvocation member clearResolved_ter ^ ^ ^ ^ ^ 
clearResolved();

ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ member clearResolved_ter ^ ^ ^ ^ ^ 
if (true) { return that.clearResolved(); }

ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return that.getLeastSupertype();
ReturnStatement expression MethodInvocation member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return getLeastSupertype();
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation arguments This_ter ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
if (true) { return that.toMaybeUnionType().getLeastSupertype(this); }

ReturnStatement expression MethodInvocation arguments This_ter ^ MemberReference member that_ter ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ ^ 
return debug(this, that);
ReturnStatement expression Cast type ReferenceType name JSType_ter ^ ^ ^ ^ expression MethodInvocation arguments This_ter ^ MemberReference member that_ter ^ ^ ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (JSType)getLeastSupertype(this, that);
ReturnStatement expression MethodInvocation arguments This_ter ^ MemberReference member that_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
return add(this, that);
ReturnStatement expression MethodInvocation arguments MemberReference member that_ter ^ ^ ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return getLeastSupertype(that);
ReturnStatement expression MethodInvocation arguments MemberReference member that_ter ^ ^ ^ MemberReference member resolveResult_ter ^ ^ ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return getLeastSupertype(that, resolveResult);
ReturnStatement expression MethodInvocation member clearResolved_ter ^ ^ ^ ^ ^ 
if (true) { return clearResolved(); }

ReturnStatement_ter ^ 
if (true) { return;
 }

ReturnStatement expression MethodInvocation arguments This_ter ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return getLeastSupertype(this);
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member that_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if((that == null)){
return null;}
ReturnStatement expression MethodInvocation arguments MemberReference member that_ter ^ ^ ^ MemberReference member par1 ^ ^ ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return getLeastSupertype(that, );

ReturnStatement expression MethodInvocation arguments MemberReference member that_ter ^ ^ ^ MemberReference member that_ter ^ ^ ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return getLeastSupertype(that, that);
ReturnStatement expression MethodInvocation arguments This_ter ^ MemberReference member that_ter ^ ^ ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return toMaybeUnionType(this, that);
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ arguments This_ter ^ MemberReference member that_ter ^ ^ ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return that.getLeastSupertype(this, that);
ReturnStatement expression MethodInvocation arguments This_ter ^ MemberReference member that_ter ^ ^ ^ ^ member e_ter ^ ^ ^ ^ ^ 
return e(this, that);
ReturnStatement expression MethodInvocation selectors MethodInvocation arguments This_ter ^ MemberReference member that_ter ^ ^ ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return toMaybeUnionType().getLeastSupertype(this, that);
ReturnStatement expression MethodInvocation arguments This_ter ^ MemberReference member par1 ^ ^ ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return getLeastSupertype(this, );

ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ arguments This_ter ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return that.getLeastSupertype(this);
ReturnStatement expression MemberReference member par1 ^ ^ ^ ^ ^ 
if (true) { return ; }

ReturnStatement expression MethodInvocation selectors MethodInvocation arguments This_ter ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ arguments This_ter ^ MemberReference member that_ter ^ ^ ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return getLeastSupertype(this, that).getLeastSupertype(this);
ReturnStatement expression MethodInvocation arguments This_ter ^ MemberReference member that_ter ^ ^ ^ ^ member put_ter ^ ^ ^ ^ ^ 
return put(this, that);
ReturnStatement expression MethodInvocation arguments This_ter ^ MemberReference member that_ter ^ ^ ^ ^ member max_ter ^ ^ ^ ^ ^ 
return max(this, that);
ReturnStatement expression This_ter ^ ^ ^ 
if (true) { return this; }

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member that_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((that != null)){

ReturnStatement expression MethodInvocation arguments This_ter ^ MemberReference member that_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
return isUnionType(this, that);
BreakStatement_ter ^ 
break;

ReturnStatement expression MethodInvocation arguments This_ter ^ MemberReference member loc0 ^ ^ ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return getLeastSupertype(this, );

IfStatement condition MethodInvocation qualifier that_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.hasDisplayName()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isNoType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isNoResolvedType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isNoObjectType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isEmptyType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isNumberObjectType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isNumberValueType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isFunctionPrototypeType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isStringObjectType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isTheObjectType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isStringValueType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isString()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isNumber()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isArrayType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isBooleanObjectType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isBooleanValueType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isRegexpType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isDateType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isNullType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isVoidType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isAllType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isUnknownType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isCheckedUnknownType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isUnionType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isGlobalThisType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isFunctionType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isEnumElementType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isEnumType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isNamedType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isRecordType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isTemplateType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isObject()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isConstructor()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isNominalType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isNominalConstructor()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isInstanceType()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isInterface()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isOrdinaryFunction()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.matchesInt32Context()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.matchesUint32Context()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.matchesNumberContext()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.matchesStringContext()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.matchesObjectContext()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.canBeCalled()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isNullable()){
return null;}
IfStatement condition MethodInvocation qualifier that_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(that.isResolved()){
return null;}
ReturnStatement expression MethodInvocation arguments MemberReference member that_ter ^ ^ ^ This_ter ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ ^ 
return getLeastSupertype(that, this);
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if (true) { return that.isUnionType(); }

ContinueStatement_ter ^ 
continue;

ReturnStatement expression MethodInvocation arguments This_ter ^ MemberReference member that_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ 
return get(this, that);
ReturnStatement expression MethodInvocation qualifier that_ter ^ ^ selectors MethodInvocation arguments This_ter ^ ^ member getLeastSupertype_ter ^ ^ ^ ^ member toMaybeUnionType_ter ^ ^ ^ ^ ^ 
return that.toMaybeUnionType().getLeastSupertype(this);
stderr: 