stdout: ReturnStatement expression This selectors MemberReference member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
return this.domainAxes.indexOf(axis);
ReturnStatement expression This selectors MemberReference member domainAxisLocations_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
return this.domainAxisLocations.indexOf(axis);
ReturnStatement expression This selectors MemberReference member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
return this.rangeAxes.indexOf(axis);
ReturnStatement expression This selectors MemberReference member rangeAxisLocations_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
return this.rangeAxisLocations.indexOf(axis);
ReturnStatement expression This selectors MemberReference member datasets_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
return this.datasets.indexOf(axis);
ReturnStatement expression This selectors MemberReference member datasetToDomainAxisMap_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
return this.datasetToDomainAxisMap.indexOf(axis);
ReturnStatement expression This selectors MemberReference member datasetToRangeAxisMap_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
return this.datasetToRangeAxisMap.indexOf(axis);
ReturnStatement expression This selectors MemberReference member renderers_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
return this.renderers.indexOf(axis);
ReturnStatement expression This selectors MemberReference member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member getDomainAxisIndex_ter ^ ^ ^ ^ ^ ^ ^ 
return this.domainAxes.getDomainAxisIndex(axis);
ReturnStatement expression This selectors MemberReference member domainAxes_ter ^ ^ ^ ^ ^ ^ ^ 
return this.domainAxes;
ReturnStatement expression This selectors MemberReference member axis_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
return this.axis.indexOf(axis);
ReturnStatement expression This selectors MemberReference qualifier domainAxes_ter ^ ^ member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
return this.domainAxes.domainAxes.indexOf(axis);
ReturnStatement expression This selectors MemberReference qualifier domainAxisLocations_ter ^ ^ member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
return this.domainAxisLocations.domainAxes.indexOf(axis);
ReturnStatement expression This selectors MemberReference qualifier rangeAxes_ter ^ ^ member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
return this.rangeAxes.domainAxes.indexOf(axis);
ReturnStatement expression This selectors MemberReference qualifier rangeAxisLocations_ter ^ ^ member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
return this.rangeAxisLocations.domainAxes.indexOf(axis);
ReturnStatement expression This selectors MemberReference qualifier datasets_ter ^ ^ member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
return this.datasets.domainAxes.indexOf(axis);
ReturnStatement expression This selectors MemberReference qualifier datasetToDomainAxisMap_ter ^ ^ member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
return this.datasetToDomainAxisMap.domainAxes.indexOf(axis);
ReturnStatement expression This selectors MemberReference qualifier datasetToRangeAxisMap_ter ^ ^ member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
return this.datasetToRangeAxisMap.domainAxes.indexOf(axis);
ReturnStatement expression This selectors MemberReference qualifier renderers_ter ^ ^ member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
return this.renderers.domainAxes.indexOf(axis);
ReturnStatement expression MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ 
return indexOf(axis);
ReturnStatement expression This selectors MemberReference member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member setDomainAxis_ter ^ ^ ^ ^ ^ ^ ^ 
return this.domainAxes.setDomainAxis(axis);
ReturnStatement expression This selectors MemberReference member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member setDomainAxes_ter ^ ^ ^ ^ ^ ^ ^ 
return this.domainAxes.setDomainAxes(axis);
ReturnStatement expression MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member setDomainAxis_ter ^ ^ ^ ^ ^ 
return setDomainAxis(axis);
ReturnStatement expression MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member setDomainAxes_ter ^ ^ ^ ^ ^ 
return setDomainAxes(axis);
ReturnStatement expression MemberReference member domainAxes_ter ^ ^ ^ ^ ^ 
return domainAxes;
StatementExpression expression MethodInvocation member clearDomainAxes_ter ^ ^ ^ ^ ^ 
clearDomainAxes();

StatementExpression expression MethodInvocation member configureDomainAxes_ter ^ ^ ^ ^ ^ 
configureDomainAxes();

StatementExpression expression MethodInvocation member clearRangeAxes_ter ^ ^ ^ ^ ^ 
clearRangeAxes();

StatementExpression expression MethodInvocation member configureRangeAxes_ter ^ ^ ^ ^ ^ 
configureRangeAxes();

StatementExpression expression MethodInvocation member clearDomainMarkers_ter ^ ^ ^ ^ ^ 
clearDomainMarkers();

StatementExpression expression MethodInvocation member clearRangeMarkers_ter ^ ^ ^ ^ ^ 
clearRangeMarkers();

StatementExpression expression MethodInvocation member clearAnnotations_ter ^ ^ ^ ^ ^ 
clearAnnotations();

ReturnStatement expression This selectors MemberReference member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ ^ ^ 
return this.domainAxes.add(axis);
ReturnStatement expression This selectors MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
return this.indexOf(axis);
ReturnStatement expression This selectors MemberReference member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ ^ ^ ^ 
return this.domainAxes.debug(axis);
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
return 0;
StatementExpression expression This selectors MemberReference member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
this.domainAxes.indexOf(axis);

ReturnStatement expression This selectors MemberReference member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member max_ter ^ ^ ^ ^ ^ ^ ^ 
return this.domainAxes.max(axis);
ReturnStatement expression This selectors MemberReference member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
return this.domainAxes.indexOf(axis, false);
ReturnStatement expression This_ter ^ ^ ^ 
return this;
ReturnStatement expression MemberReference member axis_ter ^ ^ ^ ^ ^ 
return axis;
ReturnStatement expression This selectors MemberReference member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
return this.domainAxes.indexOf(axis, true);
StatementExpression expression This selectors MemberReference member axis_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
this.axis.indexOf(axis);

IfStatement condition This selectors MemberReference member domainAxes_ter ^ ^ ^ ^ ^ ^ ^ 
if(this.domainAxes){

ReturnStatement expression This selectors MemberReference member par1 ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
return this..indexOf(axis);

ReturnStatement expression This selectors MemberReference member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member e_ter ^ ^ ^ ^ ^ ^ ^ 
return this.domainAxes.e(axis);
StatementExpression expression Assignment expressionl This selectors MemberReference member axis_ter ^ ^ ^ ^ ^ ^ value MemberReference member axis_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
this.axis = axis;

ReturnStatement expression This selectors MemberReference member getDomainAxisIndex_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
return this.getDomainAxisIndex.indexOf(axis);
ReturnStatement expression This selectors MemberReference member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member put_ter ^ ^ ^ ^ ^ ^ ^ 
return this.domainAxes.put(axis);
ReturnStatement expression This selectors MemberReference member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member axis_ter ^ ^ ^ ^ ^ ^ ^ 
return this.domainAxes.axis(axis);
ReturnStatement expression MethodInvocation qualifier axis_ter ^ ^ member indexOf_ter ^ ^ ^ ^ ^ 
return axis.indexOf();
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl This selectors MemberReference member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((this.domainAxes.indexOf(axis) != null)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl This selectors MemberReference member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if((this.domainAxes.indexOf(axis) == null)){
return 0;}
ReturnStatement expression This selectors MemberReference member axis_ter ^ ^ ^ ^ ^ ^ ^ 
return this.axis;
ReturnStatement expression Literal value 1_ter ^ ^ ^ ^ ^ 
return 1;
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
return false;
ReturnStatement expression MethodInvocation arguments MemberReference member domainAxes_ter ^ ^ ^ MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ 
return indexOf(domainAxes, axis);
StatementExpression expression SuperMethodInvocation member getDomainAxisIndex_ter ^ ^ ^ ^ ^ 
super.getDomainAxisIndex();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference member domainAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.domainAxes.indexOf(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference member domainAxisLocations_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.domainAxisLocations.indexOf(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.rangeAxes.indexOf(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference member rangeAxisLocations_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.rangeAxisLocations.indexOf(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference member datasets_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.datasets.indexOf(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference member datasetToDomainAxisMap_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.datasetToDomainAxisMap.indexOf(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference member datasetToRangeAxisMap_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.datasetToRangeAxisMap.indexOf(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference member renderers_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.renderers.indexOf(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member getRangeAxisIndex_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.rangeAxes.getRangeAxisIndex(axis);

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final int result = this.rangeAxes.indexOf(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference member axis_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.axis.indexOf(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int result = indexOf(axis);

StatementExpression expression MethodInvocation member clearDomainAxes_ter ^ ^ ^ ^ ^ 
clearDomainAxes();

StatementExpression expression MethodInvocation member configureDomainAxes_ter ^ ^ ^ ^ ^ 
configureDomainAxes();

StatementExpression expression MethodInvocation member clearRangeAxes_ter ^ ^ ^ ^ ^ 
clearRangeAxes();

StatementExpression expression MethodInvocation member configureRangeAxes_ter ^ ^ ^ ^ ^ 
configureRangeAxes();

StatementExpression expression MethodInvocation member clearDomainMarkers_ter ^ ^ ^ ^ ^ 
clearDomainMarkers();

StatementExpression expression MethodInvocation member clearRangeMarkers_ter ^ ^ ^ ^ ^ 
clearRangeMarkers();

StatementExpression expression MethodInvocation member clearAnnotations_ter ^ ^ ^ ^ ^ 
clearAnnotations();

LocalVariableDeclaration type BasicType name long_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
long result = this.rangeAxes.indexOf(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.indexOf(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.rangeAxes.indexOf();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member parent_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.rangeAxes.indexOf(parent);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference qualifier domainAxes_ter ^ ^ member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.domainAxes.rangeAxes.indexOf(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference qualifier domainAxisLocations_ter ^ ^ member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.domainAxisLocations.rangeAxes.indexOf(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference qualifier rangeAxes_ter ^ ^ member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.rangeAxes.rangeAxes.indexOf(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference qualifier rangeAxisLocations_ter ^ ^ member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.rangeAxisLocations.rangeAxes.indexOf(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference qualifier datasets_ter ^ ^ member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.datasets.rangeAxes.indexOf(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference qualifier datasetToDomainAxisMap_ter ^ ^ member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.datasetToDomainAxisMap.rangeAxes.indexOf(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference qualifier datasetToRangeAxisMap_ter ^ ^ member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.datasetToRangeAxisMap.rangeAxes.indexOf(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference qualifier renderers_ter ^ ^ member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.renderers.rangeAxes.indexOf(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer MemberReference member rangeAxes_ter ^ ^ ^ ^ ^ ^ ^ 
int result = rangeAxes;

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member setRangeAxis_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.rangeAxes.setRangeAxis(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member setRangeAxes_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.rangeAxes.setRangeAxes(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member result_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.rangeAxes.indexOf(result);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.rangeAxes.getParent(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
int result = 0;

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member axis_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((axis != null)){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isDomainGridlinesVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(!isDomainGridlinesVisible()){
return 0;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isRangeGridlinesVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(!isRangeGridlinesVisible()){
return 0;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isRangeCrosshairVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(!isRangeCrosshairVisible()){
return 0;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isRangeCrosshairLockedOnData_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(!isRangeCrosshairLockedOnData()){
return 0;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member getDrawSharedDomainAxis_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(!getDrawSharedDomainAxis()){
return 0;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isDomainZoomable_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(!isDomainZoomable()){
return 0;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isRangeZoomable_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(!isRangeZoomable()){
return 0;}
StatementExpression expression SuperMethodInvocation member getRangeAxisIndex_ter ^ ^ ^ ^ ^ 
super.getRangeAxisIndex();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
int result = 1;

IfStatement condition MethodInvocation member isDomainGridlinesVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(isDomainGridlinesVisible()){
return 0;}
IfStatement condition MethodInvocation member isRangeGridlinesVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(isRangeGridlinesVisible()){
return 0;}
IfStatement condition MethodInvocation member isRangeCrosshairVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(isRangeCrosshairVisible()){
return 0;}
IfStatement condition MethodInvocation member isRangeCrosshairLockedOnData_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(isRangeCrosshairLockedOnData()){
return 0;}
IfStatement condition MethodInvocation member getDrawSharedDomainAxis_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(getDrawSharedDomainAxis()){
return 0;}
IfStatement condition MethodInvocation member isDomainZoomable_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(isDomainZoomable()){
return 0;}
IfStatement condition MethodInvocation member isRangeZoomable_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(isRangeZoomable()){
return 0;}
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member axis_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if((axis == null)){
return 0;}
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member rangeAxes_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((rangeAxes != null)){

StatementExpression expression This selectors MemberReference member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
this.rangeAxes.indexOf(axis);

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isDomainGridlinesVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(!isDomainGridlinesVisible()){
return result;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isRangeGridlinesVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(!isRangeGridlinesVisible()){
return result;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isRangeCrosshairVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(!isRangeCrosshairVisible()){
return result;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isRangeCrosshairLockedOnData_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(!isRangeCrosshairLockedOnData()){
return result;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member getDrawSharedDomainAxis_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(!getDrawSharedDomainAxis()){
return result;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isDomainZoomable_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(!isDomainZoomable()){
return result;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isRangeZoomable_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(!isRangeZoomable()){
return result;}
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl This selectors MemberReference member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((this.rangeAxes.indexOf(axis) != null)){

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer Literal value false_ter ^ ^ ^ ^ ^ ^ ^ 
int result = false;

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference member rangeAxes_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.rangeAxes;

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference member par1 ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this..indexOf(axis);


LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer Cast type BasicType name int_ter ^ ^ ^ ^ expression MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = (int)indexOf(axis);

IfStatement condition MethodInvocation member isDomainGridlinesVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(isDomainGridlinesVisible()){
return result;}
IfStatement condition MethodInvocation member isRangeGridlinesVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(isRangeGridlinesVisible()){
return result;}
IfStatement condition MethodInvocation member isRangeCrosshairVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(isRangeCrosshairVisible()){
return result;}
IfStatement condition MethodInvocation member isRangeCrosshairLockedOnData_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(isRangeCrosshairLockedOnData()){
return result;}
IfStatement condition MethodInvocation member getDrawSharedDomainAxis_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(getDrawSharedDomainAxis()){
return result;}
IfStatement condition MethodInvocation member isDomainZoomable_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(isDomainZoomable()){
return result;}
IfStatement condition MethodInvocation member isRangeZoomable_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(isRangeZoomable()){
return result;}
LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer Literal value true_ter ^ ^ ^ ^ ^ ^ ^ 
int result = true;

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member axis_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if((axis == null)){
return result;}
LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member setRangeAxis_ter ^ ^ ^ ^ ^ ^ ^ 
int result = setRangeAxis(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member setRangeAxes_ter ^ ^ ^ ^ ^ ^ ^ 
int result = setRangeAxes(axis);

StatementExpression expression MethodInvocation qualifier axis_ter ^ ^ member autoAdjustRange_ter ^ ^ ^ ^ ^ 
axis.autoAdjustRange();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member rangeAxes_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if((rangeAxes == null)){
return 0;}
LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer MethodInvocation arguments MemberReference member rangeAxes_ter ^ ^ ^ MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int result = indexOf(rangeAxes, axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member axis_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.rangeAxes.axis(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer MemberReference member axis_ter ^ ^ ^ ^ ^ ^ ^ 
int result = axis;

ReturnStatement_ter ^ 
if (true) { return;
 }

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl This selectors MemberReference member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
if((this.rangeAxes.indexOf(axis) != 0)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member rangeAxes_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if((rangeAxes == null)){
return result;}
LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.rangeAxes.add(axis);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer This selectors MemberReference member rangeAxes_ter ^ ^ ^ MethodInvocation arguments MemberReference member axis_ter ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int result = this.rangeAxes.debug(axis);

stderr: 