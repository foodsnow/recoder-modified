stdout: 
StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(DiagnosticType.error("null", "null"), right);

BreakStatement_ter ^ 
break;

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member rval_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(DiagnosticType.error("null", "null"), rval);

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier rval_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(rval.error("null", "null"), right);

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator ^<>_ter ^ ^ operandl MethodInvocation qualifier ScriptRuntime_ter ^ ^ arguments MemberReference member lval_ter ^ ^ ^ ^ member toInt32_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ScriptRuntime_ter ^ ^ arguments MemberReference member rval_ter ^ ^ ^ ^ member toInt32_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (ScriptRuntime.toInt32(lval) ^<> ScriptRuntime.toInt32(rval));


StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator -_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (lval - rval);

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (lval * rval);

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator +_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (lval + rval);

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (lval / rval);

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member toInt32_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(DiagnosticType.toInt32("null", "null"), right);

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ ^ 
debug(DiagnosticType.error("null", "null"), right);

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator %_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (lval % rval);

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator |_ter ^ ^ operandl MethodInvocation qualifier ScriptRuntime_ter ^ ^ arguments MemberReference member lval_ter ^ ^ ^ ^ member toInt32_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ScriptRuntime_ter ^ ^ arguments MemberReference member rval_ter ^ ^ ^ ^ member toInt32_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval));

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member add_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(DiagnosticType.add("null", "null"), right);

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member loc4 ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(DiagnosticType.error("null", "null"), );


StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member result_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(DiagnosticType.error("null", "null"), result);

StatementExpression expression MethodInvocation arguments MemberReference member rval_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(rval);

StatementExpression expression MethodInvocation arguments MemberReference member lval_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(lval);

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member loc0 ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(DiagnosticType.error("null", "null"), );


StatementExpression expression MethodInvocation arguments MethodInvocation qualifier loc4 ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(.error("null", "null"), right);


StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator &_ter ^ ^ operandl MethodInvocation qualifier ScriptRuntime_ter ^ ^ arguments MemberReference member lval_ter ^ ^ ^ ^ member toInt32_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ScriptRuntime_ter ^ ^ arguments MemberReference member rval_ter ^ ^ ^ ^ member toInt32_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval));

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier loc9 ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(.error("null", "null"), right);


StatementExpression expression MethodInvocation arguments MethodInvocation qualifier ScriptRuntime_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(ScriptRuntime.error("null", "null"), right);

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier loc6 ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(.error("null", "null"), right);


StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(DiagnosticType.error("null", "null"), right);

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member e_ter ^ ^ ^ ^ ^ 
e(DiagnosticType.error("null", "null"), right);

BreakStatement_ter ^ 
BreakStatement_ter ^ 
break;
break;

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator ^<>_ter ^ ^ operandl MethodInvocation qualifier ScriptRuntime_ter ^ ^ arguments MemberReference member lval_ter ^ ^ ^ ^ member toInt32_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ScriptRuntime_ter ^ ^ arguments MemberReference member rval_ter ^ ^ ^ ^ member toInt32_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (ScriptRuntime.toInt32(lval) ^<> ScriptRuntime.toInt32(rval));


StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (lval / rval);

StatementExpression expression MethodInvocation arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error("null", "null");

ContinueStatement_ter ^ 
continue;

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator -_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (lval - rval);

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (lval * rval);

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member i_ter ^ ^ ^ ^ ^ 
i(DiagnosticType.error("null", "null"), right);

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member put_ter ^ ^ ^ ^ ^ 
put(DiagnosticType.error("null", "null"), right);

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
error(DiagnosticType.error("null", "null"), right);
break;

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator %_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (lval % rval);

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator +_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (lval + rval);

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
result = (lval / rval);
break;

ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if (true) { return null; }

ReturnStatement_ter ^ 
return;

StatementExpression expression MethodInvocation arguments MemberReference member right_ter ^ ^ ^ MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(right, DiagnosticType.error("null", "null"));

StatementExpression expression MethodInvocation arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(result, DiagnosticType.error("null", "null"));

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(DiagnosticType.error(0, "null"), right);

StatementExpression expression MethodInvocation arguments MemberReference member rValObj_ter ^ ^ ^ MemberReference member rval_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(rValObj, rval);

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator |_ter ^ ^ operandl MethodInvocation qualifier ScriptRuntime_ter ^ ^ arguments MemberReference member lval_ter ^ ^ ^ ^ member toInt32_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ScriptRuntime_ter ^ ^ arguments MemberReference member rval_ter ^ ^ ^ ^ member toInt32_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval));

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator %_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
result = (lval % rval);
break;

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator ^<>_ter ^ ^ operandl MethodInvocation qualifier ScriptRuntime_ter ^ ^ arguments MemberReference member lval_ter ^ ^ ^ ^ member toInt32_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ScriptRuntime_ter ^ ^ arguments MemberReference member rval_ter ^ ^ ^ ^ member toInt32_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
result = (ScriptRuntime.toInt32(lval) ^<> ScriptRuntime.toInt32(rval));
break;


IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member rval_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
if((rval == 0)){

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
result = (lval * rval);
break;


BreakStatement_ter ^ 
break;

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(DiagnosticType.error("null", "null"), right);

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member rval_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(DiagnosticType.error("null", "null"), rval);

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier rval_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(rval.error("null", "null"), right);

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator ^<>_ter ^ ^ operandl MethodInvocation qualifier ScriptRuntime_ter ^ ^ arguments MemberReference member lval_ter ^ ^ ^ ^ member toInt32_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ScriptRuntime_ter ^ ^ arguments MemberReference member rval_ter ^ ^ ^ ^ member toInt32_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (ScriptRuntime.toInt32(lval) ^<> ScriptRuntime.toInt32(rval));


StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator -_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (lval - rval);

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (lval * rval);

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (lval / rval);

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator %_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (lval % rval);

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator +_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (lval + rval);

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member add_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(DiagnosticType.add("null", "null"), right);

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member toInt32_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(DiagnosticType.toInt32("null", "null"), right);

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator |_ter ^ ^ operandl MethodInvocation qualifier ScriptRuntime_ter ^ ^ arguments MemberReference member lval_ter ^ ^ ^ ^ member toInt32_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ScriptRuntime_ter ^ ^ arguments MemberReference member rval_ter ^ ^ ^ ^ member toInt32_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval));

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member debug_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(DiagnosticType.debug("null", "null"), right);

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member performArithmeticOp_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(DiagnosticType.performArithmeticOp("null", "null"), right);

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member result_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(DiagnosticType.error("null", "null"), result);

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member loc4 ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(DiagnosticType.error("null", "null"), );


StatementExpression expression MethodInvocation arguments MethodInvocation qualifier loc9 ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(.error("null", "null"), right);


StatementExpression expression MethodInvocation arguments MethodInvocation qualifier loc6 ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(.error("null", "null"), right);


StatementExpression expression MethodInvocation arguments MethodInvocation qualifier loc4 ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(.error("null", "null"), right);


StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(DiagnosticType.error("null", "null"));

BreakStatement_ter ^ 
BreakStatement_ter ^ 
break;
break;

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (lval / rval);

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator &_ter ^ ^ operandl MethodInvocation qualifier ScriptRuntime_ter ^ ^ arguments MemberReference member lval_ter ^ ^ ^ ^ member toInt32_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ScriptRuntime_ter ^ ^ arguments MemberReference member rval_ter ^ ^ ^ ^ member toInt32_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval));

StatementExpression expression MethodInvocation arguments MemberReference member rValObj_ter ^ ^ ^ MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(rValObj, DiagnosticType.error("null", "null"));

StatementExpression expression MethodInvocation arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(result, DiagnosticType.error("null", "null"));

StatementExpression expression MethodInvocation arguments MemberReference member rval_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(rval);

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member loc0 ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(DiagnosticType.error("null", "null"), );


StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator ^<>_ter ^ ^ operandl MethodInvocation qualifier ScriptRuntime_ter ^ ^ arguments MemberReference member lval_ter ^ ^ ^ ^ member toInt32_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ScriptRuntime_ter ^ ^ arguments MemberReference member rval_ter ^ ^ ^ ^ member toInt32_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (ScriptRuntime.toInt32(lval) ^<> ScriptRuntime.toInt32(rval));


StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member loc9 ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(DiagnosticType.error("null", "null"), );


StatementExpression expression MethodInvocation arguments MethodInvocation qualifier ScriptRuntime_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(ScriptRuntime.error("null", "null"), right);

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(DiagnosticType.error("null", "null"), right);

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (lval * rval);

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator -_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (lval - rval);

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier loc5 ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(.error("null", "null"), right);


StatementExpression expression MethodInvocation arguments MemberReference member lval_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(lval);

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator %_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (lval % rval);

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member loc5 ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(DiagnosticType.error("null", "null"), );


ContinueStatement_ter ^ 
continue;

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
result = (lval / rval);
break;

StatementExpression expression MethodInvocation arguments MemberReference member right_ter ^ ^ ^ MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(right, DiagnosticType.error("null", "null"));

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator +_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = (lval + rval);

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member e_ter ^ ^ ^ ^ ^ 
e(DiagnosticType.error("null", "null"), right);

StatementExpression expression MethodInvocation arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error("null", "null");

StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value BinaryOperation operator %_ter ^ ^ operandl MemberReference member lval_ter ^ ^ ^ ^ operandr MemberReference member rval_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
result = (lval % rval);
break;

StatementExpression expression MethodInvocation arguments MemberReference member rValObj_ter ^ ^ ^ MemberReference member rValObj_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(rValObj, rValObj);

ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if (true) { return null; }

StatementExpression expression MethodInvocation arguments MemberReference member rValObj_ter ^ ^ ^ MemberReference member rval_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
error(rValObj, rval);

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier DiagnosticType_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member error_ter ^ ^ ^ MemberReference member right_ter ^ ^ ^ ^ member error_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
error(DiagnosticType.error("null", "null"), right);
break;

stderr: 