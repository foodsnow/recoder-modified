stdout: condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 <= charno)) && (charno < sourceExcerpt.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 >= charno)) && (charno < sourceExcerpt.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 <= charno)) && (charno >= sourceExcerpt.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 <= charno)) && (charno <= sourceExcerpt.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member charno_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(charno) && (0 <= charno)) && (charno < sourceExcerpt.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 <= charno)) && (charno > sourceExcerpt.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 > charno)) && (charno < sourceExcerpt.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 < charno)) && (charno < sourceExcerpt.length()))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((excerpt.equals(LINE) && (0 <= charno))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member b_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(b) && (0 <= charno)) && (charno < sourceExcerpt.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier warning_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 <= charno)) && (charno < warning.length()))){
IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
if((charno < sourceExcerpt.length())){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member getCharno_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 <= charno)) && (charno < sourceExcerpt.getCharno()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier error_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 <= charno)) && (charno < error.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 == charno)) && (charno < sourceExcerpt.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier source_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 <= charno)) && (charno < source.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 <= charno)) && (charno == sourceExcerpt.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier charno_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 <= charno)) && (charno < charno.length()))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 <= charno)) && (charno < sourceExcerpt.length()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((excerpt.equals(LINE) && (0 <= charno)) && (charno < sourceExcerpt.length())) && (charno < sourceExcerpt.length()))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 <= charno)) && (charno < b.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 <= charno)) && (b < sourceExcerpt.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member sourceExcerpt_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(sourceExcerpt) && (0 <= charno)) && (charno < sourceExcerpt.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.charAt(LINE) && (0 <= charno)) && (charno < sourceExcerpt.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member source_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(source) && (0 <= charno)) && (charno < sourceExcerpt.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member isWhitespace_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.isWhitespace(LINE) && (0 <= charno)) && (charno < sourceExcerpt.length()))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((excerpt.equals(LINE) && (charno < sourceExcerpt.length()))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member warning_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(warning) && (0 <= charno)) && (charno < sourceExcerpt.length()))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (charno < sourceExcerpt.length())) && (charno < sourceExcerpt.length()))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier error_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((error.equals(LINE) && (0 <= charno)) && (charno < sourceExcerpt.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier warning_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((warning.equals(LINE) && (0 <= charno)) && (charno < sourceExcerpt.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier Character_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((Character.equals(LINE) && (0 <= charno)) && (charno < sourceExcerpt.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member LINE_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 <= charno)) && (LINE < sourceExcerpt.length()))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((excerpt.equals(LINE) && (0 <= charno)) && (charno < sourceExcerpt.length())) && (charno < sourceExcerpt.length())) && (charno < sourceExcerpt.length()))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member getLevelName_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.getLevelName(LINE) && (0 <= charno)) && (charno < sourceExcerpt.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member getName_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 <= charno)) && (charno < sourceExcerpt.getName()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 != charno)) && (charno < sourceExcerpt.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member i_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(i) && (0 <= charno)) && (charno < sourceExcerpt.length()))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 <= charno)) && excerpt.equals(LINE))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 <= charno)) && (charno != sourceExcerpt.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member excerptFormatter_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(excerptFormatter) && (0 <= charno)) && (charno < sourceExcerpt.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 <= charno)) && (charno < Character.length()))){
IfStatement condition BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ 
if((0 <= charno)){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member sourceExcerpt_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 <= charno)) && (sourceExcerpt < sourceExcerpt.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member format_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 <= charno)) && (charno < sourceExcerpt.format()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 <= charno)) && (charno || sourceExcerpt.length()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier par2 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 <= charno)) && (charno < .length()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.equals(LINE) && (0 <= charno)) && ((excerpt.equals(LINE) && (0 <= charno)) && (charno < sourceExcerpt.length())))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier excerpt_ter ^ ^ arguments MemberReference member LINE_ter ^ ^ ^ ^ member toString_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr MemberReference member charno_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member charno_ter ^ ^ ^ ^ operandr MethodInvocation qualifier sourceExcerpt_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((excerpt.toString(LINE) && (0 <= charno)) && (charno < sourceExcerpt.length()))){
stderr: 