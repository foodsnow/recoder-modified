stdout: IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ ^ 
if((((dec == null) && (exp == null)) && isDigits(numeric.substring(1)))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dec == null) && (exp == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0)))) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0))))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0)))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0))))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0))))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((dec == null) && (exp == null)) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0))))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dec == null) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0))))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) >= "-") || Character.isDigit(numeric.charAt(0))))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) > "-") || Character.isDigit(numeric.charAt(0))))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator <=_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) <= "-") || Character.isDigit(numeric.charAt(0))))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value false_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && isDigits(numeric.substring(false))) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0))))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) != "-") || Character.isDigit(numeric.charAt(0))))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && isDigits(numeric.substring(1)))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier allZeros_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) == "-") || Character.isDigit(allZeros.charAt(0))))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ ^ 
if(((dec == null) && isDigits(numeric.substring(1)))){

IfStatement condition MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ 
if(Character.isDigit(numeric.charAt(0))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0)))) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0)))) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0))))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) < "-") || Character.isDigit(numeric.charAt(0))))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value true_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && isDigits(numeric.substring(true))) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0))))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier f_ter ^ ^ member isInfinite_ter ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((f.isInfinite() && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0))))){

IfStatement condition MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ 
if(isDigits(numeric.substring(1))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((numeric.charAt(0) == "-") && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0))))){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((dec == null)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((dec == null) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0))))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier f_ter ^ ^ member floatValue_ter ^ ^ ^ ^ operandr Literal value 0.0F_ter ^ ^ ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ member allZeros_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && ((f.floatValue() == 0.0F) && !allZeros))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier loc4 ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) == "-") || Character.isDigit(.charAt(0))))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ ^ 
if((((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0)))) && isDigits(numeric.substring(1)))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((dec == null) && (exp == null)) && (exp == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ ^ 
if(((numeric.charAt(0) == "-") && isDigits(numeric.substring(1)))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier loc2 ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) == "-") || Character.isDigit(.charAt(0))))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0)))) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0))))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier d_ter ^ ^ member isInfinite_ter ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((d.isInfinite() && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0))))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && (exp == null))){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((exp == null)){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier loc6 ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) == "-") || Character.isDigit(.charAt(0))))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier loc3 ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) == "-") || Character.isDigit(.charAt(0))))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier f_ter ^ ^ member floatValue_ter ^ ^ ^ ^ operandr Literal value 0.0F_ter ^ ^ ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ member allZeros_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0)))) && ((f.floatValue() == 0.0F) && !allZeros))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier f_ter ^ ^ member isInfinite_ter ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ ^ 
if((f.isInfinite() && isDigits(numeric.substring(1)))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0)))) || ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0))))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((dec == null) && Character.isDigit(numeric.charAt(0))) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0))))){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
if((numeric.charAt(0) == "-")){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((dec == null) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0)))) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0))))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier d_ter ^ ^ member isInfinite_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier d_ter ^ ^ member floatValue_ter ^ ^ ^ ^ operandr Literal value 0.0D_ter ^ ^ ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ member allZeros_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((d.isInfinite() || ((d.floatValue() == 0.0D) && !allZeros))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0)))) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0))))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && (exp == null)) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0))))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0))))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && Character.isDigit(numeric.charAt(0))) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.charAt(0))))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier f_ter ^ ^ member isInfinite_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier f_ter ^ ^ member floatValue_ter ^ ^ ^ ^ operandr Literal value 0.0F_ter ^ ^ ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ member allZeros_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((f.isInfinite() || ((f.floatValue() == 0.0F) && !allZeros))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ ^ 
if((((dec == null) && isDigits(numeric.substring(1))) && isDigits(numeric.substring(1)))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && ((dec == null) || isDigits(numeric.substring(1))))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((numeric.charAt(0) == "-") && (exp == null))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member isInfinite_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) == "-") || Character.isDigit(numeric.isInfinite(0))))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && Character.isDigit(numeric.charAt(0)))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier NumberUtils_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) == "-") || Character.isDigit(NumberUtils.charAt(0))))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member exp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member substring_ter ^ ^ ^ ^ member isDigits_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier numeric_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier Character_ter ^ ^ arguments MethodInvocation qualifier d_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ member isDigit_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((dec == null) && (exp == null)) && isDigits(numeric.substring(1))) && ((numeric.charAt(0) == "-") || Character.isDigit(d.charAt(0))))){
stderr: 